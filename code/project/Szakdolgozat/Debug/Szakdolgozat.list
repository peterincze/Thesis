
Szakdolgozat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800d098  0800d098  0000e098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d678  0800d678  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d678  0800d678  0000e678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d680  0800d680  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d680  0800d680  0000e680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d684  0800d684  0000e684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d688  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f0  200001d4  0800d85c  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  0800d85c  0000fbc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c61a  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000368e  00000000  00000000  0002b81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0002eeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001471  00000000  00000000  00030900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afdc  00000000  00000000  00031d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e7d6  00000000  00000000  0005cd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001094cd  00000000  00000000  0007b523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001849f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008888  00000000  00000000  00184a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0018d2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d07c 	.word	0x0800d07c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800d07c 	.word	0x0800d07c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <I2C_Scanner.0>:
  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */
  void I2C_Scanner(void)
  {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	@ 0x50
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	f8c7 c004 	str.w	ip, [r7, #4]
      char msg[64];
      HAL_StatusTypeDef result;
      uint8_t i;

      sprintf(msg, "I2C Scanner Results:\r\n");
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	492f      	ldr	r1, [pc, #188]	@ (80010b0 <I2C_Scanner.0+0xcc>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f008 f985 	bl	8009304 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f936 	bl	8000270 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	b29a      	uxth	r2, r3
 8001008:	f107 010c 	add.w	r1, r7, #12
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	4828      	ldr	r0, [pc, #160]	@ (80010b4 <I2C_Scanner.0+0xd0>)
 8001012:	f006 fa0e 	bl	8007432 <HAL_UART_Transmit>

      // I2C címtartomány 0x08 - 0x77 (7 bites címzés)
      for (i = 0x08; i < 0x78; i++)
 8001016:	2308      	movs	r3, #8
 8001018:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800101c:	e02c      	b.n	8001078 <I2C_Scanner.0+0x94>
      {
          result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i << 1), 1, HAL_MAX_DELAY);
 800101e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001022:	b29b      	uxth	r3, r3
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	b299      	uxth	r1, r3
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	2201      	movs	r2, #1
 800102e:	4822      	ldr	r0, [pc, #136]	@ (80010b8 <I2C_Scanner.0+0xd4>)
 8001030:	f003 ff8a 	bl	8004f48 <HAL_I2C_IsDeviceReady>
 8001034:	4603      	mov	r3, r0
 8001036:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
          if (result == HAL_OK)
 800103a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800103e:	2b00      	cmp	r3, #0
 8001040:	d115      	bne.n	800106e <I2C_Scanner.0+0x8a>
          {
              // Ha van válasz, kiírjuk a címet
              sprintf(msg, "Eszköz talált az alábbi címen: 0x%02X\r\n", i);
 8001042:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	491c      	ldr	r1, [pc, #112]	@ (80010bc <I2C_Scanner.0+0xd8>)
 800104c:	4618      	mov	r0, r3
 800104e:	f008 f959 	bl	8009304 <siprintf>
              HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f90a 	bl	8000270 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	b29a      	uxth	r2, r3
 8001060:	f107 010c 	add.w	r1, r7, #12
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	4812      	ldr	r0, [pc, #72]	@ (80010b4 <I2C_Scanner.0+0xd0>)
 800106a:	f006 f9e2 	bl	8007432 <HAL_UART_Transmit>
      for (i = 0x08; i < 0x78; i++)
 800106e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001072:	3301      	adds	r3, #1
 8001074:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001078:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800107c:	2b77      	cmp	r3, #119	@ 0x77
 800107e:	d9ce      	bls.n	800101e <I2C_Scanner.0+0x3a>
          }
      }

      sprintf(msg, "I2C szkennelés vége\r\n");
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	490e      	ldr	r1, [pc, #56]	@ (80010c0 <I2C_Scanner.0+0xdc>)
 8001086:	4618      	mov	r0, r3
 8001088:	f008 f93c 	bl	8009304 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f8ed 	bl	8000270 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	b29a      	uxth	r2, r3
 800109a:	f107 010c 	add.w	r1, r7, #12
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <I2C_Scanner.0+0xd0>)
 80010a4:	f006 f9c5 	bl	8007432 <HAL_UART_Transmit>
  }
 80010a8:	bf00      	nop
 80010aa:	3750      	adds	r7, #80	@ 0x50
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	0800d098 	.word	0x0800d098
 80010b4:	20000450 	.word	0x20000450
 80010b8:	200002f0 	.word	0x200002f0
 80010bc:	0800d0b0 	.word	0x0800d0b0
 80010c0:	0800d0dc 	.word	0x0800d0dc

080010c4 <main>:
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
int main(void)
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80010d0:	f001 fc15 	bl	80028fe <HAL_Init>
  SystemClock_Config();
 80010d4:	f000 f828 	bl	8001128 <SystemClock_Config>
  PeriphCommonClock_Config();
 80010d8:	f000 f888 	bl	80011ec <PeriphCommonClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010dc:	f000 fb36 	bl	800174c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80010e0:	f000 f98c 	bl	80013fc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80010e4:	f000 f9c2 	bl	800146c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80010e8:	f000 fa00 	bl	80014ec <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80010ec:	f000 fa62 	bl	80015b4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80010f0:	f000 fa9e 	bl	8001630 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80010f4:	f000 facc 	bl	8001690 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010f8:	f000 fafa 	bl	80016f0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80010fc:	f000 f8a4 	bl	8001248 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001100:	f000 f918 	bl	8001334 <MX_ADC3_Init>
  MX_SPI1_Init();
 8001104:	f000 fa18 	bl	8001538 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  Temp_Sensor_Init();
 8001108:	f000 fd74 	bl	8001bf4 <Temp_Sensor_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  I2C_Scanner();
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	469c      	mov	ip, r3
 8001110:	f7ff ff68 	bl	8000fe4 <I2C_Scanner.0>
  while (1)
  {
	  read_environment_data();
 8001114:	f000 fd8e 	bl	8001c34 <read_environment_data>
	  HAL_Delay(600000); // 10 percenként ismétel
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <main+0x60>)
 800111a:	f001 fc65 	bl	80029e8 <HAL_Delay>
	  read_environment_data();
 800111e:	bf00      	nop
 8001120:	e7f8      	b.n	8001114 <main+0x50>
 8001122:	bf00      	nop
 8001124:	000927c0 	.word	0x000927c0

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b096      	sub	sp, #88	@ 0x58
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2244      	movs	r2, #68	@ 0x44
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f008 f947 	bl	80093ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800114a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800114e:	f004 fc91 	bl	8005a74 <HAL_PWREx_ControlVoltageScaling>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001158:	f000 ff28 	bl	8001fac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800115c:	f004 fc6c 	bl	8005a38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001160:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <SystemClock_Config+0xc0>)
 8001162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001166:	4a20      	ldr	r2, [pc, #128]	@ (80011e8 <SystemClock_Config+0xc0>)
 8001168:	f023 0318 	bic.w	r3, r3, #24
 800116c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001170:	2314      	movs	r3, #20
 8001172:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001180:	2360      	movs	r3, #96	@ 0x60
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001188:	2301      	movs	r3, #1
 800118a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800118c:	2301      	movs	r3, #1
 800118e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001190:	2328      	movs	r3, #40	@ 0x28
 8001192:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001194:	2307      	movs	r3, #7
 8001196:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001198:	2302      	movs	r3, #2
 800119a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 fd87 	bl	8005cb8 <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011b0:	f000 fefc 	bl	8001fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	230f      	movs	r3, #15
 80011b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	2303      	movs	r3, #3
 80011ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	2104      	movs	r1, #4
 80011cc:	4618      	mov	r0, r3
 80011ce:	f005 f94f 	bl	8006470 <HAL_RCC_ClockConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011d8:	f000 fee8 	bl	8001fac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011dc:	f005 fe56 	bl	8006e8c <HAL_RCCEx_EnableMSIPLLMode>
}
 80011e0:	bf00      	nop
 80011e2:	3758      	adds	r7, #88	@ 0x58
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000

080011ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0a2      	sub	sp, #136	@ 0x88
 80011f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f2:	463b      	mov	r3, r7
 80011f4:	2288      	movs	r2, #136	@ 0x88
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f008 f8e6 	bl	80093ca <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80011fe:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001202:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001204:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001208:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800120a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800120e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001210:	2301      	movs	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001214:	2301      	movs	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001218:	2318      	movs	r3, #24
 800121a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800121c:	2307      	movs	r3, #7
 800121e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001220:	2302      	movs	r3, #2
 8001222:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001228:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 800122c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4618      	mov	r0, r3
 8001232:	f005 fb41 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 800123c:	f000 feb6 	bl	8001fac <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3788      	adds	r7, #136	@ 0x88
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800126a:	4b2f      	ldr	r3, [pc, #188]	@ (8001328 <MX_ADC1_Init+0xe0>)
 800126c:	4a2f      	ldr	r2, [pc, #188]	@ (800132c <MX_ADC1_Init+0xe4>)
 800126e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001270:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <MX_ADC1_Init+0xe0>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001276:	4b2c      	ldr	r3, [pc, #176]	@ (8001328 <MX_ADC1_Init+0xe0>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127c:	4b2a      	ldr	r3, [pc, #168]	@ (8001328 <MX_ADC1_Init+0xe0>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001282:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <MX_ADC1_Init+0xe0>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001288:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <MX_ADC1_Init+0xe0>)
 800128a:	2204      	movs	r2, #4
 800128c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800128e:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <MX_ADC1_Init+0xe0>)
 8001290:	2200      	movs	r2, #0
 8001292:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001294:	4b24      	ldr	r3, [pc, #144]	@ (8001328 <MX_ADC1_Init+0xe0>)
 8001296:	2200      	movs	r2, #0
 8001298:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800129a:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <MX_ADC1_Init+0xe0>)
 800129c:	2201      	movs	r2, #1
 800129e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a0:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <MX_ADC1_Init+0xe0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <MX_ADC1_Init+0xe0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <MX_ADC1_Init+0xe0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <MX_ADC1_Init+0xe0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_ADC1_Init+0xe0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <MX_ADC1_Init+0xe0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ca:	4817      	ldr	r0, [pc, #92]	@ (8001328 <MX_ADC1_Init+0xe0>)
 80012cc:	f001 fde2 	bl	8002e94 <HAL_ADC_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012d6:	f000 fe69 	bl	8001fac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4810      	ldr	r0, [pc, #64]	@ (8001328 <MX_ADC1_Init+0xe0>)
 80012e6:	f002 feb3 	bl	8004050 <HAL_ADCEx_MultiModeConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012f0:	f000 fe5c 	bl	8001fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <MX_ADC1_Init+0xe8>)
 80012f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f8:	2306      	movs	r3, #6
 80012fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001300:	237f      	movs	r3, #127	@ 0x7f
 8001302:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001304:	2304      	movs	r3, #4
 8001306:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_ADC1_Init+0xe0>)
 8001312:	f002 f8e3 	bl	80034dc <HAL_ADC_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800131c:	f000 fe46 	bl	8001fac <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	@ 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200001f0 	.word	0x200001f0
 800132c:	50040000 	.word	0x50040000
 8001330:	04300002 	.word	0x04300002

08001334 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800134a:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 800134c:	4a29      	ldr	r2, [pc, #164]	@ (80013f4 <MX_ADC3_Init+0xc0>)
 800134e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001356:	4b26      	ldr	r3, [pc, #152]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800135c:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001368:	4b21      	ldr	r3, [pc, #132]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 800136a:	2204      	movs	r2, #4
 800136c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800136e:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 8001370:	2200      	movs	r2, #0
 8001372:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001374:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 8001376:	2200      	movs	r2, #0
 8001378:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800137a:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 800137c:	2201      	movs	r2, #1
 800137e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001380:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001388:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 800138a:	2200      	movs	r2, #0
 800138c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800138e:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 8001390:	2200      	movs	r2, #0
 8001392:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001394:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80013a2:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013aa:	4811      	ldr	r0, [pc, #68]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 80013ac:	f001 fd72 	bl	8002e94 <HAL_ADC_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80013b6:	f000 fdf9 	bl	8001fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <MX_ADC3_Init+0xc4>)
 80013bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013be:	2306      	movs	r3, #6
 80013c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013c6:	237f      	movs	r3, #127	@ 0x7f
 80013c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ca:	2304      	movs	r3, #4
 80013cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013d2:	463b      	mov	r3, r7
 80013d4:	4619      	mov	r1, r3
 80013d6:	4806      	ldr	r0, [pc, #24]	@ (80013f0 <MX_ADC3_Init+0xbc>)
 80013d8:	f002 f880 	bl	80034dc <HAL_ADC_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80013e2:	f000 fde3 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000254 	.word	0x20000254
 80013f4:	50040200 	.word	0x50040200
 80013f8:	c7520000 	.word	0xc7520000

080013fc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001400:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 8001402:	4a19      	ldr	r2, [pc, #100]	@ (8001468 <MX_DFSDM1_Init+0x6c>)
 8001404:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001406:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 8001408:	2201      	movs	r2, #1
 800140a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 8001414:	2202      	movs	r2, #2
 8001416:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 8001426:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800142a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 8001434:	2204      	movs	r2, #4
 8001436:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 8001440:	2201      	movs	r2, #1
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 8001446:	2200      	movs	r2, #0
 8001448:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 800144c:	2200      	movs	r2, #0
 800144e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_DFSDM1_Init+0x68>)
 8001452:	f002 ffbf 	bl	80043d4 <HAL_DFSDM_ChannelInit>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800145c:	f000 fda6 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200002b8 	.word	0x200002b8
 8001468:	40016020 	.word	0x40016020

0800146c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001470:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <MX_I2C2_Init+0x74>)
 8001472:	4a1c      	ldr	r2, [pc, #112]	@ (80014e4 <MX_I2C2_Init+0x78>)
 8001474:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001476:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_I2C2_Init+0x74>)
 8001478:	4a1b      	ldr	r2, [pc, #108]	@ (80014e8 <MX_I2C2_Init+0x7c>)
 800147a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800147c:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <MX_I2C2_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001482:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <MX_I2C2_Init+0x74>)
 8001484:	2201      	movs	r2, #1
 8001486:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001488:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <MX_I2C2_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_I2C2_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_I2C2_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_I2C2_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_I2C2_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014a6:	480e      	ldr	r0, [pc, #56]	@ (80014e0 <MX_I2C2_Init+0x74>)
 80014a8:	f003 fa85 	bl	80049b6 <HAL_I2C_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014b2:	f000 fd7b 	bl	8001fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014b6:	2100      	movs	r1, #0
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <MX_I2C2_Init+0x74>)
 80014ba:	f004 f8f3 	bl	80056a4 <HAL_I2CEx_ConfigAnalogFilter>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014c4:	f000 fd72 	bl	8001fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014c8:	2100      	movs	r1, #0
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_I2C2_Init+0x74>)
 80014cc:	f004 f935 	bl	800573a <HAL_I2CEx_ConfigDigitalFilter>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014d6:	f000 fd69 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200002f0 	.word	0x200002f0
 80014e4:	40005800 	.word	0x40005800
 80014e8:	10d19ce4 	.word	0x10d19ce4

080014ec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <MX_QUADSPI_Init+0x44>)
 80014f2:	4a10      	ldr	r2, [pc, #64]	@ (8001534 <MX_QUADSPI_Init+0x48>)
 80014f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <MX_QUADSPI_Init+0x44>)
 80014f8:	2202      	movs	r2, #2
 80014fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <MX_QUADSPI_Init+0x44>)
 80014fe:	2204      	movs	r2, #4
 8001500:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <MX_QUADSPI_Init+0x44>)
 8001504:	2210      	movs	r2, #16
 8001506:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <MX_QUADSPI_Init+0x44>)
 800150a:	2217      	movs	r2, #23
 800150c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <MX_QUADSPI_Init+0x44>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <MX_QUADSPI_Init+0x44>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_QUADSPI_Init+0x44>)
 800151c:	f004 fb10 	bl	8005b40 <HAL_QSPI_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001526:	f000 fd41 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000344 	.word	0x20000344
 8001534:	a0001000 	.word	0xa0001000

08001538 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <MX_SPI1_Init+0x74>)
 800153e:	4a1c      	ldr	r2, [pc, #112]	@ (80015b0 <MX_SPI1_Init+0x78>)
 8001540:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001542:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001544:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001548:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <MX_SPI1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001550:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001552:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001556:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_SPI1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155e:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800156a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_SPI1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_SPI1_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001586:	2207      	movs	r2, #7
 8001588:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_SPI1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001592:	2208      	movs	r2, #8
 8001594:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001598:	f005 fe5a 	bl	8007250 <HAL_SPI_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015a2:	f000 fd03 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000388 	.word	0x20000388
 80015b0:	40013000 	.word	0x40013000

080015b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <MX_SPI3_Init+0x74>)
 80015ba:	4a1c      	ldr	r2, [pc, #112]	@ (800162c <MX_SPI3_Init+0x78>)
 80015bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015be:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_SPI3_Init+0x74>)
 80015c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <MX_SPI3_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_SPI3_Init+0x74>)
 80015ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_SPI3_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_SPI3_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_SPI3_Init+0x74>)
 80015e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_SPI3_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_SPI3_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_SPI3_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_SPI3_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_SPI3_Init+0x74>)
 8001602:	2207      	movs	r2, #7
 8001604:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_SPI3_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_SPI3_Init+0x74>)
 800160e:	2208      	movs	r2, #8
 8001610:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_SPI3_Init+0x74>)
 8001614:	f005 fe1c 	bl	8007250 <HAL_SPI_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800161e:	f000 fcc5 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200003ec 	.word	0x200003ec
 800162c:	40003c00 	.word	0x40003c00

08001630 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <MX_USART1_UART_Init+0x58>)
 8001636:	4a15      	ldr	r2, [pc, #84]	@ (800168c <MX_USART1_UART_Init+0x5c>)
 8001638:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <MX_USART1_UART_Init+0x58>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_USART1_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <MX_USART1_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <MX_USART1_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_USART1_UART_Init+0x58>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <MX_USART1_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_USART1_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <MX_USART1_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_USART1_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_USART1_UART_Init+0x58>)
 8001674:	f005 fe8f 	bl	8007396 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800167e:	f000 fc95 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000450 	.word	0x20000450
 800168c:	40013800 	.word	0x40013800

08001690 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 8001696:	4a15      	ldr	r2, [pc, #84]	@ (80016ec <MX_USART3_UART_Init+0x5c>)
 8001698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016d4:	f005 fe5f 	bl	8007396 <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016de:	f000 fc65 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200004d8 	.word	0x200004d8
 80016ec:	40004800 	.word	0x40004800

080016f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80016fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fe:	2206      	movs	r2, #6
 8001700:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001704:	2202      	movs	r2, #2
 8001706:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800170a:	2202      	movs	r2, #2
 800170c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001720:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001734:	f004 f84d 	bl	80057d2 <HAL_PCD_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 fc35 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000560 	.word	0x20000560

0800174c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001762:	4bb1      	ldr	r3, [pc, #708]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	4ab0      	ldr	r2, [pc, #704]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 8001768:	f043 0310 	orr.w	r3, r3, #16
 800176c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176e:	4bae      	ldr	r3, [pc, #696]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	4bab      	ldr	r3, [pc, #684]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	4aaa      	ldr	r2, [pc, #680]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001786:	4ba8      	ldr	r3, [pc, #672]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	4ba5      	ldr	r3, [pc, #660]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	4aa4      	ldr	r2, [pc, #656]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800179e:	4ba2      	ldr	r3, [pc, #648]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	4b9f      	ldr	r3, [pc, #636]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	4a9e      	ldr	r2, [pc, #632]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b6:	4b9c      	ldr	r3, [pc, #624]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c2:	4b99      	ldr	r3, [pc, #612]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a98      	ldr	r2, [pc, #608]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b96      	ldr	r3, [pc, #600]	@ (8001a28 <MX_GPIO_Init+0x2dc>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80017e0:	4892      	ldr	r0, [pc, #584]	@ (8001a2c <MX_GPIO_Init+0x2e0>)
 80017e2:	f003 f8ad 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	f248 1104 	movw	r1, #33028	@ 0x8104
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f0:	f003 f8a6 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80017f4:	2200      	movs	r2, #0
 80017f6:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80017fa:	488d      	ldr	r0, [pc, #564]	@ (8001a30 <MX_GPIO_Init+0x2e4>)
 80017fc:	f003 f8a0 	bl	8004940 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001806:	488b      	ldr	r0, [pc, #556]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001808:	f003 f89a 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800180c:	2201      	movs	r2, #1
 800180e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001812:	4888      	ldr	r0, [pc, #544]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001814:	f003 f894 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800181e:	4886      	ldr	r0, [pc, #536]	@ (8001a38 <MX_GPIO_Init+0x2ec>)
 8001820:	f003 f88e 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	2120      	movs	r1, #32
 8001828:	4881      	ldr	r0, [pc, #516]	@ (8001a30 <MX_GPIO_Init+0x2e4>)
 800182a:	f003 f889 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800182e:	2201      	movs	r2, #1
 8001830:	2101      	movs	r1, #1
 8001832:	487e      	ldr	r0, [pc, #504]	@ (8001a2c <MX_GPIO_Init+0x2e0>)
 8001834:	f003 f884 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001838:	f240 1315 	movw	r3, #277	@ 0x115
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4876      	ldr	r0, [pc, #472]	@ (8001a2c <MX_GPIO_Init+0x2e0>)
 8001852:	f002 fecb 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001856:	236a      	movs	r3, #106	@ 0x6a
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	4870      	ldr	r0, [pc, #448]	@ (8001a2c <MX_GPIO_Init+0x2e0>)
 800186c:	f002 febe 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001870:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001876:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	486c      	ldr	r0, [pc, #432]	@ (8001a38 <MX_GPIO_Init+0x2ec>)
 8001888:	f002 feb0 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800188c:	2303      	movs	r3, #3
 800188e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800189c:	2308      	movs	r3, #8
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018aa:	f002 fe9f 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80018ae:	f248 1304 	movw	r3, #33028	@ 0x8104
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ca:	f002 fe8f 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80018ce:	2308      	movs	r3, #8
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018de:	2301      	movs	r3, #1
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ec:	f002 fe7e 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80018f0:	2301      	movs	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	484a      	ldr	r0, [pc, #296]	@ (8001a30 <MX_GPIO_Init+0x2e4>)
 8001906:	f002 fe71 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800190a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 800190e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4843      	ldr	r0, [pc, #268]	@ (8001a30 <MX_GPIO_Init+0x2e4>)
 8001924:	f002 fe62 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin PD15
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|GPIO_PIN_15
 8001928:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 800192c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800192e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	483d      	ldr	r0, [pc, #244]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001940:	f002 fe54 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001944:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4835      	ldr	r0, [pc, #212]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 800195e:	f002 fe45 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001962:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	482f      	ldr	r0, [pc, #188]	@ (8001a38 <MX_GPIO_Init+0x2ec>)
 800197c:	f002 fe36 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001980:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001986:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4828      	ldr	r0, [pc, #160]	@ (8001a38 <MX_GPIO_Init+0x2ec>)
 8001998:	f002 fe28 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800199c:	2302      	movs	r3, #2
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ac:	2305      	movs	r3, #5
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	481f      	ldr	r0, [pc, #124]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80019b8:	f002 fe18 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80019bc:	2378      	movs	r3, #120	@ 0x78
 80019be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019cc:	2307      	movs	r3, #7
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	4817      	ldr	r0, [pc, #92]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80019d8:	f002 fe08 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80019dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e2:	2312      	movs	r3, #18
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ee:	2304      	movs	r3, #4
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <MX_GPIO_Init+0x2e4>)
 80019fa:	f002 fdf7 	bl	80045ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2017      	movs	r0, #23
 8001a04:	f002 fcaf 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a08:	2017      	movs	r0, #23
 8001a0a:	f002 fcc8 	bl	800439e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	2028      	movs	r0, #40	@ 0x28
 8001a14:	f002 fca7 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a18:	2028      	movs	r0, #40	@ 0x28
 8001a1a:	f002 fcc0 	bl	800439e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	@ 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48001000 	.word	0x48001000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	48000c00 	.word	0x48000c00
 8001a38:	48000800 	.word	0x48000800

08001a3c <read_adc_value>:

/* USER CODE BEGIN 4 */

// ADC értékek beolvasása
uint32_t read_adc_value(uint32_t channel)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	615a      	str	r2, [r3, #20]
    sConfig.Channel = channel;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	617b      	str	r3, [r7, #20]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a62:	2304      	movs	r3, #4
 8001a64:	61fb      	str	r3, [r7, #28]
    sConfig.Offset = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480b      	ldr	r0, [pc, #44]	@ (8001aa0 <read_adc_value+0x64>)
 8001a72:	f001 fd33 	bl	80034dc <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);
 8001a76:	480a      	ldr	r0, [pc, #40]	@ (8001aa0 <read_adc_value+0x64>)
 8001a78:	f001 fb5c 	bl	8003134 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	4807      	ldr	r0, [pc, #28]	@ (8001aa0 <read_adc_value+0x64>)
 8001a82:	f001 fc45 	bl	8003310 <HAL_ADC_PollForConversion>
    uint32_t value = HAL_ADC_GetValue(&hadc1);
 8001a86:	4806      	ldr	r0, [pc, #24]	@ (8001aa0 <read_adc_value+0x64>)
 8001a88:	f001 fd1a 	bl	80034c0 <HAL_ADC_GetValue>
 8001a8c:	6278      	str	r0, [r7, #36]	@ 0x24
    HAL_ADC_Stop(&hadc1);
 8001a8e:	4804      	ldr	r0, [pc, #16]	@ (8001aa0 <read_adc_value+0x64>)
 8001a90:	f001 fc0a 	bl	80032a8 <HAL_ADC_Stop>

    return value;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3728      	adds	r7, #40	@ 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200001f0 	.word	0x200001f0
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <measure_dust>:
// Por mérés
float measure_dust(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
	float voltage, dust_density;
	float offset_voltage = 0.6;  // Alap feszültség GP2Y1010AU0F esetén
 8001aae:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <measure_dust+0xb8>)
 8001ab0:	613b      	str	r3, [r7, #16]
	float conversion_factor = 0.0005;  // Konverziós tényező
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b64 <measure_dust+0xbc>)
 8001ab4:	60fb      	str	r3, [r7, #12]

    // ILED bekapcsolása
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2110      	movs	r1, #16
 8001aba:	482b      	ldr	r0, [pc, #172]	@ (8001b68 <measure_dust+0xc0>)
 8001abc:	f002 ff40 	bl	8004940 <HAL_GPIO_WritePin>
    HAL_Delay(280); // LED stabilizálódása
 8001ac0:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8001ac4:	f000 ff90 	bl	80029e8 <HAL_Delay>

    uint32_t dust_value = read_adc_value(ADC_CHANNEL_1);
 8001ac8:	4828      	ldr	r0, [pc, #160]	@ (8001b6c <measure_dust+0xc4>)
 8001aca:	f7ff ffb7 	bl	8001a3c <read_adc_value>
 8001ace:	60b8      	str	r0, [r7, #8]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // ILED kikapcsolása
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	4824      	ldr	r0, [pc, #144]	@ (8001b68 <measure_dust+0xc0>)
 8001ad6:	f002 ff33 	bl	8004940 <HAL_GPIO_WritePin>
    HAL_Delay(40); // Várakozás a LED lekapcsolás után
 8001ada:	2028      	movs	r0, #40	@ 0x28
 8001adc:	f000 ff84 	bl	80029e8 <HAL_Delay>

    // Feszültség számítása
    voltage = (dust_value / 4096.0) * 3.3;
 8001ae0:	68b8      	ldr	r0, [r7, #8]
 8001ae2:	f7fe fd0f 	bl	8000504 <__aeabi_ui2d>
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <measure_dust+0xc8>)
 8001aec:	f7fe feae 	bl	800084c <__aeabi_ddiv>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	a317      	add	r3, pc, #92	@ (adr r3, 8001b58 <measure_dust+0xb0>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fd7b 	bl	80005f8 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7ff f86d 	bl	8000be8 <__aeabi_d2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	607b      	str	r3, [r7, #4]

    // Porkoncentráció (μg/m³) számítása
    if (voltage > offset_voltage) {
 8001b12:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b16:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b22:	dd0c      	ble.n	8001b3e <measure_dust+0x96>
        dust_density = (voltage - offset_voltage) / conversion_factor;
 8001b24:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b2c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b30:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b38:	edc7 7a05 	vstr	s15, [r7, #20]
 8001b3c:	e002      	b.n	8001b44 <measure_dust+0x9c>
    } else {
        dust_density = 0;  // Alacsony értékek esetén nulla porkoncentráció
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
    }

    return dust_density;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	ee07 3a90 	vmov	s15, r3
}
 8001b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	f3af 8000 	nop.w
 8001b58:	66666666 	.word	0x66666666
 8001b5c:	400a6666 	.word	0x400a6666
 8001b60:	3f19999a 	.word	0x3f19999a
 8001b64:	3a03126f 	.word	0x3a03126f
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	04300002 	.word	0x04300002
 8001b70:	40b00000 	.word	0x40b00000

08001b74 <measure_sound>:

// Zaj mérés
float measure_sound(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
	float reference_value = 100.0;  // Alap referencia érték
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <measure_sound+0x74>)
 8001b7c:	60bb      	str	r3, [r7, #8]
	float dB_value;

	uint32_t sound_value = read_adc_value(ADC_CHANNEL_2);
 8001b7e:	481b      	ldr	r0, [pc, #108]	@ (8001bec <measure_sound+0x78>)
 8001b80:	f7ff ff5c 	bl	8001a3c <read_adc_value>
 8001b84:	6078      	str	r0, [r7, #4]

	// dB számítása
	if (sound_value > 0) {
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d022      	beq.n	8001bd2 <measure_sound+0x5e>
	    dB_value = 20 * log10(sound_value / reference_value);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b9e:	ee16 0a90 	vmov	r0, s13
 8001ba2:	f7fe fcd1 	bl	8000548 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	ec43 2b10 	vmov	d0, r2, r3
 8001bae:	f00a ffe3 	bl	800cb78 <log10>
 8001bb2:	ec51 0b10 	vmov	r0, r1, d0
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <measure_sound+0x7c>)
 8001bbc:	f7fe fd1c 	bl	80005f8 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7ff f80e 	bl	8000be8 <__aeabi_d2f>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e002      	b.n	8001bd8 <measure_sound+0x64>
	} else {
	    dB_value = 0;  // Csend esetén 0 dB
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
	}

	return dB_value;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	ee07 3a90 	vmov	s15, r3
}
 8001bde:	eeb0 0a67 	vmov.f32	s0, s15
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	42c80000 	.word	0x42c80000
 8001bec:	08600004 	.word	0x08600004
 8001bf0:	40340000 	.word	0x40340000

08001bf4 <Temp_Sensor_Init>:


void Temp_Sensor_Init()
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09a      	sub	sp, #104	@ 0x68
 8001bf8:	af00      	add	r7, sp, #0
	char tmsg[100];

	snprintf(tmsg, sizeof(tmsg),"HTS221 Initialization start.\r\n");
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <Temp_Sensor_Init+0x38>)
 8001bfe:	2164      	movs	r1, #100	@ 0x64
 8001c00:	4618      	mov	r0, r3
 8001c02:	f007 fb4b 	bl	800929c <sniprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*)tmsg, strlen(tmsg), HAL_MAX_DELAY);
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fb31 	bl	8000270 <strlen>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	1d39      	adds	r1, r7, #4
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
 8001c18:	4805      	ldr	r0, [pc, #20]	@ (8001c30 <Temp_Sensor_Init+0x3c>)
 8001c1a:	f005 fc0a 	bl	8007432 <HAL_UART_Transmit>

    HAL_Delay(10);
 8001c1e:	200a      	movs	r0, #10
 8001c20:	f000 fee2 	bl	80029e8 <HAL_Delay>
}
 8001c24:	bf00      	nop
 8001c26:	3768      	adds	r7, #104	@ 0x68
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	0800d0f4 	.word	0x0800d0f4
 8001c30:	20000450 	.word	0x20000450

08001c34 <read_environment_data>:

void read_environment_data(void)
{
 8001c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c38:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8001c3c:	af0a      	add	r7, sp, #40	@ 0x28
    uint8_t temp_hum[4], press[3];
    uint8_t ctrl_reg1 = 0x50;  // ODR = 1 Hz (0x50), amely folyamatos adatfrissítést biztosít
 8001c3e:	2350      	movs	r3, #80	@ 0x50
 8001c40:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    uint8_t T0_degC_x8, T1_degC_x8, T1_T0_msb;
    int16_t T0_out, T1_out;
    float T0_degC, T1_degC;

    // Kalibrációs hőmérséklet konstansok kiolvasása
    HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, 0x32, I2C_MEMADD_SIZE_8BIT, &T0_degC_x8, 1, HAL_MAX_DELAY);
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	f107 0313 	add.w	r3, r7, #19
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2301      	movs	r3, #1
 8001c56:	2232      	movs	r2, #50	@ 0x32
 8001c58:	21be      	movs	r1, #190	@ 0xbe
 8001c5a:	48cd      	ldr	r0, [pc, #820]	@ (8001f90 <read_environment_data+0x35c>)
 8001c5c:	f003 f85a 	bl	8004d14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, 0x33, I2C_MEMADD_SIZE_8BIT, &T1_degC_x8, 1, HAL_MAX_DELAY);
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	2301      	movs	r3, #1
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	f107 0312 	add.w	r3, r7, #18
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2301      	movs	r3, #1
 8001c72:	2233      	movs	r2, #51	@ 0x33
 8001c74:	21be      	movs	r1, #190	@ 0xbe
 8001c76:	48c6      	ldr	r0, [pc, #792]	@ (8001f90 <read_environment_data+0x35c>)
 8001c78:	f003 f84c 	bl	8004d14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, 0x35, I2C_MEMADD_SIZE_8BIT, &T1_T0_msb, 1, HAL_MAX_DELAY);
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	2301      	movs	r3, #1
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	f107 0311 	add.w	r3, r7, #17
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	2235      	movs	r2, #53	@ 0x35
 8001c90:	21be      	movs	r1, #190	@ 0xbe
 8001c92:	48bf      	ldr	r0, [pc, #764]	@ (8001f90 <read_environment_data+0x35c>)
 8001c94:	f003 f83e 	bl	8004d14 <HAL_I2C_Mem_Read>

    // T0 és T1 fok kiszámítása a dokumentáció alapján (8-cal osztva a x8 érték miatt)
    T0_degC = ((T0_degC_x8 | ((T1_T0_msb & 0x03) << 8)) / 8.0f);
 8001c98:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001c9c:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001ca8:	f2a3 232f 	subw	r3, r3, #559	@ 0x22f
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cbe:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc6:	edc7 7a8e 	vstr	s15, [r7, #568]	@ 0x238
    T1_degC = ((T1_degC_x8 | ((T1_T0_msb & 0x0C) << 6)) / 8.0f);
 8001cca:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001cce:	f2a3 232e 	subw	r3, r3, #558	@ 0x22e
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001cda:	f2a3 232f 	subw	r3, r3, #559	@ 0x22f
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	019b      	lsls	r3, r3, #6
 8001ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf0:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001cf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf8:	edc7 7a8d 	vstr	s15, [r7, #564]	@ 0x234

    // Hőmérséklet kalibrációs értékek kiolvasása
    uint8_t T0_out_lsb, T0_out_msb, T1_out_lsb, T1_out_msb;
    HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, 0x3C, I2C_MEMADD_SIZE_8BIT, &T0_out_lsb, 1, HAL_MAX_DELAY);
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	2301      	movs	r3, #1
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	f107 0310 	add.w	r3, r7, #16
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	223c      	movs	r2, #60	@ 0x3c
 8001d10:	21be      	movs	r1, #190	@ 0xbe
 8001d12:	489f      	ldr	r0, [pc, #636]	@ (8001f90 <read_environment_data+0x35c>)
 8001d14:	f002 fffe 	bl	8004d14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, 0x3D, I2C_MEMADD_SIZE_8BIT, &T0_out_msb, 1, HAL_MAX_DELAY);
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	f107 030f 	add.w	r3, r7, #15
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	223d      	movs	r2, #61	@ 0x3d
 8001d2c:	21be      	movs	r1, #190	@ 0xbe
 8001d2e:	4898      	ldr	r0, [pc, #608]	@ (8001f90 <read_environment_data+0x35c>)
 8001d30:	f002 fff0 	bl	8004d14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, 0x3E, I2C_MEMADD_SIZE_8BIT, &T1_out_lsb, 1, HAL_MAX_DELAY);
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	9302      	str	r3, [sp, #8]
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	f107 030e 	add.w	r3, r7, #14
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2301      	movs	r3, #1
 8001d46:	223e      	movs	r2, #62	@ 0x3e
 8001d48:	21be      	movs	r1, #190	@ 0xbe
 8001d4a:	4891      	ldr	r0, [pc, #580]	@ (8001f90 <read_environment_data+0x35c>)
 8001d4c:	f002 ffe2 	bl	8004d14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, 0x3F, I2C_MEMADD_SIZE_8BIT, &T1_out_msb, 1, HAL_MAX_DELAY);
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	9302      	str	r3, [sp, #8]
 8001d56:	2301      	movs	r3, #1
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	f107 030d 	add.w	r3, r7, #13
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2301      	movs	r3, #1
 8001d62:	223f      	movs	r2, #63	@ 0x3f
 8001d64:	21be      	movs	r1, #190	@ 0xbe
 8001d66:	488a      	ldr	r0, [pc, #552]	@ (8001f90 <read_environment_data+0x35c>)
 8001d68:	f002 ffd4 	bl	8004d14 <HAL_I2C_Mem_Read>

    // T0_out és T1_out helyes 16 bites előjeles értékként
    T0_out = (int16_t)(T0_out_msb << 8 | T0_out_lsb);
 8001d6c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d70:	f2a3 2331 	subw	r3, r3, #561	@ 0x231
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d7e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f8a7 3232 	strh.w	r3, [r7, #562]	@ 0x232
    T1_out = (int16_t)(T1_out_msb << 8 | T1_out_lsb);
 8001d8c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d90:	f2a3 2333 	subw	r3, r3, #563	@ 0x233
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d9e:	f2a3 2332 	subw	r3, r3, #562	@ 0x232
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8a7 3230 	strh.w	r3, [r7, #560]	@ 0x230

    // Aktuális hőmérséklet kiolvasása
    HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, 0x28 | 0x80, I2C_MEMADD_SIZE_8BIT, temp_hum, 4, HAL_MAX_DELAY);
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	9302      	str	r3, [sp, #8]
 8001db2:	2304      	movs	r3, #4
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	22a8      	movs	r2, #168	@ 0xa8
 8001dc0:	21be      	movs	r1, #190	@ 0xbe
 8001dc2:	4873      	ldr	r0, [pc, #460]	@ (8001f90 <read_environment_data+0x35c>)
 8001dc4:	f002 ffa6 	bl	8004d14 <HAL_I2C_Mem_Read>
    int16_t temp_raw = (int16_t)(temp_hum[1] << 8 | temp_hum[0]);
 8001dc8:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8a7 322e 	strh.w	r3, [r7, #558]	@ 0x22e

    // Hőmérséklet számítása kalibrációs adatok alapján
    temperature = T0_degC + ((float)(((temp_raw - T0_out) * (T1_degC - T0_degC) / (T1_out - T0_out)) * -1) / 128);
 8001ddc:	f9b7 222e 	ldrsh.w	r2, [r7, #558]	@ 0x22e
 8001de0:	f9b7 3232 	ldrsh.w	r3, [r7, #562]	@ 0x232
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dee:	edd7 6a8d 	vldr	s13, [r7, #564]	@ 0x234
 8001df2:	edd7 7a8e 	vldr	s15, [r7, #568]	@ 0x238
 8001df6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001dfa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001dfe:	f9b7 2230 	ldrsh.w	r2, [r7, #560]	@ 0x230
 8001e02:	f9b7 3232 	ldrsh.w	r3, [r7, #562]	@ 0x232
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e14:	eeb1 7a67 	vneg.f32	s14, s15
 8001e18:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8001f94 <read_environment_data+0x360>
 8001e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e20:	ed97 7a8e 	vldr	s14, [r7, #568]	@ 0x238
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e28:	edc7 7a8a 	vstr	s15, [r7, #552]	@ 0x228

    // Páratartalom számítása (például egyszerű átskálázás)
    int16_t hum_raw = (int16_t)(temp_hum[3] << 8 | temp_hum[2]);
 8001e2c:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	b21a      	sxth	r2, r3
 8001e34:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
    humidity = (float)hum_raw / 65536 * 10000;
 8001e40:	f9b7 3226 	ldrsh.w	r3, [r7, #550]	@ 0x226
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4c:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8001f98 <read_environment_data+0x364>
 8001e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e54:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001f9c <read_environment_data+0x368>
 8001e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5c:	edc7 7a88 	vstr	s15, [r7, #544]	@ 0x220

    // LPS22HB szenzor beállítása folyamatos frissítésre
    HAL_I2C_Mem_Write(&hi2c2, LPS22HB_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, &ctrl_reg1, 1, HAL_MAX_DELAY);
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	9302      	str	r3, [sp, #8]
 8001e66:	2301      	movs	r3, #1
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	f207 230b 	addw	r3, r7, #523	@ 0x20b
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2301      	movs	r3, #1
 8001e72:	2210      	movs	r2, #16
 8001e74:	21ba      	movs	r1, #186	@ 0xba
 8001e76:	4846      	ldr	r0, [pc, #280]	@ (8001f90 <read_environment_data+0x35c>)
 8001e78:	f002 fe38 	bl	8004aec <HAL_I2C_Mem_Write>
    HAL_Delay(100);  // Rövid késleltetés az inicializálás után
 8001e7c:	2064      	movs	r0, #100	@ 0x64
 8001e7e:	f000 fdb3 	bl	80029e8 <HAL_Delay>


    // Frissítés ellenőrzése
    HAL_I2C_Mem_Read(&hi2c2, LPS22HB_ADDR, 0x27, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	9302      	str	r3, [sp, #8]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	f207 230a 	addw	r3, r7, #522	@ 0x20a
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2301      	movs	r3, #1
 8001e94:	2227      	movs	r2, #39	@ 0x27
 8001e96:	21ba      	movs	r1, #186	@ 0xba
 8001e98:	483d      	ldr	r0, [pc, #244]	@ (8001f90 <read_environment_data+0x35c>)
 8001e9a:	f002 ff3b 	bl	8004d14 <HAL_I2C_Mem_Read>

    if (status & 0x01) // Nyomás adat készen áll
 8001e9e:	f897 320a 	ldrb.w	r3, [r7, #522]	@ 0x20a
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d025      	beq.n	8001ef6 <read_environment_data+0x2c2>
    {
    	HAL_I2C_Mem_Read(&hi2c2, LPS22HB_ADDR, 0x28 | 0x80, I2C_MEMADD_SIZE_8BIT, press, 3, HAL_MAX_DELAY);
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2301      	movs	r3, #1
 8001ebc:	22a8      	movs	r2, #168	@ 0xa8
 8001ebe:	21ba      	movs	r1, #186	@ 0xba
 8001ec0:	4833      	ldr	r0, [pc, #204]	@ (8001f90 <read_environment_data+0x35c>)
 8001ec2:	f002 ff27 	bl	8004d14 <HAL_I2C_Mem_Read>
    	int32_t press_raw = (int32_t)(press[2] << 16 | press[1] << 8 | press[0]);
 8001ec6:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8001eca:	041a      	lsls	r2, r3, #16
 8001ecc:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f897 220c 	ldrb.w	r2, [r7, #524]	@ 0x20c
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c

    	// Skálázás 4096-tal, hogy hPa értéket kapjunk
    	pressure = (float)press_raw / 4044.0f;
 8001ede:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eea:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001fa0 <read_environment_data+0x36c>
 8001eee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef2:	edc7 7a8f 	vstr	s15, [r7, #572]	@ 0x23c
    }

    // Külső szenzorok lekérdezése
    float dust = measure_dust();
 8001ef6:	f7ff fdd7 	bl	8001aa8 <measure_dust>
 8001efa:	ed87 0a86 	vstr	s0, [r7, #536]	@ 0x218
    float sound = measure_sound();
 8001efe:	f7ff fe39 	bl	8001b74 <measure_sound>
 8001f02:	ed87 0a85 	vstr	s0, [r7, #532]	@ 0x214

    // Kiíratás a soros portra
    snprintf(msg, sizeof(msg), "<Measurment><Message HardverID=\"000000EC\" Ido=\"2018-01-21 19:10:00\" Eszakiszelesseg=\"47.9024651\" "
 8001f06:	f8d7 0228 	ldr.w	r0, [r7, #552]	@ 0x228
 8001f0a:	f7fe fb1d 	bl	8000548 <__aeabi_f2d>
 8001f0e:	4604      	mov	r4, r0
 8001f10:	460d      	mov	r5, r1
 8001f12:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8001f16:	f7fe fb17 	bl	8000548 <__aeabi_f2d>
 8001f1a:	4680      	mov	r8, r0
 8001f1c:	4689      	mov	r9, r1
 8001f1e:	f8d7 0220 	ldr.w	r0, [r7, #544]	@ 0x220
 8001f22:	f7fe fb11 	bl	8000548 <__aeabi_f2d>
 8001f26:	4682      	mov	sl, r0
 8001f28:	468b      	mov	fp, r1
 8001f2a:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8001f2e:	f7fe fb0b 	bl	8000548 <__aeabi_f2d>
 8001f32:	e9c7 0100 	strd	r0, r1, [r7]
 8001f36:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001f3a:	f7fe fb05 	bl	8000548 <__aeabi_f2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	f107 0014 	add.w	r0, r7, #20
 8001f46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001f4a:	ed97 7b00 	vldr	d7, [r7]
 8001f4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001f52:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001f56:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001f5a:	e9cd 4500 	strd	r4, r5, [sp]
 8001f5e:	4a11      	ldr	r2, [pc, #68]	@ (8001fa4 <read_environment_data+0x370>)
 8001f60:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001f64:	f007 f99a 	bl	800929c <sniprintf>
    		"Keletihosszusag=\"20.3867191\" Homerseklet=\"%f\" Legnyomas=\"%.0f\" Paratartalom=\"%.0f\" Szallopor=\"%.0f\" Zaj=\"%.0f\">"
    		"</Message></Measurment>\r\n", temperature, pressure, humidity, dust, sound);
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe f97f 	bl	8000270 <strlen>
 8001f72:	4603      	mov	r3, r0
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	f107 0114 	add.w	r1, r7, #20
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	480a      	ldr	r0, [pc, #40]	@ (8001fa8 <read_environment_data+0x374>)
 8001f80:	f005 fa57 	bl	8007432 <HAL_UART_Transmit>
}
 8001f84:	bf00      	nop
 8001f86:	f507 7710 	add.w	r7, r7, #576	@ 0x240
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f90:	200002f0 	.word	0x200002f0
 8001f94:	43000000 	.word	0x43000000
 8001f98:	47800000 	.word	0x47800000
 8001f9c:	461c4000 	.word	0x461c4000
 8001fa0:	457cc000 	.word	0x457cc000
 8001fa4:	0800d114 	.word	0x0800d114
 8001fa8:	20000450 	.word	0x20000450

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <Error_Handler+0x8>

08001fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fca:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fda:	4a08      	ldr	r2, [pc, #32]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000

08002000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	@ 0x30
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a3f      	ldr	r2, [pc, #252]	@ (800211c <HAL_ADC_MspInit+0x11c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d15e      	bne.n	80020e0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002022:	4b3f      	ldr	r3, [pc, #252]	@ (8002120 <HAL_ADC_MspInit+0x120>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	4a3d      	ldr	r2, [pc, #244]	@ (8002120 <HAL_ADC_MspInit+0x120>)
 800202a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800202c:	4b3c      	ldr	r3, [pc, #240]	@ (8002120 <HAL_ADC_MspInit+0x120>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d10b      	bne.n	800204c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002034:	4b3b      	ldr	r3, [pc, #236]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 8002036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002038:	4a3a      	ldr	r2, [pc, #232]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 800203a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800203e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002040:	4b38      	ldr	r3, [pc, #224]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 8002042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204c:	4b35      	ldr	r3, [pc, #212]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 800204e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002050:	4a34      	ldr	r2, [pc, #208]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002058:	4b32      	ldr	r3, [pc, #200]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 800205a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002064:	4b2f      	ldr	r3, [pc, #188]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 8002066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002068:	4a2e      	ldr	r2, [pc, #184]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002070:	4b2c      	ldr	r3, [pc, #176]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207c:	4b29      	ldr	r3, [pc, #164]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002080:	4a28      	ldr	r2, [pc, #160]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 8002082:	f043 0302 	orr.w	r3, r3, #2
 8002086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002088:	4b26      	ldr	r3, [pc, #152]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 800208a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002094:	233f      	movs	r3, #63	@ 0x3f
 8002096:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002098:	230b      	movs	r3, #11
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	4820      	ldr	r0, [pc, #128]	@ (8002128 <HAL_ADC_MspInit+0x128>)
 80020a8:	f002 faa0 	bl	80045ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 80020ac:	2310      	movs	r3, #16
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020b0:	230b      	movs	r3, #11
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020c2:	f002 fa93 	bl	80045ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 80020c6:	2302      	movs	r3, #2
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020ca:	230b      	movs	r3, #11
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 031c 	add.w	r3, r7, #28
 80020d6:	4619      	mov	r1, r3
 80020d8:	4814      	ldr	r0, [pc, #80]	@ (800212c <HAL_ADC_MspInit+0x12c>)
 80020da:	f002 fa87 	bl	80045ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020de:	e019      	b.n	8002114 <HAL_ADC_MspInit+0x114>
  else if(hadc->Instance==ADC3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <HAL_ADC_MspInit+0x130>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d114      	bne.n	8002114 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC_CLK_ENABLED++;
 80020ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <HAL_ADC_MspInit+0x120>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002120 <HAL_ADC_MspInit+0x120>)
 80020f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80020f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_ADC_MspInit+0x120>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d10b      	bne.n	8002114 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC_CLK_ENABLE();
 80020fc:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002100:	4a08      	ldr	r2, [pc, #32]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 8002102:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002106:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_ADC_MspInit+0x124>)
 800210a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
}
 8002114:	bf00      	nop
 8002116:	3730      	adds	r7, #48	@ 0x30
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	50040000 	.word	0x50040000
 8002120:	20000a44 	.word	0x20000a44
 8002124:	40021000 	.word	0x40021000
 8002128:	48000800 	.word	0x48000800
 800212c:	48000400 	.word	0x48000400
 8002130:	50040200 	.word	0x50040200

08002134 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b0ac      	sub	sp, #176	@ 0xb0
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2288      	movs	r2, #136	@ 0x88
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f007 f938 	bl	80093ca <memset>
  if(DFSDM1_Init == 0)
 800215a:	4b25      	ldr	r3, [pc, #148]	@ (80021f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d142      	bne.n	80021e8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002162:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002166:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4618      	mov	r0, r3
 8002174:	f004 fba0 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800217e:	f7ff ff15 	bl	8001fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	4a1b      	ldr	r2, [pc, #108]	@ (80021f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002188:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800218c:	6613      	str	r3, [r2, #96]	@ 0x60
 800218e:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002192:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800219a:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	4a15      	ldr	r2, [pc, #84]	@ (80021f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021a0:	f043 0310 	orr.w	r3, r3, #16
 80021a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a6:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80021b2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80021b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80021cc:	2306      	movs	r3, #6
 80021ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021d6:	4619      	mov	r1, r3
 80021d8:	4807      	ldr	r0, [pc, #28]	@ (80021f8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80021da:	f002 fa07 	bl	80045ec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80021de:	4b04      	ldr	r3, [pc, #16]	@ (80021f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a02      	ldr	r2, [pc, #8]	@ (80021f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80021e6:	6013      	str	r3, [r2, #0]
  }

}
 80021e8:	bf00      	nop
 80021ea:	37b0      	adds	r7, #176	@ 0xb0
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000a48 	.word	0x20000a48
 80021f4:	40021000 	.word	0x40021000
 80021f8:	48001000 	.word	0x48001000

080021fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b0ac      	sub	sp, #176	@ 0xb0
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2288      	movs	r2, #136	@ 0x88
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f007 f8d4 	bl	80093ca <memset>
  if(hi2c->Instance==I2C2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a21      	ldr	r2, [pc, #132]	@ (80022ac <HAL_I2C_MspInit+0xb0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d13b      	bne.n	80022a4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800222c:	2380      	movs	r3, #128	@ 0x80
 800222e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002230:	2300      	movs	r3, #0
 8002232:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4618      	mov	r0, r3
 800223a:	f004 fb3d 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002244:	f7ff feb2 	bl	8001fac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_I2C_MspInit+0xb4>)
 800224a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224c:	4a18      	ldr	r2, [pc, #96]	@ (80022b0 <HAL_I2C_MspInit+0xb4>)
 800224e:	f043 0302 	orr.w	r3, r3, #2
 8002252:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <HAL_I2C_MspInit+0xb4>)
 8002256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002260:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002264:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002268:	2312      	movs	r3, #18
 800226a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800226e:	2301      	movs	r3, #1
 8002270:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800227a:	2304      	movs	r3, #4
 800227c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002284:	4619      	mov	r1, r3
 8002286:	480b      	ldr	r0, [pc, #44]	@ (80022b4 <HAL_I2C_MspInit+0xb8>)
 8002288:	f002 f9b0 	bl	80045ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <HAL_I2C_MspInit+0xb4>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002290:	4a07      	ldr	r2, [pc, #28]	@ (80022b0 <HAL_I2C_MspInit+0xb4>)
 8002292:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002296:	6593      	str	r3, [r2, #88]	@ 0x58
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_I2C_MspInit+0xb4>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80022a4:	bf00      	nop
 80022a6:	37b0      	adds	r7, #176	@ 0xb0
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40005800 	.word	0x40005800
 80022b0:	40021000 	.word	0x40021000
 80022b4:	48000400 	.word	0x48000400

080022b8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <HAL_QSPI_MspInit+0x7c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d128      	bne.n	800232c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80022da:	4b17      	ldr	r3, [pc, #92]	@ (8002338 <HAL_QSPI_MspInit+0x80>)
 80022dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022de:	4a16      	ldr	r2, [pc, #88]	@ (8002338 <HAL_QSPI_MspInit+0x80>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80022e6:	4b14      	ldr	r3, [pc, #80]	@ (8002338 <HAL_QSPI_MspInit+0x80>)
 80022e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022f2:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <HAL_QSPI_MspInit+0x80>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	4a10      	ldr	r2, [pc, #64]	@ (8002338 <HAL_QSPI_MspInit+0x80>)
 80022f8:	f043 0310 	orr.w	r3, r3, #16
 80022fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <HAL_QSPI_MspInit+0x80>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800230a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800230e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002318:	2303      	movs	r3, #3
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800231c:	230a      	movs	r3, #10
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4805      	ldr	r0, [pc, #20]	@ (800233c <HAL_QSPI_MspInit+0x84>)
 8002328:	f002 f960 	bl	80045ec <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	@ 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	a0001000 	.word	0xa0001000
 8002338:	40021000 	.word	0x40021000
 800233c:	48001000 	.word	0x48001000

08002340 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	@ 0x30
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a2f      	ldr	r2, [pc, #188]	@ (800241c <HAL_SPI_MspInit+0xdc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d129      	bne.n	80023b6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002362:	4b2f      	ldr	r3, [pc, #188]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 8002364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002366:	4a2e      	ldr	r2, [pc, #184]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 8002368:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800236c:	6613      	str	r3, [r2, #96]	@ 0x60
 800236e:	4b2c      	ldr	r3, [pc, #176]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b29      	ldr	r3, [pc, #164]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	4a28      	ldr	r2, [pc, #160]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002386:	4b26      	ldr	r3, [pc, #152]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002392:	23e0      	movs	r3, #224	@ 0xe0
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023a2:	2305      	movs	r3, #5
 80023a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b0:	f002 f91c 	bl	80045ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80023b4:	e02d      	b.n	8002412 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002424 <HAL_SPI_MspInit+0xe4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d128      	bne.n	8002412 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80023c0:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c4:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 80023c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80023cc:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d8:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 80023da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023dc:	4a10      	ldr	r2, [pc, #64]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_SPI_MspInit+0xe0>)
 80023e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80023f0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80023f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002402:	2306      	movs	r3, #6
 8002404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002406:	f107 031c 	add.w	r3, r7, #28
 800240a:	4619      	mov	r1, r3
 800240c:	4806      	ldr	r0, [pc, #24]	@ (8002428 <HAL_SPI_MspInit+0xe8>)
 800240e:	f002 f8ed 	bl	80045ec <HAL_GPIO_Init>
}
 8002412:	bf00      	nop
 8002414:	3730      	adds	r7, #48	@ 0x30
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40013000 	.word	0x40013000
 8002420:	40021000 	.word	0x40021000
 8002424:	40003c00 	.word	0x40003c00
 8002428:	48000800 	.word	0x48000800

0800242c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0ae      	sub	sp, #184	@ 0xb8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	2288      	movs	r2, #136	@ 0x88
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f006 ffbc 	bl	80093ca <memset>
  if(huart->Instance==USART1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a42      	ldr	r2, [pc, #264]	@ (8002560 <HAL_UART_MspInit+0x134>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d13b      	bne.n	80024d4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800245c:	2301      	movs	r3, #1
 800245e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002460:	2300      	movs	r3, #0
 8002462:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	4618      	mov	r0, r3
 800246a:	f004 fa25 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002474:	f7ff fd9a 	bl	8001fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002478:	4b3a      	ldr	r3, [pc, #232]	@ (8002564 <HAL_UART_MspInit+0x138>)
 800247a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247c:	4a39      	ldr	r2, [pc, #228]	@ (8002564 <HAL_UART_MspInit+0x138>)
 800247e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002482:	6613      	str	r3, [r2, #96]	@ 0x60
 8002484:	4b37      	ldr	r3, [pc, #220]	@ (8002564 <HAL_UART_MspInit+0x138>)
 8002486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002490:	4b34      	ldr	r3, [pc, #208]	@ (8002564 <HAL_UART_MspInit+0x138>)
 8002492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002494:	4a33      	ldr	r2, [pc, #204]	@ (8002564 <HAL_UART_MspInit+0x138>)
 8002496:	f043 0302 	orr.w	r3, r3, #2
 800249a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800249c:	4b31      	ldr	r3, [pc, #196]	@ (8002564 <HAL_UART_MspInit+0x138>)
 800249e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80024a8:	23c0      	movs	r3, #192	@ 0xc0
 80024aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ba:	2303      	movs	r3, #3
 80024bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024c0:	2307      	movs	r3, #7
 80024c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4826      	ldr	r0, [pc, #152]	@ (8002568 <HAL_UART_MspInit+0x13c>)
 80024ce:	f002 f88d 	bl	80045ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024d2:	e040      	b.n	8002556 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a24      	ldr	r2, [pc, #144]	@ (800256c <HAL_UART_MspInit+0x140>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d13b      	bne.n	8002556 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024de:	2304      	movs	r3, #4
 80024e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 f9e4 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_UART_MspInit+0xce>
      Error_Handler();
 80024f6:	f7ff fd59 	bl	8001fac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <HAL_UART_MspInit+0x138>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	4a19      	ldr	r2, [pc, #100]	@ (8002564 <HAL_UART_MspInit+0x138>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002504:	6593      	str	r3, [r2, #88]	@ 0x58
 8002506:	4b17      	ldr	r3, [pc, #92]	@ (8002564 <HAL_UART_MspInit+0x138>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002512:	4b14      	ldr	r3, [pc, #80]	@ (8002564 <HAL_UART_MspInit+0x138>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002516:	4a13      	ldr	r2, [pc, #76]	@ (8002564 <HAL_UART_MspInit+0x138>)
 8002518:	f043 0308 	orr.w	r3, r3, #8
 800251c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <HAL_UART_MspInit+0x138>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800252a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800252e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002544:	2307      	movs	r3, #7
 8002546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800254a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800254e:	4619      	mov	r1, r3
 8002550:	4807      	ldr	r0, [pc, #28]	@ (8002570 <HAL_UART_MspInit+0x144>)
 8002552:	f002 f84b 	bl	80045ec <HAL_GPIO_Init>
}
 8002556:	bf00      	nop
 8002558:	37b8      	adds	r7, #184	@ 0xb8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40013800 	.word	0x40013800
 8002564:	40021000 	.word	0x40021000
 8002568:	48000400 	.word	0x48000400
 800256c:	40004800 	.word	0x40004800
 8002570:	48000c00 	.word	0x48000c00

08002574 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	@ 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002594:	d154      	bne.n	8002640 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b2c      	ldr	r3, [pc, #176]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	4a2b      	ldr	r2, [pc, #172]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a2:	4b29      	ldr	r3, [pc, #164]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80025ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	4619      	mov	r1, r3
 80025c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025c6:	f002 f811 	bl	80045ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80025ca:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80025ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025dc:	230a      	movs	r3, #10
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ea:	f001 ffff 	bl	80045ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025ee:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 80025f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f2:	4a15      	ldr	r2, [pc, #84]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 80025f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025fa:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d114      	bne.n	800263c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002616:	4a0c      	ldr	r2, [pc, #48]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261c:	6593      	str	r3, [r2, #88]	@ 0x58
 800261e:	4b0a      	ldr	r3, [pc, #40]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800262a:	f003 fa79 	bl	8005b20 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800262e:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	4a05      	ldr	r2, [pc, #20]	@ (8002648 <HAL_PCD_MspInit+0xd4>)
 8002634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002638:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800263a:	e001      	b.n	8002640 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800263c:	f003 fa70 	bl	8005b20 <HAL_PWREx_EnableVddUSB>
}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	@ 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000

0800264c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <NMI_Handler+0x4>

08002654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <HardFault_Handler+0x4>

0800265c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <MemManage_Handler+0x4>

08002664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <UsageFault_Handler+0x4>

08002674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a2:	f000 f981 	bl	80029a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}

080026aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80026ae:	2020      	movs	r0, #32
 80026b0:	f002 f95e 	bl	8004970 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80026b4:	2040      	movs	r0, #64	@ 0x40
 80026b6:	f002 f95b 	bl	8004970 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80026ba:	2080      	movs	r0, #128	@ 0x80
 80026bc:	f002 f958 	bl	8004970 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80026c0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80026c4:	f002 f954 	bl	8004970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80026d0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80026d4:	f002 f94c 	bl	8004970 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80026d8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80026dc:	f002 f948 	bl	8004970 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80026e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026e4:	f002 f944 	bl	8004970 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80026e8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80026ec:	f002 f940 	bl	8004970 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80026f0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80026f4:	f002 f93c 	bl	8004970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return 1;
 8002700:	2301      	movs	r3, #1
}
 8002702:	4618      	mov	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_kill>:

int _kill(int pid, int sig)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002716:	f006 feab 	bl	8009470 <__errno>
 800271a:	4603      	mov	r3, r0
 800271c:	2216      	movs	r2, #22
 800271e:	601a      	str	r2, [r3, #0]
  return -1;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <_exit>:

void _exit (int status)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002734:	f04f 31ff 	mov.w	r1, #4294967295
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ffe7 	bl	800270c <_kill>
  while (1) {}    /* Make sure we hang here */
 800273e:	bf00      	nop
 8002740:	e7fd      	b.n	800273e <_exit+0x12>

08002742 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e00a      	b.n	800276a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002754:	f3af 8000 	nop.w
 8002758:	4601      	mov	r1, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	60ba      	str	r2, [r7, #8]
 8002760:	b2ca      	uxtb	r2, r1
 8002762:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3301      	adds	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	dbf0      	blt.n	8002754 <_read+0x12>
  }

  return len;
 8002772:	687b      	ldr	r3, [r7, #4]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e009      	b.n	80027a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	60ba      	str	r2, [r7, #8]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3301      	adds	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	dbf1      	blt.n	800278e <_write+0x12>
  }
  return len;
 80027aa:	687b      	ldr	r3, [r7, #4]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_close>:

int _close(int file)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027dc:	605a      	str	r2, [r3, #4]
  return 0;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <_isatty>:

int _isatty(int file)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027f4:	2301      	movs	r3, #1
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002824:	4a14      	ldr	r2, [pc, #80]	@ (8002878 <_sbrk+0x5c>)
 8002826:	4b15      	ldr	r3, [pc, #84]	@ (800287c <_sbrk+0x60>)
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002830:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <_sbrk+0x64>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <_sbrk+0x64>)
 800283a:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <_sbrk+0x68>)
 800283c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283e:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	429a      	cmp	r2, r3
 800284a:	d207      	bcs.n	800285c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800284c:	f006 fe10 	bl	8009470 <__errno>
 8002850:	4603      	mov	r3, r0
 8002852:	220c      	movs	r2, #12
 8002854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e009      	b.n	8002870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800285c:	4b08      	ldr	r3, [pc, #32]	@ (8002880 <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002862:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	4a05      	ldr	r2, [pc, #20]	@ (8002880 <_sbrk+0x64>)
 800286c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20018000 	.word	0x20018000
 800287c:	00000400 	.word	0x00000400
 8002880:	20000a4c 	.word	0x20000a4c
 8002884:	20000bc8 	.word	0x20000bc8

08002888 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800288c:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <SystemInit+0x20>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002892:	4a05      	ldr	r2, [pc, #20]	@ (80028a8 <SystemInit+0x20>)
 8002894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028b0:	f7ff ffea 	bl	8002888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b4:	480c      	ldr	r0, [pc, #48]	@ (80028e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80028b6:	490d      	ldr	r1, [pc, #52]	@ (80028ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80028b8:	4a0d      	ldr	r2, [pc, #52]	@ (80028f0 <LoopForever+0xe>)
  movs r3, #0
 80028ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028bc:	e002      	b.n	80028c4 <LoopCopyDataInit>

080028be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c2:	3304      	adds	r3, #4

080028c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c8:	d3f9      	bcc.n	80028be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028cc:	4c0a      	ldr	r4, [pc, #40]	@ (80028f8 <LoopForever+0x16>)
  movs r3, #0
 80028ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d0:	e001      	b.n	80028d6 <LoopFillZerobss>

080028d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d4:	3204      	adds	r2, #4

080028d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d8:	d3fb      	bcc.n	80028d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028da:	f006 fdcf 	bl	800947c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028de:	f7fe fbf1 	bl	80010c4 <main>

080028e2 <LoopForever>:

LoopForever:
    b LoopForever
 80028e2:	e7fe      	b.n	80028e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80028f0:	0800d688 	.word	0x0800d688
  ldr r2, =_sbss
 80028f4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80028f8:	20000bc4 	.word	0x20000bc4

080028fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028fc:	e7fe      	b.n	80028fc <ADC1_2_IRQHandler>

080028fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002908:	2003      	movs	r0, #3
 800290a:	f001 fd21 	bl	8004350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800290e:	2000      	movs	r0, #0
 8002910:	f000 f80e 	bl	8002930 <HAL_InitTick>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	71fb      	strb	r3, [r7, #7]
 800291e:	e001      	b.n	8002924 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002920:	f7ff fb4a 	bl	8001fb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002924:	79fb      	ldrb	r3, [r7, #7]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800293c:	4b17      	ldr	r3, [pc, #92]	@ (800299c <HAL_InitTick+0x6c>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002944:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <HAL_InitTick+0x70>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b14      	ldr	r3, [pc, #80]	@ (800299c <HAL_InitTick+0x6c>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002952:	fbb3 f3f1 	udiv	r3, r3, r1
 8002956:	fbb2 f3f3 	udiv	r3, r2, r3
 800295a:	4618      	mov	r0, r3
 800295c:	f001 fd2d 	bl	80043ba <HAL_SYSTICK_Config>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0f      	cmp	r3, #15
 800296a:	d809      	bhi.n	8002980 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800296c:	2200      	movs	r2, #0
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f001 fcf7 	bl	8004366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002978:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <HAL_InitTick+0x74>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e007      	b.n	8002990 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	e004      	b.n	8002990 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
 800298a:	e001      	b.n	8002990 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000008 	.word	0x20000008
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_IncTick+0x20>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_IncTick+0x24>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <HAL_IncTick+0x24>)
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000008 	.word	0x20000008
 80029cc:	20000a50 	.word	0x20000a50

080029d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return uwTick;
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <HAL_GetTick+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000a50 	.word	0x20000a50

080029e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff ffee 	bl	80029d0 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d005      	beq.n	8002a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a02:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <HAL_Delay+0x44>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a0e:	bf00      	nop
 8002a10:	f7ff ffde 	bl	80029d0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d8f7      	bhi.n	8002a10 <HAL_Delay+0x28>
  {
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000008 	.word	0x20000008

08002a30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	609a      	str	r2, [r3, #8]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3360      	adds	r3, #96	@ 0x60
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <LL_ADC_SetOffset+0x44>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	03fff000 	.word	0x03fff000

08002ae0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3360      	adds	r3, #96	@ 0x60
 8002aee:	461a      	mov	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3360      	adds	r3, #96	@ 0x60
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3330      	adds	r3, #48	@ 0x30
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	4413      	add	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	211f      	movs	r1, #31
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0e9b      	lsrs	r3, r3, #26
 8002ba0:	f003 011f 	and.w	r1, r3, #31
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bb4:	bf00      	nop
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3314      	adds	r3, #20
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	0e5b      	lsrs	r3, r3, #25
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	4413      	add	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	0d1b      	lsrs	r3, r3, #20
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2107      	movs	r1, #7
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	0d1b      	lsrs	r3, r3, #20
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	431a      	orrs	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c30:	43db      	mvns	r3, r3
 8002c32:	401a      	ands	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0318 	and.w	r3, r3, #24
 8002c3a:	4908      	ldr	r1, [pc, #32]	@ (8002c5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c3c:	40d9      	lsrs	r1, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	400b      	ands	r3, r1
 8002c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	0007ffff 	.word	0x0007ffff

08002c60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ca8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6093      	str	r3, [r2, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cd0:	d101      	bne.n	8002cd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002cf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cf8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d20:	d101      	bne.n	8002d26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d70:	f043 0202 	orr.w	r2, r3, #2
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_IsEnabled+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_IsEnabled+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d101      	bne.n	8002dc2 <LL_ADC_IsDisableOngoing+0x18>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_ADC_IsDisableOngoing+0x1a>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002de0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002de4:	f043 0204 	orr.w	r2, r3, #4
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e0c:	f043 0210 	orr.w	r2, r3, #16
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d101      	bne.n	8002e38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d101      	bne.n	8002e86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b089      	sub	sp, #36	@ 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e130      	b.n	8003110 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff f89f 	bl	8002000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fef1 	bl	8002cbc <LL_ADC_IsDeepPowerDownEnabled>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fed7 	bl	8002c98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ff0c 	bl	8002d0c <LL_ADC_IsInternalRegulatorEnabled>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d115      	bne.n	8002f26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fef0 	bl	8002ce4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f04:	4b84      	ldr	r3, [pc, #528]	@ (8003118 <HAL_ADC_Init+0x284>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	4a84      	ldr	r2, [pc, #528]	@ (800311c <HAL_ADC_Init+0x288>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	3301      	adds	r3, #1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f18:	e002      	b.n	8002f20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f9      	bne.n	8002f1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff feee 	bl	8002d0c <LL_ADC_IsInternalRegulatorEnabled>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10d      	bne.n	8002f52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3a:	f043 0210 	orr.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f46:	f043 0201 	orr.w	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ff62 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 8002f5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 80c9 	bne.w	80030fe <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 80c5 	bne.w	80030fe <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f7c:	f043 0202 	orr.w	r2, r3, #2
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fefb 	bl	8002d84 <LL_ADC_IsEnabled>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d115      	bne.n	8002fc0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f94:	4862      	ldr	r0, [pc, #392]	@ (8003120 <HAL_ADC_Init+0x28c>)
 8002f96:	f7ff fef5 	bl	8002d84 <LL_ADC_IsEnabled>
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	4861      	ldr	r0, [pc, #388]	@ (8003124 <HAL_ADC_Init+0x290>)
 8002f9e:	f7ff fef1 	bl	8002d84 <LL_ADC_IsEnabled>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	431c      	orrs	r4, r3
 8002fa6:	4860      	ldr	r0, [pc, #384]	@ (8003128 <HAL_ADC_Init+0x294>)
 8002fa8:	f7ff feec 	bl	8002d84 <LL_ADC_IsEnabled>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4323      	orrs	r3, r4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	485c      	ldr	r0, [pc, #368]	@ (800312c <HAL_ADC_Init+0x298>)
 8002fbc:	f7ff fd38 	bl	8002a30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7e5b      	ldrb	r3, [r3, #25]
 8002fc4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fd0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fd6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fde:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d106      	bne.n	8002ffc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	045b      	lsls	r3, r3, #17
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	4b44      	ldr	r3, [pc, #272]	@ (8003130 <HAL_ADC_Init+0x29c>)
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	430b      	orrs	r3, r1
 800302a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff1c 	bl	8002e6e <LL_ADC_INJ_IsConversionOngoing>
 8003036:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d13d      	bne.n	80030ba <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d13a      	bne.n	80030ba <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003048:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003050:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003060:	f023 0302 	bic.w	r3, r3, #2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	69b9      	ldr	r1, [r7, #24]
 800306a:	430b      	orrs	r3, r1
 800306c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003074:	2b01      	cmp	r3, #1
 8003076:	d118      	bne.n	80030aa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003082:	f023 0304 	bic.w	r3, r3, #4
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800308e:	4311      	orrs	r1, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003094:	4311      	orrs	r1, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800309a:	430a      	orrs	r2, r1
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	611a      	str	r2, [r3, #16]
 80030a8:	e007      	b.n	80030ba <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d10c      	bne.n	80030dc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	f023 010f 	bic.w	r1, r3, #15
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	1e5a      	subs	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80030da:	e007      	b.n	80030ec <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 020f 	bic.w	r2, r2, #15
 80030ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f0:	f023 0303 	bic.w	r3, r3, #3
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80030fc:	e007      	b.n	800310e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003102:	f043 0210 	orr.w	r2, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800310e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3724      	adds	r7, #36	@ 0x24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd90      	pop	{r4, r7, pc}
 8003118:	20000000 	.word	0x20000000
 800311c:	053e2d63 	.word	0x053e2d63
 8003120:	50040000 	.word	0x50040000
 8003124:	50040100 	.word	0x50040100
 8003128:	50040200 	.word	0x50040200
 800312c:	50040300 	.word	0x50040300
 8003130:	fff0c007 	.word	0xfff0c007

08003134 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800313c:	4857      	ldr	r0, [pc, #348]	@ (800329c <HAL_ADC_Start+0x168>)
 800313e:	f7ff fd8f 	bl	8002c60 <LL_ADC_GetMultimode>
 8003142:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fe69 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 809c 	bne.w	800328e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_ADC_Start+0x30>
 8003160:	2302      	movs	r3, #2
 8003162:	e097      	b.n	8003294 <HAL_ADC_Start+0x160>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fe63 	bl	8003e38 <ADC_Enable>
 8003172:	4603      	mov	r3, r0
 8003174:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f040 8083 	bne.w	8003284 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a42      	ldr	r2, [pc, #264]	@ (80032a0 <HAL_ADC_Start+0x16c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d002      	beq.n	80031a2 <HAL_ADC_Start+0x6e>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	e000      	b.n	80031a4 <HAL_ADC_Start+0x70>
 80031a2:	4b40      	ldr	r3, [pc, #256]	@ (80032a4 <HAL_ADC_Start+0x170>)
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d002      	beq.n	80031b2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d105      	bne.n	80031be <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ca:	d106      	bne.n	80031da <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d0:	f023 0206 	bic.w	r2, r3, #6
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80031d8:	e002      	b.n	80031e0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	221c      	movs	r2, #28
 80031e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2a      	ldr	r2, [pc, #168]	@ (80032a0 <HAL_ADC_Start+0x16c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d002      	beq.n	8003200 <HAL_ADC_Start+0xcc>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	e000      	b.n	8003202 <HAL_ADC_Start+0xce>
 8003200:	4b28      	ldr	r3, [pc, #160]	@ (80032a4 <HAL_ADC_Start+0x170>)
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	4293      	cmp	r3, r2
 8003208:	d008      	beq.n	800321c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b05      	cmp	r3, #5
 8003214:	d002      	beq.n	800321c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b09      	cmp	r3, #9
 800321a:	d114      	bne.n	8003246 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003232:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fdc6 	bl	8002dd0 <LL_ADC_REG_StartConversion>
 8003244:	e025      	b.n	8003292 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a12      	ldr	r2, [pc, #72]	@ (80032a0 <HAL_ADC_Start+0x16c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d002      	beq.n	8003262 <HAL_ADC_Start+0x12e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	e000      	b.n	8003264 <HAL_ADC_Start+0x130>
 8003262:	4b10      	ldr	r3, [pc, #64]	@ (80032a4 <HAL_ADC_Start+0x170>)
 8003264:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00f      	beq.n	8003292 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003276:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800327a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	@ 0x54
 8003282:	e006      	b.n	8003292 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800328c:	e001      	b.n	8003292 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003292:	7dfb      	ldrb	r3, [r7, #23]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	50040300 	.word	0x50040300
 80032a0:	50040100 	.word	0x50040100
 80032a4:	50040000 	.word	0x50040000

080032a8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_ADC_Stop+0x16>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e023      	b.n	8003306 <HAL_ADC_Stop+0x5e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80032c6:	2103      	movs	r1, #3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 fcf9 	bl	8003cc0 <ADC_ConversionStop>
 80032ce:	4603      	mov	r3, r0
 80032d0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fe33 	bl	8003f44 <ADC_Disable>
 80032de:	4603      	mov	r3, r0
 80032e0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800331a:	4866      	ldr	r0, [pc, #408]	@ (80034b4 <HAL_ADC_PollForConversion+0x1a4>)
 800331c:	f7ff fca0 	bl	8002c60 <LL_ADC_GetMultimode>
 8003320:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b08      	cmp	r3, #8
 8003328:	d102      	bne.n	8003330 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800332a:	2308      	movs	r3, #8
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e02a      	b.n	8003386 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b05      	cmp	r3, #5
 800333a:	d002      	beq.n	8003342 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b09      	cmp	r3, #9
 8003340:	d111      	bne.n	8003366 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0a4      	b.n	80034aa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003360:	2304      	movs	r3, #4
 8003362:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003364:	e00f      	b.n	8003386 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003366:	4853      	ldr	r0, [pc, #332]	@ (80034b4 <HAL_ADC_PollForConversion+0x1a4>)
 8003368:	f7ff fc88 	bl	8002c7c <LL_ADC_GetMultiDMATransfer>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e093      	b.n	80034aa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003382:	2304      	movs	r3, #4
 8003384:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003386:	f7ff fb23 	bl	80029d0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800338c:	e021      	b.n	80033d2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d01d      	beq.n	80033d2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003396:	f7ff fb1b 	bl	80029d0 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d302      	bcc.n	80033ac <HAL_ADC_PollForConversion+0x9c>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d112      	bne.n	80033d2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033be:	f043 0204 	orr.w	r2, r3, #4
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e06b      	b.n	80034aa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0d6      	beq.n	800338e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fba6 	bl	8002b42 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01c      	beq.n	8003436 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7e5b      	ldrb	r3, [r3, #25]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d118      	bne.n	8003436 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b08      	cmp	r3, #8
 8003410:	d111      	bne.n	8003436 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d105      	bne.n	8003436 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <HAL_ADC_PollForConversion+0x1a8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d002      	beq.n	8003446 <HAL_ADC_PollForConversion+0x136>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	e000      	b.n	8003448 <HAL_ADC_PollForConversion+0x138>
 8003446:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <HAL_ADC_PollForConversion+0x1ac>)
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	4293      	cmp	r3, r2
 800344e:	d008      	beq.n	8003462 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d002      	beq.n	8003462 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b09      	cmp	r3, #9
 8003460:	d104      	bne.n	800346c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	e00c      	b.n	8003486 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a11      	ldr	r2, [pc, #68]	@ (80034b8 <HAL_ADC_PollForConversion+0x1a8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d002      	beq.n	800347c <HAL_ADC_PollForConversion+0x16c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	e000      	b.n	800347e <HAL_ADC_PollForConversion+0x16e>
 800347c:	4b0f      	ldr	r3, [pc, #60]	@ (80034bc <HAL_ADC_PollForConversion+0x1ac>)
 800347e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d104      	bne.n	8003496 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2208      	movs	r2, #8
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e008      	b.n	80034a8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	220c      	movs	r2, #12
 80034a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	50040300 	.word	0x50040300
 80034b8:	50040100 	.word	0x50040100
 80034bc:	50040000 	.word	0x50040000

080034c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b0b6      	sub	sp, #216	@ 0xd8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x22>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e3c9      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x7b6>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fc88 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 83aa 	bne.w	8003c6c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b05      	cmp	r3, #5
 8003526:	d824      	bhi.n	8003572 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	3b02      	subs	r3, #2
 800352e:	2b03      	cmp	r3, #3
 8003530:	d81b      	bhi.n	800356a <HAL_ADC_ConfigChannel+0x8e>
 8003532:	a201      	add	r2, pc, #4	@ (adr r2, 8003538 <HAL_ADC_ConfigChannel+0x5c>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	08003549 	.word	0x08003549
 800353c:	08003551 	.word	0x08003551
 8003540:	08003559 	.word	0x08003559
 8003544:	08003561 	.word	0x08003561
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003548:	230c      	movs	r3, #12
 800354a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800354e:	e010      	b.n	8003572 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003550:	2312      	movs	r3, #18
 8003552:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003556:	e00c      	b.n	8003572 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003558:	2318      	movs	r3, #24
 800355a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800355e:	e008      	b.n	8003572 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003568:	e003      	b.n	8003572 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800356a:	2306      	movs	r3, #6
 800356c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003570:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003580:	f7ff faf2 	bl	8002b68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fc49 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 800358e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fc69 	bl	8002e6e <LL_ADC_INJ_IsConversionOngoing>
 800359c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f040 81a4 	bne.w	80038f2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 819f 	bne.w	80038f2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	461a      	mov	r2, r3
 80035c2:	f7ff fafd 	bl	8002bc0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d00a      	beq.n	80035fe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6919      	ldr	r1, [r3, #16]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035f8:	f7ff fa4e 	bl	8002a98 <LL_ADC_SetOffset>
 80035fc:	e179      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fa6b 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 800360a:	4603      	mov	r3, r0
 800360c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10a      	bne.n	800362a <HAL_ADC_ConfigChannel+0x14e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fa60 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 8003620:	4603      	mov	r3, r0
 8003622:	0e9b      	lsrs	r3, r3, #26
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	e01e      	b.n	8003668 <HAL_ADC_ConfigChannel+0x18c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fa55 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 8003636:	4603      	mov	r3, r0
 8003638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800364c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003650:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003658:	2320      	movs	r3, #32
 800365a:	e004      	b.n	8003666 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800365c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003670:	2b00      	cmp	r3, #0
 8003672:	d105      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x1a4>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0e9b      	lsrs	r3, r3, #26
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	e018      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x1d6>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800369c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80036a4:	2320      	movs	r3, #32
 80036a6:	e004      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80036a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d106      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2200      	movs	r2, #0
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fa24 	bl	8002b0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2101      	movs	r1, #1
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff fa08 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x214>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2101      	movs	r1, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff f9fd 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 80036e6:	4603      	mov	r3, r0
 80036e8:	0e9b      	lsrs	r3, r3, #26
 80036ea:	f003 021f 	and.w	r2, r3, #31
 80036ee:	e01e      	b.n	800372e <HAL_ADC_ConfigChannel+0x252>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2101      	movs	r1, #1
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f9f2 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800370e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800371e:	2320      	movs	r3, #32
 8003720:	e004      	b.n	800372c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003722:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003736:	2b00      	cmp	r3, #0
 8003738:	d105      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x26a>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	0e9b      	lsrs	r3, r3, #26
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	e018      	b.n	8003778 <HAL_ADC_ConfigChannel+0x29c>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800375a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800375e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003762:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800376a:	2320      	movs	r3, #32
 800376c:	e004      	b.n	8003778 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800376e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003778:	429a      	cmp	r2, r3
 800377a:	d106      	bne.n	800378a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2200      	movs	r2, #0
 8003782:	2101      	movs	r1, #1
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff f9c1 	bl	8002b0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2102      	movs	r1, #2
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff f9a5 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 8003796:	4603      	mov	r3, r0
 8003798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x2da>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2102      	movs	r1, #2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff f99a 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 80037ac:	4603      	mov	r3, r0
 80037ae:	0e9b      	lsrs	r3, r3, #26
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	e01e      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x318>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2102      	movs	r1, #2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff f98f 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80037d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80037dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80037e4:	2320      	movs	r3, #32
 80037e6:	e004      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80037e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d105      	bne.n	800380c <HAL_ADC_ConfigChannel+0x330>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	0e9b      	lsrs	r3, r3, #26
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	e014      	b.n	8003836 <HAL_ADC_ConfigChannel+0x35a>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800381a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800381c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003820:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003828:	2320      	movs	r3, #32
 800382a:	e004      	b.n	8003836 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800382c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003830:	fab3 f383 	clz	r3, r3
 8003834:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003836:	429a      	cmp	r2, r3
 8003838:	d106      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2200      	movs	r2, #0
 8003840:	2102      	movs	r1, #2
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff f962 	bl	8002b0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2103      	movs	r1, #3
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff f946 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 8003854:	4603      	mov	r3, r0
 8003856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x398>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2103      	movs	r1, #3
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff f93b 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 800386a:	4603      	mov	r3, r0
 800386c:	0e9b      	lsrs	r3, r3, #26
 800386e:	f003 021f 	and.w	r2, r3, #31
 8003872:	e017      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x3c8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2103      	movs	r1, #3
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff f930 	bl	8002ae0 <LL_ADC_GetOffsetChannel>
 8003880:	4603      	mov	r3, r0
 8003882:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800388c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800388e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003890:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003896:	2320      	movs	r3, #32
 8003898:	e003      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800389a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x3e0>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	e011      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x404>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80038ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80038ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80038d4:	2320      	movs	r3, #32
 80038d6:	e003      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80038d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d106      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2103      	movs	r1, #3
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff f90d 	bl	8002b0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fa44 	bl	8002d84 <LL_ADC_IsEnabled>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 8140 	bne.w	8003b84 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	461a      	mov	r2, r3
 8003912:	f7ff f981 	bl	8002c18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	4a8f      	ldr	r2, [pc, #572]	@ (8003b58 <HAL_ADC_ConfigChannel+0x67c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	f040 8131 	bne.w	8003b84 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10b      	bne.n	800394a <HAL_ADC_ConfigChannel+0x46e>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	0e9b      	lsrs	r3, r3, #26
 8003938:	3301      	adds	r3, #1
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	2b09      	cmp	r3, #9
 8003940:	bf94      	ite	ls
 8003942:	2301      	movls	r3, #1
 8003944:	2300      	movhi	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	e019      	b.n	800397e <HAL_ADC_ConfigChannel+0x4a2>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800395c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003962:	2320      	movs	r3, #32
 8003964:	e003      	b.n	800396e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	2b09      	cmp	r3, #9
 8003976:	bf94      	ite	ls
 8003978:	2301      	movls	r3, #1
 800397a:	2300      	movhi	r3, #0
 800397c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800397e:	2b00      	cmp	r3, #0
 8003980:	d079      	beq.n	8003a76 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <HAL_ADC_ConfigChannel+0x4c2>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	0e9b      	lsrs	r3, r3, #26
 8003994:	3301      	adds	r3, #1
 8003996:	069b      	lsls	r3, r3, #26
 8003998:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800399c:	e015      	b.n	80039ca <HAL_ADC_ConfigChannel+0x4ee>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80039ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80039b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80039b6:	2320      	movs	r3, #32
 80039b8:	e003      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80039ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	069b      	lsls	r3, r3, #26
 80039c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x50e>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0e9b      	lsrs	r3, r3, #26
 80039dc:	3301      	adds	r3, #1
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2101      	movs	r1, #1
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	e017      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x53e>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80039f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039fa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80039fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003a02:	2320      	movs	r3, #32
 8003a04:	e003      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a08:	fab3 f383 	clz	r3, r3
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	ea42 0103 	orr.w	r1, r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x564>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	0e9b      	lsrs	r3, r3, #26
 8003a30:	3301      	adds	r3, #1
 8003a32:	f003 021f 	and.w	r2, r3, #31
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	051b      	lsls	r3, r3, #20
 8003a3e:	e018      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x596>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003a58:	2320      	movs	r3, #32
 8003a5a:	e003      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	3301      	adds	r3, #1
 8003a66:	f003 021f 	and.w	r2, r3, #31
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a72:	430b      	orrs	r3, r1
 8003a74:	e081      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d107      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x5b6>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	0e9b      	lsrs	r3, r3, #26
 8003a88:	3301      	adds	r3, #1
 8003a8a:	069b      	lsls	r3, r3, #26
 8003a8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a90:	e015      	b.n	8003abe <HAL_ADC_ConfigChannel+0x5e2>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003aaa:	2320      	movs	r3, #32
 8003aac:	e003      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab0:	fab3 f383 	clz	r3, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	069b      	lsls	r3, r3, #26
 8003aba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x602>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	0e9b      	lsrs	r3, r3, #26
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	e017      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x632>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	61bb      	str	r3, [r7, #24]
  return result;
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003af6:	2320      	movs	r3, #32
 8003af8:	e003      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	fab3 f383 	clz	r3, r3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	ea42 0103 	orr.w	r1, r2, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x65e>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	0e9b      	lsrs	r3, r3, #26
 8003b24:	3301      	adds	r3, #1
 8003b26:	f003 021f 	and.w	r2, r3, #31
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4413      	add	r3, r2
 8003b30:	3b1e      	subs	r3, #30
 8003b32:	051b      	lsls	r3, r3, #20
 8003b34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b38:	e01e      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x69c>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	60fb      	str	r3, [r7, #12]
  return result;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003b52:	2320      	movs	r3, #32
 8003b54:	e006      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x688>
 8003b56:	bf00      	nop
 8003b58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	3301      	adds	r3, #1
 8003b66:	f003 021f 	and.w	r2, r3, #31
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	4413      	add	r3, r2
 8003b70:	3b1e      	subs	r3, #30
 8003b72:	051b      	lsls	r3, r3, #20
 8003b74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b78:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f7ff f81e 	bl	8002bc0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b44      	ldr	r3, [pc, #272]	@ (8003c9c <HAL_ADC_ConfigChannel+0x7c0>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d07a      	beq.n	8003c86 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b90:	4843      	ldr	r0, [pc, #268]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003b92:	f7fe ff73 	bl	8002a7c <LL_ADC_GetCommonPathInternalCh>
 8003b96:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a41      	ldr	r2, [pc, #260]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d12c      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ba4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ba8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d126      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d004      	beq.n	8003bc4 <HAL_ADC_ConfigChannel+0x6e8>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a3b      	ldr	r2, [pc, #236]	@ (8003cac <HAL_ADC_ConfigChannel+0x7d0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d15d      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4834      	ldr	r0, [pc, #208]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003bd0:	f7fe ff41 	bl	8002a56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bd4:	4b36      	ldr	r3, [pc, #216]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	4a36      	ldr	r2, [pc, #216]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003bee:	e002      	b.n	8003bf6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f9      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bfc:	e040      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d118      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d112      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a23      	ldr	r2, [pc, #140]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_ADC_ConfigChannel+0x74c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a22      	ldr	r2, [pc, #136]	@ (8003cac <HAL_ADC_ConfigChannel+0x7d0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d12d      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c30:	4619      	mov	r1, r3
 8003c32:	481b      	ldr	r0, [pc, #108]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c34:	f7fe ff0f 	bl	8002a56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c38:	e024      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003cbc <HAL_ADC_ConfigChannel+0x7e0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d120      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d11a      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d115      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c62:	4619      	mov	r1, r3
 8003c64:	480e      	ldr	r0, [pc, #56]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c66:	f7fe fef6 	bl	8002a56 <LL_ADC_SetCommonPathInternalCh>
 8003c6a:	e00c      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c70:	f043 0220 	orr.w	r2, r3, #32
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003c7e:	e002      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c80:	bf00      	nop
 8003c82:	e000      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c8e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	37d8      	adds	r7, #216	@ 0xd8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	80080000 	.word	0x80080000
 8003ca0:	50040300 	.word	0x50040300
 8003ca4:	c7520000 	.word	0xc7520000
 8003ca8:	50040000 	.word	0x50040000
 8003cac:	50040200 	.word	0x50040200
 8003cb0:	20000000 	.word	0x20000000
 8003cb4:	053e2d63 	.word	0x053e2d63
 8003cb8:	cb840000 	.word	0xcb840000
 8003cbc:	80000001 	.word	0x80000001

08003cc0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff f8a2 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 8003cdc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f8c3 	bl	8002e6e <LL_ADC_INJ_IsConversionOngoing>
 8003ce8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8098 	beq.w	8003e28 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02a      	beq.n	8003d5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	7e5b      	ldrb	r3, [r3, #25]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d126      	bne.n	8003d5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	7e1b      	ldrb	r3, [r3, #24]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d122      	bne.n	8003d5c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003d16:	2301      	movs	r3, #1
 8003d18:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d1a:	e014      	b.n	8003d46 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4a45      	ldr	r2, [pc, #276]	@ (8003e34 <ADC_ConversionStop+0x174>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d90d      	bls.n	8003d40 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d28:	f043 0210 	orr.w	r2, r3, #16
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d34:	f043 0201 	orr.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e074      	b.n	8003e2a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	3301      	adds	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d50:	2b40      	cmp	r3, #64	@ 0x40
 8003d52:	d1e3      	bne.n	8003d1c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2240      	movs	r2, #64	@ 0x40
 8003d5a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d014      	beq.n	8003d8c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff f85a 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff f817 	bl	8002daa <LL_ADC_IsDisableOngoing>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d104      	bne.n	8003d8c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff f836 	bl	8002df8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d014      	beq.n	8003dbc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff f869 	bl	8002e6e <LL_ADC_INJ_IsConversionOngoing>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00c      	beq.n	8003dbc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe ffff 	bl	8002daa <LL_ADC_IsDisableOngoing>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d104      	bne.n	8003dbc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff f845 	bl	8002e46 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d005      	beq.n	8003dce <ADC_ConversionStop+0x10e>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d105      	bne.n	8003dd4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003dc8:	230c      	movs	r3, #12
 8003dca:	617b      	str	r3, [r7, #20]
        break;
 8003dcc:	e005      	b.n	8003dda <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003dce:	2308      	movs	r3, #8
 8003dd0:	617b      	str	r3, [r7, #20]
        break;
 8003dd2:	e002      	b.n	8003dda <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	617b      	str	r3, [r7, #20]
        break;
 8003dd8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003dda:	f7fe fdf9 	bl	80029d0 <HAL_GetTick>
 8003dde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003de0:	e01b      	b.n	8003e1a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003de2:	f7fe fdf5 	bl	80029d0 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	d914      	bls.n	8003e1a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e02:	f043 0210 	orr.w	r2, r3, #16
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0e:	f043 0201 	orr.w	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e007      	b.n	8003e2a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1dc      	bne.n	8003de2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	a33fffff 	.word	0xa33fffff

08003e38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe ff9b 	bl	8002d84 <LL_ADC_IsEnabled>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d169      	bne.n	8003f28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	4b36      	ldr	r3, [pc, #216]	@ (8003f34 <ADC_Enable+0xfc>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e055      	b.n	8003f2a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe ff56 	bl	8002d34 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e88:	482b      	ldr	r0, [pc, #172]	@ (8003f38 <ADC_Enable+0x100>)
 8003e8a:	f7fe fdf7 	bl	8002a7c <LL_ADC_GetCommonPathInternalCh>
 8003e8e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e98:	4b28      	ldr	r3, [pc, #160]	@ (8003f3c <ADC_Enable+0x104>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	4a28      	ldr	r2, [pc, #160]	@ (8003f40 <ADC_Enable+0x108>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	099b      	lsrs	r3, r3, #6
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003eb2:	e002      	b.n	8003eba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f9      	bne.n	8003eb4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ec0:	f7fe fd86 	bl	80029d0 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ec6:	e028      	b.n	8003f1a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe ff59 	bl	8002d84 <LL_ADC_IsEnabled>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fe ff29 	bl	8002d34 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ee2:	f7fe fd75 	bl	80029d0 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d914      	bls.n	8003f1a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d00d      	beq.n	8003f1a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f02:	f043 0210 	orr.w	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	f043 0201 	orr.w	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e007      	b.n	8003f2a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d1cf      	bne.n	8003ec8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	8000003f 	.word	0x8000003f
 8003f38:	50040300 	.word	0x50040300
 8003f3c:	20000000 	.word	0x20000000
 8003f40:	053e2d63 	.word	0x053e2d63

08003f44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe ff2a 	bl	8002daa <LL_ADC_IsDisableOngoing>
 8003f56:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe ff11 	bl	8002d84 <LL_ADC_IsEnabled>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d047      	beq.n	8003ff8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d144      	bne.n	8003ff8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 030d 	and.w	r3, r3, #13
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d10c      	bne.n	8003f96 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe feeb 	bl	8002d5c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f8e:	f7fe fd1f 	bl	80029d0 <HAL_GetTick>
 8003f92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f94:	e029      	b.n	8003fea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9a:	f043 0210 	orr.w	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa6:	f043 0201 	orr.w	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e023      	b.n	8003ffa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fb2:	f7fe fd0d 	bl	80029d0 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d914      	bls.n	8003fea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00d      	beq.n	8003fea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd2:	f043 0210 	orr.w	r2, r3, #16
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	f043 0201 	orr.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e007      	b.n	8003ffa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1dc      	bne.n	8003fb2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <LL_ADC_IsEnabled>:
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <LL_ADC_IsEnabled+0x18>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <LL_ADC_IsEnabled+0x1a>
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_ADC_REG_IsConversionOngoing>:
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b04      	cmp	r3, #4
 800403a:	d101      	bne.n	8004040 <LL_ADC_REG_IsConversionOngoing+0x18>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b09f      	sub	sp, #124	@ 0x7c
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800406a:	2302      	movs	r3, #2
 800406c:	e093      	b.n	8004196 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004076:	2300      	movs	r3, #0
 8004078:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800407a:	2300      	movs	r3, #0
 800407c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a47      	ldr	r2, [pc, #284]	@ (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d102      	bne.n	800408e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004088:	4b46      	ldr	r3, [pc, #280]	@ (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	e001      	b.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e072      	b.n	8004196 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff ffb8 	bl	8004028 <LL_ADC_REG_IsConversionOngoing>
 80040b8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff ffb2 	bl	8004028 <LL_ADC_REG_IsConversionOngoing>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d154      	bne.n	8004174 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80040ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d151      	bne.n	8004174 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040d0:	4b35      	ldr	r3, [pc, #212]	@ (80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80040d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d02c      	beq.n	8004136 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040ee:	035b      	lsls	r3, r3, #13
 80040f0:	430b      	orrs	r3, r1
 80040f2:	431a      	orrs	r2, r3
 80040f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040f8:	4829      	ldr	r0, [pc, #164]	@ (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80040fa:	f7ff ff82 	bl	8004002 <LL_ADC_IsEnabled>
 80040fe:	4604      	mov	r4, r0
 8004100:	4828      	ldr	r0, [pc, #160]	@ (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004102:	f7ff ff7e 	bl	8004002 <LL_ADC_IsEnabled>
 8004106:	4603      	mov	r3, r0
 8004108:	431c      	orrs	r4, r3
 800410a:	4828      	ldr	r0, [pc, #160]	@ (80041ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800410c:	f7ff ff79 	bl	8004002 <LL_ADC_IsEnabled>
 8004110:	4603      	mov	r3, r0
 8004112:	4323      	orrs	r3, r4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d137      	bne.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004120:	f023 030f 	bic.w	r3, r3, #15
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	6811      	ldr	r1, [r2, #0]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	6892      	ldr	r2, [r2, #8]
 800412c:	430a      	orrs	r2, r1
 800412e:	431a      	orrs	r2, r3
 8004130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004132:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004134:	e028      	b.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800413e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004140:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004142:	4817      	ldr	r0, [pc, #92]	@ (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004144:	f7ff ff5d 	bl	8004002 <LL_ADC_IsEnabled>
 8004148:	4604      	mov	r4, r0
 800414a:	4816      	ldr	r0, [pc, #88]	@ (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800414c:	f7ff ff59 	bl	8004002 <LL_ADC_IsEnabled>
 8004150:	4603      	mov	r3, r0
 8004152:	431c      	orrs	r4, r3
 8004154:	4815      	ldr	r0, [pc, #84]	@ (80041ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004156:	f7ff ff54 	bl	8004002 <LL_ADC_IsEnabled>
 800415a:	4603      	mov	r3, r0
 800415c:	4323      	orrs	r3, r4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d112      	bne.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800416a:	f023 030f 	bic.w	r3, r3, #15
 800416e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004170:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004172:	e009      	b.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004186:	e000      	b.n	800418a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004188:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004192:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004196:	4618      	mov	r0, r3
 8004198:	377c      	adds	r7, #124	@ 0x7c
 800419a:	46bd      	mov	sp, r7
 800419c:	bd90      	pop	{r4, r7, pc}
 800419e:	bf00      	nop
 80041a0:	50040000 	.word	0x50040000
 80041a4:	50040100 	.word	0x50040100
 80041a8:	50040300 	.word	0x50040300
 80041ac:	50040200 	.word	0x50040200

080041b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c0:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <__NVIC_SetPriorityGrouping+0x44>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041cc:	4013      	ands	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041e2:	4a04      	ldr	r2, [pc, #16]	@ (80041f4 <__NVIC_SetPriorityGrouping+0x44>)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	60d3      	str	r3, [r2, #12]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041fc:	4b04      	ldr	r3, [pc, #16]	@ (8004210 <__NVIC_GetPriorityGrouping+0x18>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	f003 0307 	and.w	r3, r3, #7
}
 8004206:	4618      	mov	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	db0b      	blt.n	800423e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	f003 021f 	and.w	r2, r3, #31
 800422c:	4907      	ldr	r1, [pc, #28]	@ (800424c <__NVIC_EnableIRQ+0x38>)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2001      	movs	r0, #1
 8004236:	fa00 f202 	lsl.w	r2, r0, r2
 800423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000e100 	.word	0xe000e100

08004250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	6039      	str	r1, [r7, #0]
 800425a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004260:	2b00      	cmp	r3, #0
 8004262:	db0a      	blt.n	800427a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	490c      	ldr	r1, [pc, #48]	@ (800429c <__NVIC_SetPriority+0x4c>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	0112      	lsls	r2, r2, #4
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	440b      	add	r3, r1
 8004274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004278:	e00a      	b.n	8004290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4908      	ldr	r1, [pc, #32]	@ (80042a0 <__NVIC_SetPriority+0x50>)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	3b04      	subs	r3, #4
 8004288:	0112      	lsls	r2, r2, #4
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	440b      	add	r3, r1
 800428e:	761a      	strb	r2, [r3, #24]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000e100 	.word	0xe000e100
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b089      	sub	sp, #36	@ 0x24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f1c3 0307 	rsb	r3, r3, #7
 80042be:	2b04      	cmp	r3, #4
 80042c0:	bf28      	it	cs
 80042c2:	2304      	movcs	r3, #4
 80042c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3304      	adds	r3, #4
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d902      	bls.n	80042d4 <NVIC_EncodePriority+0x30>
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	3b03      	subs	r3, #3
 80042d2:	e000      	b.n	80042d6 <NVIC_EncodePriority+0x32>
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	401a      	ands	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042ec:	f04f 31ff 	mov.w	r1, #4294967295
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	43d9      	mvns	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042fc:	4313      	orrs	r3, r2
         );
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3724      	adds	r7, #36	@ 0x24
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3b01      	subs	r3, #1
 8004318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800431c:	d301      	bcc.n	8004322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800431e:	2301      	movs	r3, #1
 8004320:	e00f      	b.n	8004342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004322:	4a0a      	ldr	r2, [pc, #40]	@ (800434c <SysTick_Config+0x40>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800432a:	210f      	movs	r1, #15
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	f7ff ff8e 	bl	8004250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004334:	4b05      	ldr	r3, [pc, #20]	@ (800434c <SysTick_Config+0x40>)
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800433a:	4b04      	ldr	r3, [pc, #16]	@ (800434c <SysTick_Config+0x40>)
 800433c:	2207      	movs	r2, #7
 800433e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	e000e010 	.word	0xe000e010

08004350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff29 	bl	80041b0 <__NVIC_SetPriorityGrouping>
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	4603      	mov	r3, r0
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004378:	f7ff ff3e 	bl	80041f8 <__NVIC_GetPriorityGrouping>
 800437c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	6978      	ldr	r0, [r7, #20]
 8004384:	f7ff ff8e 	bl	80042a4 <NVIC_EncodePriority>
 8004388:	4602      	mov	r2, r0
 800438a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff5d 	bl	8004250 <__NVIC_SetPriority>
}
 8004396:	bf00      	nop
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	4603      	mov	r3, r0
 80043a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ff31 	bl	8004214 <__NVIC_EnableIRQ>
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff ffa2 	bl	800430c <SysTick_Config>
 80043c8:	4603      	mov	r3, r0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0ac      	b.n	8004540 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f8b2 	bl	8004554 <DFSDM_GetChannelFromInstance>
 80043f0:	4603      	mov	r3, r0
 80043f2:	4a55      	ldr	r2, [pc, #340]	@ (8004548 <HAL_DFSDM_ChannelInit+0x174>)
 80043f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e09f      	b.n	8004540 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fd fe97 	bl	8002134 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004406:	4b51      	ldr	r3, [pc, #324]	@ (800454c <HAL_DFSDM_ChannelInit+0x178>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	4a4f      	ldr	r2, [pc, #316]	@ (800454c <HAL_DFSDM_ChannelInit+0x178>)
 800440e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004410:	4b4e      	ldr	r3, [pc, #312]	@ (800454c <HAL_DFSDM_ChannelInit+0x178>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d125      	bne.n	8004464 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004418:	4b4d      	ldr	r3, [pc, #308]	@ (8004550 <HAL_DFSDM_ChannelInit+0x17c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a4c      	ldr	r2, [pc, #304]	@ (8004550 <HAL_DFSDM_ChannelInit+0x17c>)
 800441e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004422:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004424:	4b4a      	ldr	r3, [pc, #296]	@ (8004550 <HAL_DFSDM_ChannelInit+0x17c>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	4948      	ldr	r1, [pc, #288]	@ (8004550 <HAL_DFSDM_ChannelInit+0x17c>)
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004432:	4b47      	ldr	r3, [pc, #284]	@ (8004550 <HAL_DFSDM_ChannelInit+0x17c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a46      	ldr	r2, [pc, #280]	@ (8004550 <HAL_DFSDM_ChannelInit+0x17c>)
 8004438:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800443c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	791b      	ldrb	r3, [r3, #4]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d108      	bne.n	8004458 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004446:	4b42      	ldr	r3, [pc, #264]	@ (8004550 <HAL_DFSDM_ChannelInit+0x17c>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	3b01      	subs	r3, #1
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	493f      	ldr	r1, [pc, #252]	@ (8004550 <HAL_DFSDM_ChannelInit+0x17c>)
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004458:	4b3d      	ldr	r3, [pc, #244]	@ (8004550 <HAL_DFSDM_ChannelInit+0x17c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a3c      	ldr	r2, [pc, #240]	@ (8004550 <HAL_DFSDM_ChannelInit+0x17c>)
 800445e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004462:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8004472:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004482:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004488:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 020f 	bic.w	r2, r2, #15
 80044a0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6819      	ldr	r1, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80044c8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6899      	ldr	r1, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f002 0207 	and.w	r2, r2, #7
 80044f4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6859      	ldr	r1, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004520:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f810 	bl	8004554 <DFSDM_GetChannelFromInstance>
 8004534:	4602      	mov	r2, r0
 8004536:	4904      	ldr	r1, [pc, #16]	@ (8004548 <HAL_DFSDM_ChannelInit+0x174>)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000a58 	.word	0x20000a58
 800454c:	20000a54 	.word	0x20000a54
 8004550:	40016000 	.word	0x40016000

08004554 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <DFSDM_GetChannelFromInstance+0x7c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d102      	bne.n	800456a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e02b      	b.n	80045c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a19      	ldr	r2, [pc, #100]	@ (80045d4 <DFSDM_GetChannelFromInstance+0x80>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d102      	bne.n	8004578 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004572:	2301      	movs	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	e024      	b.n	80045c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a17      	ldr	r2, [pc, #92]	@ (80045d8 <DFSDM_GetChannelFromInstance+0x84>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d102      	bne.n	8004586 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004580:	2302      	movs	r3, #2
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e01d      	b.n	80045c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a14      	ldr	r2, [pc, #80]	@ (80045dc <DFSDM_GetChannelFromInstance+0x88>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d102      	bne.n	8004594 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800458e:	2304      	movs	r3, #4
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	e016      	b.n	80045c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a12      	ldr	r2, [pc, #72]	@ (80045e0 <DFSDM_GetChannelFromInstance+0x8c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d102      	bne.n	80045a2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800459c:	2305      	movs	r3, #5
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	e00f      	b.n	80045c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a0f      	ldr	r2, [pc, #60]	@ (80045e4 <DFSDM_GetChannelFromInstance+0x90>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d102      	bne.n	80045b0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80045aa:	2306      	movs	r3, #6
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	e008      	b.n	80045c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a0d      	ldr	r2, [pc, #52]	@ (80045e8 <DFSDM_GetChannelFromInstance+0x94>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d102      	bne.n	80045be <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80045b8:	2307      	movs	r3, #7
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e001      	b.n	80045c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80045be:	2303      	movs	r3, #3
 80045c0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40016000 	.word	0x40016000
 80045d4:	40016020 	.word	0x40016020
 80045d8:	40016040 	.word	0x40016040
 80045dc:	40016080 	.word	0x40016080
 80045e0:	400160a0 	.word	0x400160a0
 80045e4:	400160c0 	.word	0x400160c0
 80045e8:	400160e0 	.word	0x400160e0

080045ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045fa:	e17f      	b.n	80048fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	2101      	movs	r1, #1
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	4013      	ands	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8171 	beq.w	80048f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d005      	beq.n	800462c <HAL_GPIO_Init+0x40>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d130      	bne.n	800468e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	2203      	movs	r2, #3
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4013      	ands	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004662:	2201      	movs	r2, #1
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0201 	and.w	r2, r3, #1
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b03      	cmp	r3, #3
 8004698:	d118      	bne.n	80046cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80046a0:	2201      	movs	r2, #1
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	08db      	lsrs	r3, r3, #3
 80046b6:	f003 0201 	and.w	r2, r3, #1
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d017      	beq.n	8004708 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	2203      	movs	r2, #3
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d123      	bne.n	800475c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	08da      	lsrs	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3208      	adds	r2, #8
 800471c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004720:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	220f      	movs	r2, #15
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4013      	ands	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	08da      	lsrs	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3208      	adds	r2, #8
 8004756:	6939      	ldr	r1, [r7, #16]
 8004758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	2203      	movs	r2, #3
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0203 	and.w	r2, r3, #3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80ac 	beq.w	80048f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479e:	4b5f      	ldr	r3, [pc, #380]	@ (800491c <HAL_GPIO_Init+0x330>)
 80047a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a2:	4a5e      	ldr	r2, [pc, #376]	@ (800491c <HAL_GPIO_Init+0x330>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80047aa:	4b5c      	ldr	r3, [pc, #368]	@ (800491c <HAL_GPIO_Init+0x330>)
 80047ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80047b6:	4a5a      	ldr	r2, [pc, #360]	@ (8004920 <HAL_GPIO_Init+0x334>)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	3302      	adds	r3, #2
 80047be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	220f      	movs	r2, #15
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80047e0:	d025      	beq.n	800482e <HAL_GPIO_Init+0x242>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a4f      	ldr	r2, [pc, #316]	@ (8004924 <HAL_GPIO_Init+0x338>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01f      	beq.n	800482a <HAL_GPIO_Init+0x23e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a4e      	ldr	r2, [pc, #312]	@ (8004928 <HAL_GPIO_Init+0x33c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d019      	beq.n	8004826 <HAL_GPIO_Init+0x23a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a4d      	ldr	r2, [pc, #308]	@ (800492c <HAL_GPIO_Init+0x340>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <HAL_GPIO_Init+0x236>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a4c      	ldr	r2, [pc, #304]	@ (8004930 <HAL_GPIO_Init+0x344>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00d      	beq.n	800481e <HAL_GPIO_Init+0x232>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a4b      	ldr	r2, [pc, #300]	@ (8004934 <HAL_GPIO_Init+0x348>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d007      	beq.n	800481a <HAL_GPIO_Init+0x22e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a4a      	ldr	r2, [pc, #296]	@ (8004938 <HAL_GPIO_Init+0x34c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <HAL_GPIO_Init+0x22a>
 8004812:	2306      	movs	r3, #6
 8004814:	e00c      	b.n	8004830 <HAL_GPIO_Init+0x244>
 8004816:	2307      	movs	r3, #7
 8004818:	e00a      	b.n	8004830 <HAL_GPIO_Init+0x244>
 800481a:	2305      	movs	r3, #5
 800481c:	e008      	b.n	8004830 <HAL_GPIO_Init+0x244>
 800481e:	2304      	movs	r3, #4
 8004820:	e006      	b.n	8004830 <HAL_GPIO_Init+0x244>
 8004822:	2303      	movs	r3, #3
 8004824:	e004      	b.n	8004830 <HAL_GPIO_Init+0x244>
 8004826:	2302      	movs	r3, #2
 8004828:	e002      	b.n	8004830 <HAL_GPIO_Init+0x244>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_GPIO_Init+0x244>
 800482e:	2300      	movs	r3, #0
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	f002 0203 	and.w	r2, r2, #3
 8004836:	0092      	lsls	r2, r2, #2
 8004838:	4093      	lsls	r3, r2
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004840:	4937      	ldr	r1, [pc, #220]	@ (8004920 <HAL_GPIO_Init+0x334>)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	3302      	adds	r3, #2
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800484e:	4b3b      	ldr	r3, [pc, #236]	@ (800493c <HAL_GPIO_Init+0x350>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	43db      	mvns	r3, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004872:	4a32      	ldr	r2, [pc, #200]	@ (800493c <HAL_GPIO_Init+0x350>)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004878:	4b30      	ldr	r3, [pc, #192]	@ (800493c <HAL_GPIO_Init+0x350>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	43db      	mvns	r3, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4013      	ands	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800489c:	4a27      	ldr	r2, [pc, #156]	@ (800493c <HAL_GPIO_Init+0x350>)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80048a2:	4b26      	ldr	r3, [pc, #152]	@ (800493c <HAL_GPIO_Init+0x350>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	43db      	mvns	r3, r3
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4013      	ands	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048c6:	4a1d      	ldr	r2, [pc, #116]	@ (800493c <HAL_GPIO_Init+0x350>)
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	@ (800493c <HAL_GPIO_Init+0x350>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048f0:	4a12      	ldr	r2, [pc, #72]	@ (800493c <HAL_GPIO_Init+0x350>)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	3301      	adds	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	fa22 f303 	lsr.w	r3, r2, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	f47f ae78 	bne.w	80045fc <HAL_GPIO_Init+0x10>
  }
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	40010000 	.word	0x40010000
 8004924:	48000400 	.word	0x48000400
 8004928:	48000800 	.word	0x48000800
 800492c:	48000c00 	.word	0x48000c00
 8004930:	48001000 	.word	0x48001000
 8004934:	48001400 	.word	0x48001400
 8004938:	48001800 	.word	0x48001800
 800493c:	40010400 	.word	0x40010400

08004940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	807b      	strh	r3, [r7, #2]
 800494c:	4613      	mov	r3, r2
 800494e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004950:	787b      	ldrb	r3, [r7, #1]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004956:	887a      	ldrh	r2, [r7, #2]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800495c:	e002      	b.n	8004964 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800495e:	887a      	ldrh	r2, [r7, #2]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800497a:	4b08      	ldr	r3, [pc, #32]	@ (800499c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d006      	beq.n	8004994 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004986:	4a05      	ldr	r2, [pc, #20]	@ (800499c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f806 	bl	80049a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004994:	bf00      	nop
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40010400 	.word	0x40010400

080049a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e08d      	b.n	8004ae4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fd fc0d 	bl	80021fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2224      	movs	r2, #36	@ 0x24
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d107      	bne.n	8004a30 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a2c:	609a      	str	r2, [r3, #8]
 8004a2e:	e006      	b.n	8004a3e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004a3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d108      	bne.n	8004a58 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	e007      	b.n	8004a68 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a66:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a7a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69d9      	ldr	r1, [r3, #28]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1a      	ldr	r2, [r3, #32]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0201 	orr.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	4608      	mov	r0, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	461a      	mov	r2, r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	817b      	strh	r3, [r7, #10]
 8004afe:	460b      	mov	r3, r1
 8004b00:	813b      	strh	r3, [r7, #8]
 8004b02:	4613      	mov	r3, r2
 8004b04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	f040 80f9 	bne.w	8004d06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_I2C_Mem_Write+0x34>
 8004b1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b26:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0ed      	b.n	8004d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_I2C_Mem_Write+0x4e>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e0e6      	b.n	8004d08 <HAL_I2C_Mem_Write+0x21c>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b42:	f7fd ff45 	bl	80029d0 <HAL_GetTick>
 8004b46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	2319      	movs	r3, #25
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 fbaf 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0d1      	b.n	8004d08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2221      	movs	r2, #33	@ 0x21
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2240      	movs	r2, #64	@ 0x40
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a3a      	ldr	r2, [r7, #32]
 8004b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b8c:	88f8      	ldrh	r0, [r7, #6]
 8004b8e:	893a      	ldrh	r2, [r7, #8]
 8004b90:	8979      	ldrh	r1, [r7, #10]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fabf 	bl	8005120 <I2C_RequestMemoryWrite>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0a9      	b.n	8004d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2bff      	cmp	r3, #255	@ 0xff
 8004bbc:	d90e      	bls.n	8004bdc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	22ff      	movs	r2, #255	@ 0xff
 8004bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	8979      	ldrh	r1, [r7, #10]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fd33 	bl	8005640 <I2C_TransferConfig>
 8004bda:	e00f      	b.n	8004bfc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	8979      	ldrh	r1, [r7, #10]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fd22 	bl	8005640 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fbb2 	bl	800536a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e07b      	b.n	8004d08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	781a      	ldrb	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d034      	beq.n	8004cb4 <HAL_I2C_Mem_Write+0x1c8>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d130      	bne.n	8004cb4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2180      	movs	r1, #128	@ 0x80
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 fb2b 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e04d      	b.n	8004d08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2bff      	cmp	r3, #255	@ 0xff
 8004c74:	d90e      	bls.n	8004c94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	22ff      	movs	r2, #255	@ 0xff
 8004c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	8979      	ldrh	r1, [r7, #10]
 8004c84:	2300      	movs	r3, #0
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fcd7 	bl	8005640 <I2C_TransferConfig>
 8004c92:	e00f      	b.n	8004cb4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	8979      	ldrh	r1, [r7, #10]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fcc6 	bl	8005640 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d19e      	bne.n	8004bfc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fb98 	bl	80053f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e01a      	b.n	8004d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <HAL_I2C_Mem_Write+0x224>)
 8004ce6:	400b      	ands	r3, r1
 8004ce8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e000      	b.n	8004d08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d06:	2302      	movs	r3, #2
  }
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	fe00e800 	.word	0xfe00e800

08004d14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	4611      	mov	r1, r2
 8004d20:	461a      	mov	r2, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	817b      	strh	r3, [r7, #10]
 8004d26:	460b      	mov	r3, r1
 8004d28:	813b      	strh	r3, [r7, #8]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	f040 80fd 	bne.w	8004f36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_I2C_Mem_Read+0x34>
 8004d42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d105      	bne.n	8004d54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0f1      	b.n	8004f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_I2C_Mem_Read+0x4e>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e0ea      	b.n	8004f38 <HAL_I2C_Mem_Read+0x224>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d6a:	f7fd fe31 	bl	80029d0 <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	2319      	movs	r3, #25
 8004d76:	2201      	movs	r2, #1
 8004d78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fa9b 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0d5      	b.n	8004f38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2222      	movs	r2, #34	@ 0x22
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2240      	movs	r2, #64	@ 0x40
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004db4:	88f8      	ldrh	r0, [r7, #6]
 8004db6:	893a      	ldrh	r2, [r7, #8]
 8004db8:	8979      	ldrh	r1, [r7, #10]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f9ff 	bl	80051c8 <I2C_RequestMemoryRead>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0ad      	b.n	8004f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2bff      	cmp	r3, #255	@ 0xff
 8004de4:	d90e      	bls.n	8004e04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	8979      	ldrh	r1, [r7, #10]
 8004df4:	4b52      	ldr	r3, [pc, #328]	@ (8004f40 <HAL_I2C_Mem_Read+0x22c>)
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fc1f 	bl	8005640 <I2C_TransferConfig>
 8004e02:	e00f      	b.n	8004e24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	8979      	ldrh	r1, [r7, #10]
 8004e16:	4b4a      	ldr	r3, [pc, #296]	@ (8004f40 <HAL_I2C_Mem_Read+0x22c>)
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 fc0e 	bl	8005640 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fa42 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e07c      	b.n	8004f38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d034      	beq.n	8004ee4 <HAL_I2C_Mem_Read+0x1d0>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d130      	bne.n	8004ee4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2180      	movs	r1, #128	@ 0x80
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fa13 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e04d      	b.n	8004f38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2bff      	cmp	r3, #255	@ 0xff
 8004ea4:	d90e      	bls.n	8004ec4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	8979      	ldrh	r1, [r7, #10]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 fbbf 	bl	8005640 <I2C_TransferConfig>
 8004ec2:	e00f      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	8979      	ldrh	r1, [r7, #10]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 fbae 	bl	8005640 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d19a      	bne.n	8004e24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fa80 	bl	80053f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e01a      	b.n	8004f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2220      	movs	r2, #32
 8004f08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6859      	ldr	r1, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <HAL_I2C_Mem_Read+0x230>)
 8004f16:	400b      	ands	r3, r1
 8004f18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e000      	b.n	8004f38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
  }
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	80002400 	.word	0x80002400
 8004f44:	fe00e800 	.word	0xfe00e800

08004f48 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	@ 0x28
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	460b      	mov	r3, r1
 8004f56:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	f040 80d6 	bne.w	8005116 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f78:	d101      	bne.n	8004f7e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e0cc      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_I2C_IsDeviceReady+0x44>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e0c5      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x1d0>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2224      	movs	r2, #36	@ 0x24
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d107      	bne.n	8004fba <HAL_I2C_IsDeviceReady+0x72>
 8004faa:	897b      	ldrh	r3, [r7, #10]
 8004fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004fb4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004fb8:	e006      	b.n	8004fc8 <HAL_I2C_IsDeviceReady+0x80>
 8004fba:	897b      	ldrh	r3, [r7, #10]
 8004fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004fc4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004fce:	f7fd fcff 	bl	80029d0 <HAL_GetTick>
 8004fd2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	bf0c      	ite	eq
 8004fe2:	2301      	moveq	r3, #1
 8004fe4:	2300      	movne	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b10      	cmp	r3, #16
 8004ff6:	bf0c      	ite	eq
 8004ff8:	2301      	moveq	r3, #1
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005000:	e034      	b.n	800506c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d01a      	beq.n	8005040 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800500a:	f7fd fce1 	bl	80029d0 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d302      	bcc.n	8005020 <HAL_I2C_IsDeviceReady+0xd8>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10f      	bne.n	8005040 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502c:	f043 0220 	orr.w	r2, r3, #32
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e06b      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b20      	cmp	r3, #32
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b10      	cmp	r3, #16
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800506c:	7ffb      	ldrb	r3, [r7, #31]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <HAL_I2C_IsDeviceReady+0x130>
 8005072:	7fbb      	ldrb	r3, [r7, #30]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0c4      	beq.n	8005002 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b10      	cmp	r3, #16
 8005084:	d01a      	beq.n	80050bc <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2200      	movs	r2, #0
 800508e:	2120      	movs	r1, #32
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f911 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e03b      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2220      	movs	r2, #32
 80050a6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e02d      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2200      	movs	r2, #0
 80050c4:	2120      	movs	r1, #32
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f8f6 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e020      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2210      	movs	r2, #16
 80050dc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2220      	movs	r2, #32
 80050e4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	3301      	adds	r3, #1
 80050ea:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	f63f af56 	bhi.w	8004fa2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8005116:	2302      	movs	r3, #2
  }
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	4608      	mov	r0, r1
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	4603      	mov	r3, r0
 8005130:	817b      	strh	r3, [r7, #10]
 8005132:	460b      	mov	r3, r1
 8005134:	813b      	strh	r3, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	8979      	ldrh	r1, [r7, #10]
 8005140:	4b20      	ldr	r3, [pc, #128]	@ (80051c4 <I2C_RequestMemoryWrite+0xa4>)
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fa79 	bl	8005640 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	69b9      	ldr	r1, [r7, #24]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f909 	bl	800536a <I2C_WaitOnTXISFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e02c      	b.n	80051bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d105      	bne.n	8005174 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005168:	893b      	ldrh	r3, [r7, #8]
 800516a:	b2da      	uxtb	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	629a      	str	r2, [r3, #40]	@ 0x28
 8005172:	e015      	b.n	80051a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005174:	893b      	ldrh	r3, [r7, #8]
 8005176:	0a1b      	lsrs	r3, r3, #8
 8005178:	b29b      	uxth	r3, r3
 800517a:	b2da      	uxtb	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	69b9      	ldr	r1, [r7, #24]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f8ef 	bl	800536a <I2C_WaitOnTXISFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e012      	b.n	80051bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005196:	893b      	ldrh	r3, [r7, #8]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	2200      	movs	r2, #0
 80051a8:	2180      	movs	r1, #128	@ 0x80
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f884 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	80002000 	.word	0x80002000

080051c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	4608      	mov	r0, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	461a      	mov	r2, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	817b      	strh	r3, [r7, #10]
 80051da:	460b      	mov	r3, r1
 80051dc:	813b      	strh	r3, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	8979      	ldrh	r1, [r7, #10]
 80051e8:	4b20      	ldr	r3, [pc, #128]	@ (800526c <I2C_RequestMemoryRead+0xa4>)
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	2300      	movs	r3, #0
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fa26 	bl	8005640 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	69b9      	ldr	r1, [r7, #24]
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f8b6 	bl	800536a <I2C_WaitOnTXISFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e02c      	b.n	8005262 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d105      	bne.n	800521a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800520e:	893b      	ldrh	r3, [r7, #8]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	629a      	str	r2, [r3, #40]	@ 0x28
 8005218:	e015      	b.n	8005246 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800521a:	893b      	ldrh	r3, [r7, #8]
 800521c:	0a1b      	lsrs	r3, r3, #8
 800521e:	b29b      	uxth	r3, r3
 8005220:	b2da      	uxtb	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	69b9      	ldr	r1, [r7, #24]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f89c 	bl	800536a <I2C_WaitOnTXISFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e012      	b.n	8005262 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800523c:	893b      	ldrh	r3, [r7, #8]
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2200      	movs	r2, #0
 800524e:	2140      	movs	r1, #64	@ 0x40
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f831 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	80002000 	.word	0x80002000

08005270 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d103      	bne.n	800528e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b01      	cmp	r3, #1
 800529a:	d007      	beq.n	80052ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	619a      	str	r2, [r3, #24]
  }
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	4613      	mov	r3, r2
 80052c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c8:	e03b      	b.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f8d6 	bl	8005480 <I2C_IsErrorOccurred>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e041      	b.n	8005362 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d02d      	beq.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e6:	f7fd fb73 	bl	80029d0 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d302      	bcc.n	80052fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d122      	bne.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	429a      	cmp	r2, r3
 8005318:	d113      	bne.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e00f      	b.n	8005362 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4013      	ands	r3, r2
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	bf0c      	ite	eq
 8005352:	2301      	moveq	r3, #1
 8005354:	2300      	movne	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	429a      	cmp	r2, r3
 800535e:	d0b4      	beq.n	80052ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005376:	e033      	b.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f87f 	bl	8005480 <I2C_IsErrorOccurred>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e031      	b.n	80053f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d025      	beq.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005394:	f7fd fb1c 	bl	80029d0 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d302      	bcc.n	80053aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d11a      	bne.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d013      	beq.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053bc:	f043 0220 	orr.w	r2, r3, #32
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e007      	b.n	80053f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d1c4      	bne.n	8005378 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005404:	e02f      	b.n	8005466 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f838 	bl	8005480 <I2C_IsErrorOccurred>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e02d      	b.n	8005476 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541a:	f7fd fad9 	bl	80029d0 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d11a      	bne.n	8005466 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b20      	cmp	r3, #32
 800543c:	d013      	beq.n	8005466 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e007      	b.n	8005476 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b20      	cmp	r3, #32
 8005472:	d1c8      	bne.n	8005406 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	@ 0x28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d068      	beq.n	800557e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2210      	movs	r2, #16
 80054b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054b4:	e049      	b.n	800554a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d045      	beq.n	800554a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054be:	f7fd fa87 	bl	80029d0 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d302      	bcc.n	80054d4 <I2C_IsErrorOccurred+0x54>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d13a      	bne.n	800554a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054f6:	d121      	bne.n	800553c <I2C_IsErrorOccurred+0xbc>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054fe:	d01d      	beq.n	800553c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005500:	7cfb      	ldrb	r3, [r7, #19]
 8005502:	2b20      	cmp	r3, #32
 8005504:	d01a      	beq.n	800553c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005514:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005516:	f7fd fa5b 	bl	80029d0 <HAL_GetTick>
 800551a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800551c:	e00e      	b.n	800553c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800551e:	f7fd fa57 	bl	80029d0 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b19      	cmp	r3, #25
 800552a:	d907      	bls.n	800553c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	f043 0320 	orr.w	r3, r3, #32
 8005532:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800553a:	e006      	b.n	800554a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b20      	cmp	r3, #32
 8005548:	d1e9      	bne.n	800551e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b20      	cmp	r3, #32
 8005556:	d003      	beq.n	8005560 <I2C_IsErrorOccurred+0xe0>
 8005558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0aa      	beq.n	80054b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005564:	2b00      	cmp	r3, #0
 8005566:	d103      	bne.n	8005570 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2220      	movs	r2, #32
 800556e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	f043 0304 	orr.w	r3, r3, #4
 8005576:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00b      	beq.n	80055a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00b      	beq.n	80055ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f043 0308 	orr.w	r3, r3, #8
 80055b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	f043 0302 	orr.w	r3, r3, #2
 80055da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80055ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01c      	beq.n	800562e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f7ff fe3b 	bl	8005270 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6859      	ldr	r1, [r3, #4]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	4b0d      	ldr	r3, [pc, #52]	@ (800563c <I2C_IsErrorOccurred+0x1bc>)
 8005606:	400b      	ands	r3, r1
 8005608:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	431a      	orrs	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800562e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005632:	4618      	mov	r0, r3
 8005634:	3728      	adds	r7, #40	@ 0x28
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	fe00e800 	.word	0xfe00e800

08005640 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	817b      	strh	r3, [r7, #10]
 800564e:	4613      	mov	r3, r2
 8005650:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005652:	897b      	ldrh	r3, [r7, #10]
 8005654:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005658:	7a7b      	ldrb	r3, [r7, #9]
 800565a:	041b      	lsls	r3, r3, #16
 800565c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005660:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	4313      	orrs	r3, r2
 800566a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800566e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	0d5b      	lsrs	r3, r3, #21
 800567a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800567e:	4b08      	ldr	r3, [pc, #32]	@ (80056a0 <I2C_TransferConfig+0x60>)
 8005680:	430b      	orrs	r3, r1
 8005682:	43db      	mvns	r3, r3
 8005684:	ea02 0103 	and.w	r1, r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	03ff63ff 	.word	0x03ff63ff

080056a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d138      	bne.n	800572c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e032      	b.n	800572e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2224      	movs	r2, #36	@ 0x24
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	e000      	b.n	800572e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800572c:	2302      	movs	r3, #2
  }
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b20      	cmp	r3, #32
 800574e:	d139      	bne.n	80057c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800575a:	2302      	movs	r3, #2
 800575c:	e033      	b.n	80057c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2224      	movs	r2, #36	@ 0x24
 800576a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0201 	bic.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800578c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e000      	b.n	80057c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
  }
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b086      	sub	sp, #24
 80057d6:	af02      	add	r7, sp, #8
 80057d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e101      	b.n	80059e8 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d106      	bne.n	80057fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fc febb 	bl	8002574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2203      	movs	r2, #3
 8005802:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f002 fb97 	bl	8007f44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	7c1a      	ldrb	r2, [r3, #16]
 800581e:	f88d 2000 	strb.w	r2, [sp]
 8005822:	3304      	adds	r3, #4
 8005824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005826:	f002 fb60 	bl	8007eea <USB_CoreInit>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0d5      	b.n	80059e8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2100      	movs	r1, #0
 8005842:	4618      	mov	r0, r3
 8005844:	f002 fb8f 	bl	8007f66 <USB_SetCurrentMode>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e0c6      	b.n	80059e8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
 800585e:	e04a      	b.n	80058f6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005860:	7bfa      	ldrb	r2, [r7, #15]
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	3315      	adds	r3, #21
 8005870:	2201      	movs	r2, #1
 8005872:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005874:	7bfa      	ldrb	r2, [r7, #15]
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	3314      	adds	r3, #20
 8005884:	7bfa      	ldrb	r2, [r7, #15]
 8005886:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005888:	7bfa      	ldrb	r2, [r7, #15]
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	b298      	uxth	r0, r3
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	332e      	adds	r3, #46	@ 0x2e
 800589c:	4602      	mov	r2, r0
 800589e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058a0:	7bfa      	ldrb	r2, [r7, #15]
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	3318      	adds	r3, #24
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058b4:	7bfa      	ldrb	r2, [r7, #15]
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	4613      	mov	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	331c      	adds	r3, #28
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058c8:	7bfa      	ldrb	r2, [r7, #15]
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	4613      	mov	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	3320      	adds	r3, #32
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058dc:	7bfa      	ldrb	r2, [r7, #15]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	3324      	adds	r3, #36	@ 0x24
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	3301      	adds	r3, #1
 80058f4:	73fb      	strb	r3, [r7, #15]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	791b      	ldrb	r3, [r3, #4]
 80058fa:	7bfa      	ldrb	r2, [r7, #15]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d3af      	bcc.n	8005860 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005900:	2300      	movs	r3, #0
 8005902:	73fb      	strb	r3, [r7, #15]
 8005904:	e044      	b.n	8005990 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005906:	7bfa      	ldrb	r2, [r7, #15]
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800591c:	7bfa      	ldrb	r2, [r7, #15]
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800592e:	7bfa      	ldrb	r2, [r7, #15]
 8005930:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005932:	7bfa      	ldrb	r2, [r7, #15]
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005948:	7bfa      	ldrb	r2, [r7, #15]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800595e:	7bfa      	ldrb	r2, [r7, #15]
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005974:	7bfa      	ldrb	r2, [r7, #15]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	3301      	adds	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	791b      	ldrb	r3, [r3, #4]
 8005994:	7bfa      	ldrb	r2, [r7, #15]
 8005996:	429a      	cmp	r2, r3
 8005998:	d3b5      	bcc.n	8005906 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	7c1a      	ldrb	r2, [r3, #16]
 80059a2:	f88d 2000 	strb.w	r2, [sp]
 80059a6:	3304      	adds	r3, #4
 80059a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059aa:	f002 fb29 	bl	8008000 <USB_DevInit>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e013      	b.n	80059e8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	7b1b      	ldrb	r3, [r3, #12]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d102      	bne.n	80059dc <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f80a 	bl	80059f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f002 fcce 	bl	8008382 <USB_DevDisconnect>

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a22:	f043 0303 	orr.w	r3, r3, #3
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a3c:	4b05      	ldr	r3, [pc, #20]	@ (8005a54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a04      	ldr	r2, [pc, #16]	@ (8005a54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a46:	6013      	str	r3, [r2, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40007000 	.word	0x40007000

08005a58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a5c:	4b04      	ldr	r3, [pc, #16]	@ (8005a70 <HAL_PWREx_GetVoltageRange+0x18>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40007000 	.word	0x40007000

08005a74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a82:	d130      	bne.n	8005ae6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a84:	4b23      	ldr	r3, [pc, #140]	@ (8005b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a90:	d038      	beq.n	8005b04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a92:	4b20      	ldr	r3, [pc, #128]	@ (8005b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005aa0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2232      	movs	r2, #50	@ 0x32
 8005aa8:	fb02 f303 	mul.w	r3, r2, r3
 8005aac:	4a1b      	ldr	r2, [pc, #108]	@ (8005b1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	0c9b      	lsrs	r3, r3, #18
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ab8:	e002      	b.n	8005ac0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ac0:	4b14      	ldr	r3, [pc, #80]	@ (8005b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005acc:	d102      	bne.n	8005ad4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f2      	bne.n	8005aba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ae0:	d110      	bne.n	8005b04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e00f      	b.n	8005b06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af2:	d007      	beq.n	8005b04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005af4:	4b07      	ldr	r3, [pc, #28]	@ (8005b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005afc:	4a05      	ldr	r2, [pc, #20]	@ (8005b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005afe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40007000 	.word	0x40007000
 8005b18:	20000000 	.word	0x20000000
 8005b1c:	431bde83 	.word	0x431bde83

08005b20 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005b24:	4b05      	ldr	r3, [pc, #20]	@ (8005b3c <HAL_PWREx_EnableVddUSB+0x1c>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4a04      	ldr	r2, [pc, #16]	@ (8005b3c <HAL_PWREx_EnableVddUSB+0x1c>)
 8005b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b2e:	6053      	str	r3, [r2, #4]
}
 8005b30:	bf00      	nop
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40007000 	.word	0x40007000

08005b40 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005b48:	f7fc ff42 	bl	80029d0 <HAL_GetTick>
 8005b4c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e063      	b.n	8005c20 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7fc fba3 	bl	80022b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005b72:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f858 	bl	8005c2c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	021a      	lsls	r2, r3, #8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2120      	movs	r1, #32
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f850 	bl	8005c48 <QSPI_WaitFlagStateUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005bac:	7afb      	ldrb	r3, [r7, #11]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d131      	bne.n	8005c16 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005bbc:	f023 0310 	bic.w	r3, r3, #16
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6852      	ldr	r2, [r2, #4]
 8005bc4:	0611      	lsls	r1, r2, #24
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68d2      	ldr	r2, [r2, #12]
 8005bca:	4311      	orrs	r1, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	4b13      	ldr	r3, [pc, #76]	@ (8005c28 <HAL_QSPI_Init+0xe8>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6912      	ldr	r2, [r2, #16]
 8005be2:	0411      	lsls	r1, r2, #16
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6952      	ldr	r2, [r2, #20]
 8005be8:	4311      	orrs	r1, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6992      	ldr	r2, [r2, #24]
 8005bee:	4311      	orrs	r1, r2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	ffe0f8fe 	.word	0xffe0f8fe

08005c2c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	4613      	mov	r3, r2
 8005c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005c58:	e01a      	b.n	8005c90 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d016      	beq.n	8005c90 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c62:	f7fc feb5 	bl	80029d0 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d302      	bcc.n	8005c78 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2204      	movs	r2, #4
 8005c7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c84:	f043 0201 	orr.w	r2, r3, #1
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e00e      	b.n	8005cae <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bf14      	ite	ne
 8005c9e:	2301      	movne	r3, #1
 8005ca0:	2300      	moveq	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	79fb      	ldrb	r3, [r7, #7]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d1d6      	bne.n	8005c5a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e3ca      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cca:	4b97      	ldr	r3, [pc, #604]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 030c 	and.w	r3, r3, #12
 8005cd2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cd4:	4b94      	ldr	r3, [pc, #592]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 80e4 	beq.w	8005eb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <HAL_RCC_OscConfig+0x4a>
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b0c      	cmp	r3, #12
 8005cf6:	f040 808b 	bne.w	8005e10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	f040 8087 	bne.w	8005e10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d02:	4b89      	ldr	r3, [pc, #548]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <HAL_RCC_OscConfig+0x62>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e3a2      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1a      	ldr	r2, [r3, #32]
 8005d1e:	4b82      	ldr	r3, [pc, #520]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <HAL_RCC_OscConfig+0x7c>
 8005d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d32:	e005      	b.n	8005d40 <HAL_RCC_OscConfig+0x88>
 8005d34:	4b7c      	ldr	r3, [pc, #496]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d223      	bcs.n	8005d8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fd55 	bl	80067f8 <RCC_SetFlashLatencyFromMSIRange>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e383      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d58:	4b73      	ldr	r3, [pc, #460]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a72      	ldr	r2, [pc, #456]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d5e:	f043 0308 	orr.w	r3, r3, #8
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	4b70      	ldr	r3, [pc, #448]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	496d      	ldr	r1, [pc, #436]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d76:	4b6c      	ldr	r3, [pc, #432]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	4968      	ldr	r1, [pc, #416]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	604b      	str	r3, [r1, #4]
 8005d8a:	e025      	b.n	8005dd8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d8c:	4b66      	ldr	r3, [pc, #408]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a65      	ldr	r2, [pc, #404]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d92:	f043 0308 	orr.w	r3, r3, #8
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	4b63      	ldr	r3, [pc, #396]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	4960      	ldr	r1, [pc, #384]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005daa:	4b5f      	ldr	r3, [pc, #380]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	495b      	ldr	r1, [pc, #364]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fd15 	bl	80067f8 <RCC_SetFlashLatencyFromMSIRange>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e343      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dd8:	f000 fc4a 	bl	8006670 <HAL_RCC_GetSysClockFreq>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4b52      	ldr	r3, [pc, #328]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	091b      	lsrs	r3, r3, #4
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	4950      	ldr	r1, [pc, #320]	@ (8005f2c <HAL_RCC_OscConfig+0x274>)
 8005dea:	5ccb      	ldrb	r3, [r1, r3]
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	4a4e      	ldr	r2, [pc, #312]	@ (8005f30 <HAL_RCC_OscConfig+0x278>)
 8005df6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005df8:	4b4e      	ldr	r3, [pc, #312]	@ (8005f34 <HAL_RCC_OscConfig+0x27c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fc fd97 	bl	8002930 <HAL_InitTick>
 8005e02:	4603      	mov	r3, r0
 8005e04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d052      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	e327      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d032      	beq.n	8005e7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e18:	4b43      	ldr	r3, [pc, #268]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a42      	ldr	r2, [pc, #264]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e24:	f7fc fdd4 	bl	80029d0 <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e2c:	f7fc fdd0 	bl	80029d0 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e310      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0f0      	beq.n	8005e2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e4a:	4b37      	ldr	r3, [pc, #220]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a36      	ldr	r2, [pc, #216]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005e50:	f043 0308 	orr.w	r3, r3, #8
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	4b34      	ldr	r3, [pc, #208]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	4931      	ldr	r1, [pc, #196]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e68:	4b2f      	ldr	r3, [pc, #188]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	492c      	ldr	r1, [pc, #176]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	604b      	str	r3, [r1, #4]
 8005e7c:	e01a      	b.n	8005eb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a29      	ldr	r2, [pc, #164]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005e84:	f023 0301 	bic.w	r3, r3, #1
 8005e88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e8a:	f7fc fda1 	bl	80029d0 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e92:	f7fc fd9d 	bl	80029d0 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e2dd      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ea4:	4b20      	ldr	r3, [pc, #128]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f0      	bne.n	8005e92 <HAL_RCC_OscConfig+0x1da>
 8005eb0:	e000      	b.n	8005eb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005eb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d074      	beq.n	8005faa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d005      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x21a>
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b0c      	cmp	r3, #12
 8005eca:	d10e      	bne.n	8005eea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d10b      	bne.n	8005eea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed2:	4b15      	ldr	r3, [pc, #84]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d064      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x2f0>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d160      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e2ba      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ef2:	d106      	bne.n	8005f02 <HAL_RCC_OscConfig+0x24a>
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	e026      	b.n	8005f50 <HAL_RCC_OscConfig+0x298>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f0a:	d115      	bne.n	8005f38 <HAL_RCC_OscConfig+0x280>
 8005f0c:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a05      	ldr	r2, [pc, #20]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005f12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	4b03      	ldr	r3, [pc, #12]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a02      	ldr	r2, [pc, #8]	@ (8005f28 <HAL_RCC_OscConfig+0x270>)
 8005f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e014      	b.n	8005f50 <HAL_RCC_OscConfig+0x298>
 8005f26:	bf00      	nop
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	0800d200 	.word	0x0800d200
 8005f30:	20000000 	.word	0x20000000
 8005f34:	20000004 	.word	0x20000004
 8005f38:	4ba0      	ldr	r3, [pc, #640]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a9f      	ldr	r2, [pc, #636]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8005f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	4b9d      	ldr	r3, [pc, #628]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a9c      	ldr	r2, [pc, #624]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8005f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d013      	beq.n	8005f80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f58:	f7fc fd3a 	bl	80029d0 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f60:	f7fc fd36 	bl	80029d0 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b64      	cmp	r3, #100	@ 0x64
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e276      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f72:	4b92      	ldr	r3, [pc, #584]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0x2a8>
 8005f7e:	e014      	b.n	8005faa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f80:	f7fc fd26 	bl	80029d0 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fc fd22 	bl	80029d0 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b64      	cmp	r3, #100	@ 0x64
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e262      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f9a:	4b88      	ldr	r3, [pc, #544]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f0      	bne.n	8005f88 <HAL_RCC_OscConfig+0x2d0>
 8005fa6:	e000      	b.n	8005faa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d060      	beq.n	8006078 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d005      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x310>
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	2b0c      	cmp	r3, #12
 8005fc0:	d119      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d116      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fc8:	4b7c      	ldr	r3, [pc, #496]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x328>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e23f      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe0:	4b76      	ldr	r3, [pc, #472]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	061b      	lsls	r3, r3, #24
 8005fee:	4973      	ldr	r1, [pc, #460]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ff4:	e040      	b.n	8006078 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d023      	beq.n	8006046 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ffe:	4b6f      	ldr	r3, [pc, #444]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a6e      	ldr	r2, [pc, #440]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8006004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600a:	f7fc fce1 	bl	80029d0 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006012:	f7fc fcdd 	bl	80029d0 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e21d      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006024:	4b65      	ldr	r3, [pc, #404]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0f0      	beq.n	8006012 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006030:	4b62      	ldr	r3, [pc, #392]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	061b      	lsls	r3, r3, #24
 800603e:	495f      	ldr	r1, [pc, #380]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8006040:	4313      	orrs	r3, r2
 8006042:	604b      	str	r3, [r1, #4]
 8006044:	e018      	b.n	8006078 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006046:	4b5d      	ldr	r3, [pc, #372]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a5c      	ldr	r2, [pc, #368]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 800604c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006052:	f7fc fcbd 	bl	80029d0 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800605a:	f7fc fcb9 	bl	80029d0 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e1f9      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800606c:	4b53      	ldr	r3, [pc, #332]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f0      	bne.n	800605a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b00      	cmp	r3, #0
 8006082:	d03c      	beq.n	80060fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01c      	beq.n	80060c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800608c:	4b4b      	ldr	r3, [pc, #300]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 800608e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006092:	4a4a      	ldr	r2, [pc, #296]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609c:	f7fc fc98 	bl	80029d0 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a4:	f7fc fc94 	bl	80029d0 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e1d4      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060b6:	4b41      	ldr	r3, [pc, #260]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 80060b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0ef      	beq.n	80060a4 <HAL_RCC_OscConfig+0x3ec>
 80060c4:	e01b      	b.n	80060fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060c6:	4b3d      	ldr	r3, [pc, #244]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 80060c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060cc:	4a3b      	ldr	r2, [pc, #236]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 80060ce:	f023 0301 	bic.w	r3, r3, #1
 80060d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d6:	f7fc fc7b 	bl	80029d0 <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060dc:	e008      	b.n	80060f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060de:	f7fc fc77 	bl	80029d0 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e1b7      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060f0:	4b32      	ldr	r3, [pc, #200]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 80060f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1ef      	bne.n	80060de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 80a6 	beq.w	8006258 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800610c:	2300      	movs	r3, #0
 800610e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006110:	4b2a      	ldr	r3, [pc, #168]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8006112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10d      	bne.n	8006138 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800611c:	4b27      	ldr	r3, [pc, #156]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 800611e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006120:	4a26      	ldr	r2, [pc, #152]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8006122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006126:	6593      	str	r3, [r2, #88]	@ 0x58
 8006128:	4b24      	ldr	r3, [pc, #144]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 800612a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006134:	2301      	movs	r3, #1
 8006136:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006138:	4b21      	ldr	r3, [pc, #132]	@ (80061c0 <HAL_RCC_OscConfig+0x508>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006140:	2b00      	cmp	r3, #0
 8006142:	d118      	bne.n	8006176 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006144:	4b1e      	ldr	r3, [pc, #120]	@ (80061c0 <HAL_RCC_OscConfig+0x508>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1d      	ldr	r2, [pc, #116]	@ (80061c0 <HAL_RCC_OscConfig+0x508>)
 800614a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800614e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006150:	f7fc fc3e 	bl	80029d0 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006158:	f7fc fc3a 	bl	80029d0 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e17a      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800616a:	4b15      	ldr	r3, [pc, #84]	@ (80061c0 <HAL_RCC_OscConfig+0x508>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0f0      	beq.n	8006158 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d108      	bne.n	8006190 <HAL_RCC_OscConfig+0x4d8>
 800617e:	4b0f      	ldr	r3, [pc, #60]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006184:	4a0d      	ldr	r2, [pc, #52]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800618e:	e029      	b.n	80061e4 <HAL_RCC_OscConfig+0x52c>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b05      	cmp	r3, #5
 8006196:	d115      	bne.n	80061c4 <HAL_RCC_OscConfig+0x50c>
 8006198:	4b08      	ldr	r3, [pc, #32]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619e:	4a07      	ldr	r2, [pc, #28]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 80061a0:	f043 0304 	orr.w	r3, r3, #4
 80061a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061a8:	4b04      	ldr	r3, [pc, #16]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ae:	4a03      	ldr	r2, [pc, #12]	@ (80061bc <HAL_RCC_OscConfig+0x504>)
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061b8:	e014      	b.n	80061e4 <HAL_RCC_OscConfig+0x52c>
 80061ba:	bf00      	nop
 80061bc:	40021000 	.word	0x40021000
 80061c0:	40007000 	.word	0x40007000
 80061c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80061c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ca:	4a9b      	ldr	r2, [pc, #620]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061d4:	4b98      	ldr	r3, [pc, #608]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061da:	4a97      	ldr	r2, [pc, #604]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80061dc:	f023 0304 	bic.w	r3, r3, #4
 80061e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d016      	beq.n	800621a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ec:	f7fc fbf0 	bl	80029d0 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061f2:	e00a      	b.n	800620a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f4:	f7fc fbec 	bl	80029d0 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006202:	4293      	cmp	r3, r2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e12a      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800620a:	4b8b      	ldr	r3, [pc, #556]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 800620c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0ed      	beq.n	80061f4 <HAL_RCC_OscConfig+0x53c>
 8006218:	e015      	b.n	8006246 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621a:	f7fc fbd9 	bl	80029d0 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006220:	e00a      	b.n	8006238 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006222:	f7fc fbd5 	bl	80029d0 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006230:	4293      	cmp	r3, r2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e113      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006238:	4b7f      	ldr	r3, [pc, #508]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1ed      	bne.n	8006222 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006246:	7ffb      	ldrb	r3, [r7, #31]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d105      	bne.n	8006258 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800624c:	4b7a      	ldr	r3, [pc, #488]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 800624e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006250:	4a79      	ldr	r2, [pc, #484]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 8006252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006256:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80fe 	beq.w	800645e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006266:	2b02      	cmp	r3, #2
 8006268:	f040 80d0 	bne.w	800640c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800626c:	4b72      	ldr	r3, [pc, #456]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f003 0203 	and.w	r2, r3, #3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627c:	429a      	cmp	r2, r3
 800627e:	d130      	bne.n	80062e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628a:	3b01      	subs	r3, #1
 800628c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800628e:	429a      	cmp	r2, r3
 8006290:	d127      	bne.n	80062e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800629e:	429a      	cmp	r2, r3
 80062a0:	d11f      	bne.n	80062e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80062ac:	2a07      	cmp	r2, #7
 80062ae:	bf14      	ite	ne
 80062b0:	2201      	movne	r2, #1
 80062b2:	2200      	moveq	r2, #0
 80062b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d113      	bne.n	80062e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	3b01      	subs	r3, #1
 80062c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d109      	bne.n	80062e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d8:	085b      	lsrs	r3, r3, #1
 80062da:	3b01      	subs	r3, #1
 80062dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062de:	429a      	cmp	r2, r3
 80062e0:	d06e      	beq.n	80063c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b0c      	cmp	r3, #12
 80062e6:	d069      	beq.n	80063bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80062e8:	4b53      	ldr	r3, [pc, #332]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d105      	bne.n	8006300 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80062f4:	4b50      	ldr	r3, [pc, #320]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0ad      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006304:	4b4c      	ldr	r3, [pc, #304]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a4b      	ldr	r2, [pc, #300]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 800630a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800630e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006310:	f7fc fb5e 	bl	80029d0 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006318:	f7fc fb5a 	bl	80029d0 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e09a      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800632a:	4b43      	ldr	r3, [pc, #268]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f0      	bne.n	8006318 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006336:	4b40      	ldr	r3, [pc, #256]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	4b40      	ldr	r3, [pc, #256]	@ (800643c <HAL_RCC_OscConfig+0x784>)
 800633c:	4013      	ands	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006346:	3a01      	subs	r2, #1
 8006348:	0112      	lsls	r2, r2, #4
 800634a:	4311      	orrs	r1, r2
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006350:	0212      	lsls	r2, r2, #8
 8006352:	4311      	orrs	r1, r2
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006358:	0852      	lsrs	r2, r2, #1
 800635a:	3a01      	subs	r2, #1
 800635c:	0552      	lsls	r2, r2, #21
 800635e:	4311      	orrs	r1, r2
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006364:	0852      	lsrs	r2, r2, #1
 8006366:	3a01      	subs	r2, #1
 8006368:	0652      	lsls	r2, r2, #25
 800636a:	4311      	orrs	r1, r2
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006370:	0912      	lsrs	r2, r2, #4
 8006372:	0452      	lsls	r2, r2, #17
 8006374:	430a      	orrs	r2, r1
 8006376:	4930      	ldr	r1, [pc, #192]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 8006378:	4313      	orrs	r3, r2
 800637a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800637c:	4b2e      	ldr	r3, [pc, #184]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a2d      	ldr	r2, [pc, #180]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 8006382:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006386:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006388:	4b2b      	ldr	r3, [pc, #172]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	4a2a      	ldr	r2, [pc, #168]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 800638e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006392:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006394:	f7fc fb1c 	bl	80029d0 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800639c:	f7fc fb18 	bl	80029d0 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e058      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ae:	4b22      	ldr	r3, [pc, #136]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f0      	beq.n	800639c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063ba:	e050      	b.n	800645e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e04f      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d148      	bne.n	800645e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80063cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a19      	ldr	r2, [pc, #100]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80063d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063d8:	4b17      	ldr	r3, [pc, #92]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4a16      	ldr	r2, [pc, #88]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 80063de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063e4:	f7fc faf4 	bl	80029d0 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fc faf0 	bl	80029d0 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e030      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f0      	beq.n	80063ec <HAL_RCC_OscConfig+0x734>
 800640a:	e028      	b.n	800645e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b0c      	cmp	r3, #12
 8006410:	d023      	beq.n	800645a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006412:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a08      	ldr	r2, [pc, #32]	@ (8006438 <HAL_RCC_OscConfig+0x780>)
 8006418:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800641c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641e:	f7fc fad7 	bl	80029d0 <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006424:	e00c      	b.n	8006440 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006426:	f7fc fad3 	bl	80029d0 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d905      	bls.n	8006440 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e013      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
 8006438:	40021000 	.word	0x40021000
 800643c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006440:	4b09      	ldr	r3, [pc, #36]	@ (8006468 <HAL_RCC_OscConfig+0x7b0>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1ec      	bne.n	8006426 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800644c:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <HAL_RCC_OscConfig+0x7b0>)
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	4905      	ldr	r1, [pc, #20]	@ (8006468 <HAL_RCC_OscConfig+0x7b0>)
 8006452:	4b06      	ldr	r3, [pc, #24]	@ (800646c <HAL_RCC_OscConfig+0x7b4>)
 8006454:	4013      	ands	r3, r2
 8006456:	60cb      	str	r3, [r1, #12]
 8006458:	e001      	b.n	800645e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40021000 	.word	0x40021000
 800646c:	feeefffc 	.word	0xfeeefffc

08006470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e0e7      	b.n	8006654 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006484:	4b75      	ldr	r3, [pc, #468]	@ (800665c <HAL_RCC_ClockConfig+0x1ec>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d910      	bls.n	80064b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006492:	4b72      	ldr	r3, [pc, #456]	@ (800665c <HAL_RCC_ClockConfig+0x1ec>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f023 0207 	bic.w	r2, r3, #7
 800649a:	4970      	ldr	r1, [pc, #448]	@ (800665c <HAL_RCC_ClockConfig+0x1ec>)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	4313      	orrs	r3, r2
 80064a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a2:	4b6e      	ldr	r3, [pc, #440]	@ (800665c <HAL_RCC_ClockConfig+0x1ec>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d001      	beq.n	80064b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e0cf      	b.n	8006654 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d010      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	4b66      	ldr	r3, [pc, #408]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d908      	bls.n	80064e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d0:	4b63      	ldr	r3, [pc, #396]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4960      	ldr	r1, [pc, #384]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d04c      	beq.n	8006588 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d107      	bne.n	8006506 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064f6:	4b5a      	ldr	r3, [pc, #360]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d121      	bne.n	8006546 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e0a6      	b.n	8006654 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b02      	cmp	r3, #2
 800650c:	d107      	bne.n	800651e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800650e:	4b54      	ldr	r3, [pc, #336]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d115      	bne.n	8006546 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e09a      	b.n	8006654 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d107      	bne.n	8006536 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006526:	4b4e      	ldr	r3, [pc, #312]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e08e      	b.n	8006654 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006536:	4b4a      	ldr	r3, [pc, #296]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e086      	b.n	8006654 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006546:	4b46      	ldr	r3, [pc, #280]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f023 0203 	bic.w	r2, r3, #3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	4943      	ldr	r1, [pc, #268]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 8006554:	4313      	orrs	r3, r2
 8006556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006558:	f7fc fa3a 	bl	80029d0 <HAL_GetTick>
 800655c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	e00a      	b.n	8006576 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006560:	f7fc fa36 	bl	80029d0 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e06e      	b.n	8006654 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006576:	4b3a      	ldr	r3, [pc, #232]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 020c 	and.w	r2, r3, #12
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	429a      	cmp	r2, r3
 8006586:	d1eb      	bne.n	8006560 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d010      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	4b31      	ldr	r3, [pc, #196]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d208      	bcs.n	80065b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	492b      	ldr	r1, [pc, #172]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065b6:	4b29      	ldr	r3, [pc, #164]	@ (800665c <HAL_RCC_ClockConfig+0x1ec>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d210      	bcs.n	80065e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c4:	4b25      	ldr	r3, [pc, #148]	@ (800665c <HAL_RCC_ClockConfig+0x1ec>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f023 0207 	bic.w	r2, r3, #7
 80065cc:	4923      	ldr	r1, [pc, #140]	@ (800665c <HAL_RCC_ClockConfig+0x1ec>)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d4:	4b21      	ldr	r3, [pc, #132]	@ (800665c <HAL_RCC_ClockConfig+0x1ec>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d001      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e036      	b.n	8006654 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	4918      	ldr	r1, [pc, #96]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 8006600:	4313      	orrs	r3, r2
 8006602:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006610:	4b13      	ldr	r3, [pc, #76]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	4910      	ldr	r1, [pc, #64]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 8006620:	4313      	orrs	r3, r2
 8006622:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006624:	f000 f824 	bl	8006670 <HAL_RCC_GetSysClockFreq>
 8006628:	4602      	mov	r2, r0
 800662a:	4b0d      	ldr	r3, [pc, #52]	@ (8006660 <HAL_RCC_ClockConfig+0x1f0>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	091b      	lsrs	r3, r3, #4
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	490b      	ldr	r1, [pc, #44]	@ (8006664 <HAL_RCC_ClockConfig+0x1f4>)
 8006636:	5ccb      	ldrb	r3, [r1, r3]
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
 8006640:	4a09      	ldr	r2, [pc, #36]	@ (8006668 <HAL_RCC_ClockConfig+0x1f8>)
 8006642:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006644:	4b09      	ldr	r3, [pc, #36]	@ (800666c <HAL_RCC_ClockConfig+0x1fc>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f7fc f971 	bl	8002930 <HAL_InitTick>
 800664e:	4603      	mov	r3, r0
 8006650:	72fb      	strb	r3, [r7, #11]

  return status;
 8006652:	7afb      	ldrb	r3, [r7, #11]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40022000 	.word	0x40022000
 8006660:	40021000 	.word	0x40021000
 8006664:	0800d200 	.word	0x0800d200
 8006668:	20000000 	.word	0x20000000
 800666c:	20000004 	.word	0x20000004

08006670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006670:	b480      	push	{r7}
 8006672:	b089      	sub	sp, #36	@ 0x24
 8006674:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
 800667a:	2300      	movs	r3, #0
 800667c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800667e:	4b3e      	ldr	r3, [pc, #248]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x108>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 030c 	and.w	r3, r3, #12
 8006686:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006688:	4b3b      	ldr	r3, [pc, #236]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x108>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <HAL_RCC_GetSysClockFreq+0x34>
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b0c      	cmp	r3, #12
 800669c:	d121      	bne.n	80066e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d11e      	bne.n	80066e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80066a4:	4b34      	ldr	r3, [pc, #208]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x108>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0308 	and.w	r3, r3, #8
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d107      	bne.n	80066c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066b0:	4b31      	ldr	r3, [pc, #196]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x108>)
 80066b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066b6:	0a1b      	lsrs	r3, r3, #8
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	e005      	b.n	80066cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x108>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	091b      	lsrs	r3, r3, #4
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80066cc:	4a2b      	ldr	r2, [pc, #172]	@ (800677c <HAL_RCC_GetSysClockFreq+0x10c>)
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10d      	bne.n	80066f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066e0:	e00a      	b.n	80066f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d102      	bne.n	80066ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066e8:	4b25      	ldr	r3, [pc, #148]	@ (8006780 <HAL_RCC_GetSysClockFreq+0x110>)
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	e004      	b.n	80066f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d101      	bne.n	80066f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066f4:	4b23      	ldr	r3, [pc, #140]	@ (8006784 <HAL_RCC_GetSysClockFreq+0x114>)
 80066f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b0c      	cmp	r3, #12
 80066fc:	d134      	bne.n	8006768 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x108>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d003      	beq.n	8006716 <HAL_RCC_GetSysClockFreq+0xa6>
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b03      	cmp	r3, #3
 8006712:	d003      	beq.n	800671c <HAL_RCC_GetSysClockFreq+0xac>
 8006714:	e005      	b.n	8006722 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006716:	4b1a      	ldr	r3, [pc, #104]	@ (8006780 <HAL_RCC_GetSysClockFreq+0x110>)
 8006718:	617b      	str	r3, [r7, #20]
      break;
 800671a:	e005      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800671c:	4b19      	ldr	r3, [pc, #100]	@ (8006784 <HAL_RCC_GetSysClockFreq+0x114>)
 800671e:	617b      	str	r3, [r7, #20]
      break;
 8006720:	e002      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	617b      	str	r3, [r7, #20]
      break;
 8006726:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006728:	4b13      	ldr	r3, [pc, #76]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x108>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	091b      	lsrs	r3, r3, #4
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	3301      	adds	r3, #1
 8006734:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006736:	4b10      	ldr	r3, [pc, #64]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x108>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	0a1b      	lsrs	r3, r3, #8
 800673c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	fb03 f202 	mul.w	r2, r3, r2
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	fbb2 f3f3 	udiv	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800674e:	4b0a      	ldr	r3, [pc, #40]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x108>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	0e5b      	lsrs	r3, r3, #25
 8006754:	f003 0303 	and.w	r3, r3, #3
 8006758:	3301      	adds	r3, #1
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	fbb2 f3f3 	udiv	r3, r2, r3
 8006766:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006768:	69bb      	ldr	r3, [r7, #24]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3724      	adds	r7, #36	@ 0x24
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40021000 	.word	0x40021000
 800677c:	0800d218 	.word	0x0800d218
 8006780:	00f42400 	.word	0x00f42400
 8006784:	007a1200 	.word	0x007a1200

08006788 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800678c:	4b03      	ldr	r3, [pc, #12]	@ (800679c <HAL_RCC_GetHCLKFreq+0x14>)
 800678e:	681b      	ldr	r3, [r3, #0]
}
 8006790:	4618      	mov	r0, r3
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000000 	.word	0x20000000

080067a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067a4:	f7ff fff0 	bl	8006788 <HAL_RCC_GetHCLKFreq>
 80067a8:	4602      	mov	r2, r0
 80067aa:	4b06      	ldr	r3, [pc, #24]	@ (80067c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	0a1b      	lsrs	r3, r3, #8
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	4904      	ldr	r1, [pc, #16]	@ (80067c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067b6:	5ccb      	ldrb	r3, [r1, r3]
 80067b8:	f003 031f 	and.w	r3, r3, #31
 80067bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40021000 	.word	0x40021000
 80067c8:	0800d210 	.word	0x0800d210

080067cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067d0:	f7ff ffda 	bl	8006788 <HAL_RCC_GetHCLKFreq>
 80067d4:	4602      	mov	r2, r0
 80067d6:	4b06      	ldr	r3, [pc, #24]	@ (80067f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	0adb      	lsrs	r3, r3, #11
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	4904      	ldr	r1, [pc, #16]	@ (80067f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067e2:	5ccb      	ldrb	r3, [r1, r3]
 80067e4:	f003 031f 	and.w	r3, r3, #31
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40021000 	.word	0x40021000
 80067f4:	0800d210 	.word	0x0800d210

080067f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006804:	4b2a      	ldr	r3, [pc, #168]	@ (80068b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006810:	f7ff f922 	bl	8005a58 <HAL_PWREx_GetVoltageRange>
 8006814:	6178      	str	r0, [r7, #20]
 8006816:	e014      	b.n	8006842 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006818:	4b25      	ldr	r3, [pc, #148]	@ (80068b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800681a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800681c:	4a24      	ldr	r2, [pc, #144]	@ (80068b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800681e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006822:	6593      	str	r3, [r2, #88]	@ 0x58
 8006824:	4b22      	ldr	r3, [pc, #136]	@ (80068b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006830:	f7ff f912 	bl	8005a58 <HAL_PWREx_GetVoltageRange>
 8006834:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006836:	4b1e      	ldr	r3, [pc, #120]	@ (80068b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800683a:	4a1d      	ldr	r2, [pc, #116]	@ (80068b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800683c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006840:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006848:	d10b      	bne.n	8006862 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b80      	cmp	r3, #128	@ 0x80
 800684e:	d919      	bls.n	8006884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2ba0      	cmp	r3, #160	@ 0xa0
 8006854:	d902      	bls.n	800685c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006856:	2302      	movs	r3, #2
 8006858:	613b      	str	r3, [r7, #16]
 800685a:	e013      	b.n	8006884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800685c:	2301      	movs	r3, #1
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	e010      	b.n	8006884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b80      	cmp	r3, #128	@ 0x80
 8006866:	d902      	bls.n	800686e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006868:	2303      	movs	r3, #3
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	e00a      	b.n	8006884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b80      	cmp	r3, #128	@ 0x80
 8006872:	d102      	bne.n	800687a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006874:	2302      	movs	r3, #2
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	e004      	b.n	8006884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b70      	cmp	r3, #112	@ 0x70
 800687e:	d101      	bne.n	8006884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006880:	2301      	movs	r3, #1
 8006882:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006884:	4b0b      	ldr	r3, [pc, #44]	@ (80068b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f023 0207 	bic.w	r2, r3, #7
 800688c:	4909      	ldr	r1, [pc, #36]	@ (80068b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006894:	4b07      	ldr	r3, [pc, #28]	@ (80068b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d001      	beq.n	80068a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40021000 	.word	0x40021000
 80068b4:	40022000 	.word	0x40022000

080068b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068c0:	2300      	movs	r3, #0
 80068c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068c4:	2300      	movs	r3, #0
 80068c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d041      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80068dc:	d02a      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80068de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80068e2:	d824      	bhi.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80068e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068e8:	d008      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80068ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068ee:	d81e      	bhi.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80068f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068f8:	d010      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80068fa:	e018      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80068fc:	4b86      	ldr	r3, [pc, #536]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	4a85      	ldr	r2, [pc, #532]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006906:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006908:	e015      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3304      	adds	r3, #4
 800690e:	2100      	movs	r1, #0
 8006910:	4618      	mov	r0, r3
 8006912:	f000 facb 	bl	8006eac <RCCEx_PLLSAI1_Config>
 8006916:	4603      	mov	r3, r0
 8006918:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800691a:	e00c      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3320      	adds	r3, #32
 8006920:	2100      	movs	r1, #0
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fbb6 	bl	8007094 <RCCEx_PLLSAI2_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800692c:	e003      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	74fb      	strb	r3, [r7, #19]
      break;
 8006932:	e000      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006936:	7cfb      	ldrb	r3, [r7, #19]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10b      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800693c:	4b76      	ldr	r3, [pc, #472]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006942:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800694a:	4973      	ldr	r1, [pc, #460]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800694c:	4313      	orrs	r3, r2
 800694e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006952:	e001      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006954:	7cfb      	ldrb	r3, [r7, #19]
 8006956:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d041      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006968:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800696c:	d02a      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800696e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006972:	d824      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006974:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006978:	d008      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800697a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800697e:	d81e      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006988:	d010      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800698a:	e018      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800698c:	4b62      	ldr	r3, [pc, #392]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	4a61      	ldr	r2, [pc, #388]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006996:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006998:	e015      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3304      	adds	r3, #4
 800699e:	2100      	movs	r1, #0
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fa83 	bl	8006eac <RCCEx_PLLSAI1_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80069aa:	e00c      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3320      	adds	r3, #32
 80069b0:	2100      	movs	r1, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fb6e 	bl	8007094 <RCCEx_PLLSAI2_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80069bc:	e003      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	74fb      	strb	r3, [r7, #19]
      break;
 80069c2:	e000      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80069c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c6:	7cfb      	ldrb	r3, [r7, #19]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10b      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069cc:	4b52      	ldr	r3, [pc, #328]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069da:	494f      	ldr	r1, [pc, #316]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80069e2:	e001      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e4:	7cfb      	ldrb	r3, [r7, #19]
 80069e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80a0 	beq.w	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069f6:	2300      	movs	r3, #0
 80069f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069fa:	4b47      	ldr	r3, [pc, #284]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00d      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a10:	4b41      	ldr	r3, [pc, #260]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a14:	4a40      	ldr	r2, [pc, #256]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a24:	60bb      	str	r3, [r7, #8]
 8006a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a3a      	ldr	r2, [pc, #232]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a38:	f7fb ffca 	bl	80029d0 <HAL_GetTick>
 8006a3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a3e:	e009      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a40:	f7fb ffc6 	bl	80029d0 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d902      	bls.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	74fb      	strb	r3, [r7, #19]
        break;
 8006a52:	e005      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a54:	4b31      	ldr	r3, [pc, #196]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0ef      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006a60:	7cfb      	ldrb	r3, [r7, #19]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d15c      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a66:	4b2c      	ldr	r3, [pc, #176]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01f      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d019      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a84:	4b24      	ldr	r3, [pc, #144]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a90:	4b21      	ldr	r3, [pc, #132]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a96:	4a20      	ldr	r2, [pc, #128]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ab0:	4a19      	ldr	r2, [pc, #100]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d016      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac2:	f7fb ff85 	bl	80029d0 <HAL_GetTick>
 8006ac6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ac8:	e00b      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aca:	f7fb ff81 	bl	80029d0 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d902      	bls.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	74fb      	strb	r3, [r7, #19]
            break;
 8006ae0:	e006      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0ec      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006af0:	7cfb      	ldrb	r3, [r7, #19]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10c      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006af6:	4b08      	ldr	r3, [pc, #32]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006afc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b06:	4904      	ldr	r1, [pc, #16]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b0e:	e009      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b10:	7cfb      	ldrb	r3, [r7, #19]
 8006b12:	74bb      	strb	r3, [r7, #18]
 8006b14:	e006      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006b16:	bf00      	nop
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b20:	7cfb      	ldrb	r3, [r7, #19]
 8006b22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b24:	7c7b      	ldrb	r3, [r7, #17]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d105      	bne.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b2a:	4b9e      	ldr	r3, [pc, #632]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2e:	4a9d      	ldr	r2, [pc, #628]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b42:	4b98      	ldr	r3, [pc, #608]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b48:	f023 0203 	bic.w	r2, r3, #3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b50:	4994      	ldr	r1, [pc, #592]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00a      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b64:	4b8f      	ldr	r3, [pc, #572]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6a:	f023 020c 	bic.w	r2, r3, #12
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b72:	498c      	ldr	r1, [pc, #560]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b86:	4b87      	ldr	r3, [pc, #540]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b94:	4983      	ldr	r1, [pc, #524]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00a      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb6:	497b      	ldr	r1, [pc, #492]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bca:	4b76      	ldr	r3, [pc, #472]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bd8:	4972      	ldr	r1, [pc, #456]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00a      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bec:	4b6d      	ldr	r3, [pc, #436]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bfa:	496a      	ldr	r1, [pc, #424]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00a      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c0e:	4b65      	ldr	r3, [pc, #404]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c1c:	4961      	ldr	r1, [pc, #388]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c30:	4b5c      	ldr	r3, [pc, #368]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c3e:	4959      	ldr	r1, [pc, #356]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c52:	4b54      	ldr	r3, [pc, #336]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c60:	4950      	ldr	r1, [pc, #320]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c74:	4b4b      	ldr	r3, [pc, #300]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c82:	4948      	ldr	r1, [pc, #288]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c96:	4b43      	ldr	r3, [pc, #268]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca4:	493f      	ldr	r1, [pc, #252]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d028      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cc6:	4937      	ldr	r1, [pc, #220]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cd6:	d106      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cd8:	4b32      	ldr	r3, [pc, #200]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	4a31      	ldr	r2, [pc, #196]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ce2:	60d3      	str	r3, [r2, #12]
 8006ce4:	e011      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cee:	d10c      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 f8d8 	bl	8006eac <RCCEx_PLLSAI1_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006d00:	7cfb      	ldrb	r3, [r7, #19]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006d06:	7cfb      	ldrb	r3, [r7, #19]
 8006d08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d028      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006d16:	4b23      	ldr	r3, [pc, #140]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d24:	491f      	ldr	r1, [pc, #124]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d34:	d106      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d36:	4b1b      	ldr	r3, [pc, #108]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d40:	60d3      	str	r3, [r2, #12]
 8006d42:	e011      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	2101      	movs	r1, #1
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f8a9 	bl	8006eac <RCCEx_PLLSAI1_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d5e:	7cfb      	ldrb	r3, [r7, #19]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006d64:	7cfb      	ldrb	r3, [r7, #19]
 8006d66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d02b      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d74:	4b0b      	ldr	r3, [pc, #44]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d82:	4908      	ldr	r1, [pc, #32]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d92:	d109      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d94:	4b03      	ldr	r3, [pc, #12]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	4a02      	ldr	r2, [pc, #8]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d9e:	60d3      	str	r3, [r2, #12]
 8006da0:	e014      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006da2:	bf00      	nop
 8006da4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006db0:	d10c      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3304      	adds	r3, #4
 8006db6:	2101      	movs	r1, #1
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 f877 	bl	8006eac <RCCEx_PLLSAI1_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006dc2:	7cfb      	ldrb	r3, [r7, #19]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006dc8:	7cfb      	ldrb	r3, [r7, #19]
 8006dca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d02f      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dde:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006de6:	4928      	ldr	r1, [pc, #160]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006df2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006df6:	d10d      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	2102      	movs	r1, #2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 f854 	bl	8006eac <RCCEx_PLLSAI1_Config>
 8006e04:	4603      	mov	r3, r0
 8006e06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e08:	7cfb      	ldrb	r3, [r7, #19]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d014      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006e0e:	7cfb      	ldrb	r3, [r7, #19]
 8006e10:	74bb      	strb	r3, [r7, #18]
 8006e12:	e011      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e1c:	d10c      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	3320      	adds	r3, #32
 8006e22:	2102      	movs	r1, #2
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 f935 	bl	8007094 <RCCEx_PLLSAI2_Config>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e2e:	7cfb      	ldrb	r3, [r7, #19]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006e34:	7cfb      	ldrb	r3, [r7, #19]
 8006e36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e44:	4b10      	ldr	r3, [pc, #64]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e52:	490d      	ldr	r1, [pc, #52]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e66:	4b08      	ldr	r3, [pc, #32]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e76:	4904      	ldr	r1, [pc, #16]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006e7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40021000 	.word	0x40021000

08006e8c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006e90:	4b05      	ldr	r3, [pc, #20]	@ (8006ea8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a04      	ldr	r2, [pc, #16]	@ (8006ea8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006e96:	f043 0304 	orr.w	r3, r3, #4
 8006e9a:	6013      	str	r3, [r2, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40021000 	.word	0x40021000

08006eac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006eba:	4b75      	ldr	r3, [pc, #468]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d018      	beq.n	8006ef8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006ec6:	4b72      	ldr	r3, [pc, #456]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f003 0203 	and.w	r2, r3, #3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d10d      	bne.n	8006ef2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d009      	beq.n	8006ef2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006ede:	4b6c      	ldr	r3, [pc, #432]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	091b      	lsrs	r3, r3, #4
 8006ee4:	f003 0307 	and.w	r3, r3, #7
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
       ||
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d047      	beq.n	8006f82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
 8006ef6:	e044      	b.n	8006f82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d018      	beq.n	8006f32 <RCCEx_PLLSAI1_Config+0x86>
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d825      	bhi.n	8006f50 <RCCEx_PLLSAI1_Config+0xa4>
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d002      	beq.n	8006f0e <RCCEx_PLLSAI1_Config+0x62>
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d009      	beq.n	8006f20 <RCCEx_PLLSAI1_Config+0x74>
 8006f0c:	e020      	b.n	8006f50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f0e:	4b60      	ldr	r3, [pc, #384]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d11d      	bne.n	8006f56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f1e:	e01a      	b.n	8006f56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f20:	4b5b      	ldr	r3, [pc, #364]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d116      	bne.n	8006f5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f30:	e013      	b.n	8006f5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f32:	4b57      	ldr	r3, [pc, #348]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10f      	bne.n	8006f5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f3e:	4b54      	ldr	r3, [pc, #336]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f4e:	e006      	b.n	8006f5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	73fb      	strb	r3, [r7, #15]
      break;
 8006f54:	e004      	b.n	8006f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f56:	bf00      	nop
 8006f58:	e002      	b.n	8006f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f5a:	bf00      	nop
 8006f5c:	e000      	b.n	8006f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10d      	bne.n	8006f82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f66:	4b4a      	ldr	r3, [pc, #296]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6819      	ldr	r1, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	4944      	ldr	r1, [pc, #272]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d17d      	bne.n	8007084 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006f88:	4b41      	ldr	r3, [pc, #260]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a40      	ldr	r2, [pc, #256]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f94:	f7fb fd1c 	bl	80029d0 <HAL_GetTick>
 8006f98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006f9a:	e009      	b.n	8006fb0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f9c:	f7fb fd18 	bl	80029d0 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d902      	bls.n	8006fb0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	73fb      	strb	r3, [r7, #15]
        break;
 8006fae:	e005      	b.n	8006fbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006fb0:	4b37      	ldr	r3, [pc, #220]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1ef      	bne.n	8006f9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d160      	bne.n	8007084 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d111      	bne.n	8006fec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006fc8:	4b31      	ldr	r3, [pc, #196]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6892      	ldr	r2, [r2, #8]
 8006fd8:	0211      	lsls	r1, r2, #8
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68d2      	ldr	r2, [r2, #12]
 8006fde:	0912      	lsrs	r2, r2, #4
 8006fe0:	0452      	lsls	r2, r2, #17
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	492a      	ldr	r1, [pc, #168]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	610b      	str	r3, [r1, #16]
 8006fea:	e027      	b.n	800703c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d112      	bne.n	8007018 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ff2:	4b27      	ldr	r3, [pc, #156]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006ffa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6892      	ldr	r2, [r2, #8]
 8007002:	0211      	lsls	r1, r2, #8
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6912      	ldr	r2, [r2, #16]
 8007008:	0852      	lsrs	r2, r2, #1
 800700a:	3a01      	subs	r2, #1
 800700c:	0552      	lsls	r2, r2, #21
 800700e:	430a      	orrs	r2, r1
 8007010:	491f      	ldr	r1, [pc, #124]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007012:	4313      	orrs	r3, r2
 8007014:	610b      	str	r3, [r1, #16]
 8007016:	e011      	b.n	800703c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007018:	4b1d      	ldr	r3, [pc, #116]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007020:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6892      	ldr	r2, [r2, #8]
 8007028:	0211      	lsls	r1, r2, #8
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6952      	ldr	r2, [r2, #20]
 800702e:	0852      	lsrs	r2, r2, #1
 8007030:	3a01      	subs	r2, #1
 8007032:	0652      	lsls	r2, r2, #25
 8007034:	430a      	orrs	r2, r1
 8007036:	4916      	ldr	r1, [pc, #88]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007038:	4313      	orrs	r3, r2
 800703a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800703c:	4b14      	ldr	r3, [pc, #80]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a13      	ldr	r2, [pc, #76]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007042:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007046:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007048:	f7fb fcc2 	bl	80029d0 <HAL_GetTick>
 800704c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800704e:	e009      	b.n	8007064 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007050:	f7fb fcbe 	bl	80029d0 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d902      	bls.n	8007064 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	73fb      	strb	r3, [r7, #15]
          break;
 8007062:	e005      	b.n	8007070 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007064:	4b0a      	ldr	r3, [pc, #40]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0ef      	beq.n	8007050 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007076:	4b06      	ldr	r3, [pc, #24]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	4904      	ldr	r1, [pc, #16]	@ (8007090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007080:	4313      	orrs	r3, r2
 8007082:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	40021000 	.word	0x40021000

08007094 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80070a2:	4b6a      	ldr	r3, [pc, #424]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d018      	beq.n	80070e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80070ae:	4b67      	ldr	r3, [pc, #412]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f003 0203 	and.w	r2, r3, #3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d10d      	bne.n	80070da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
       ||
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80070c6:	4b61      	ldr	r3, [pc, #388]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	091b      	lsrs	r3, r3, #4
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
       ||
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d047      	beq.n	800716a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	73fb      	strb	r3, [r7, #15]
 80070de:	e044      	b.n	800716a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d018      	beq.n	800711a <RCCEx_PLLSAI2_Config+0x86>
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d825      	bhi.n	8007138 <RCCEx_PLLSAI2_Config+0xa4>
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d002      	beq.n	80070f6 <RCCEx_PLLSAI2_Config+0x62>
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d009      	beq.n	8007108 <RCCEx_PLLSAI2_Config+0x74>
 80070f4:	e020      	b.n	8007138 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80070f6:	4b55      	ldr	r3, [pc, #340]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d11d      	bne.n	800713e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007106:	e01a      	b.n	800713e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007108:	4b50      	ldr	r3, [pc, #320]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007110:	2b00      	cmp	r3, #0
 8007112:	d116      	bne.n	8007142 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007118:	e013      	b.n	8007142 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800711a:	4b4c      	ldr	r3, [pc, #304]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10f      	bne.n	8007146 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007126:	4b49      	ldr	r3, [pc, #292]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d109      	bne.n	8007146 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007136:	e006      	b.n	8007146 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	73fb      	strb	r3, [r7, #15]
      break;
 800713c:	e004      	b.n	8007148 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800713e:	bf00      	nop
 8007140:	e002      	b.n	8007148 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007142:	bf00      	nop
 8007144:	e000      	b.n	8007148 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007146:	bf00      	nop
    }

    if(status == HAL_OK)
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10d      	bne.n	800716a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800714e:	4b3f      	ldr	r3, [pc, #252]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6819      	ldr	r1, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	3b01      	subs	r3, #1
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	430b      	orrs	r3, r1
 8007164:	4939      	ldr	r1, [pc, #228]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007166:	4313      	orrs	r3, r2
 8007168:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d167      	bne.n	8007240 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007170:	4b36      	ldr	r3, [pc, #216]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a35      	ldr	r2, [pc, #212]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800717a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800717c:	f7fb fc28 	bl	80029d0 <HAL_GetTick>
 8007180:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007182:	e009      	b.n	8007198 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007184:	f7fb fc24 	bl	80029d0 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d902      	bls.n	8007198 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	73fb      	strb	r3, [r7, #15]
        break;
 8007196:	e005      	b.n	80071a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007198:	4b2c      	ldr	r3, [pc, #176]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1ef      	bne.n	8007184 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d14a      	bne.n	8007240 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d111      	bne.n	80071d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80071b0:	4b26      	ldr	r3, [pc, #152]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80071b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6892      	ldr	r2, [r2, #8]
 80071c0:	0211      	lsls	r1, r2, #8
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68d2      	ldr	r2, [r2, #12]
 80071c6:	0912      	lsrs	r2, r2, #4
 80071c8:	0452      	lsls	r2, r2, #17
 80071ca:	430a      	orrs	r2, r1
 80071cc:	491f      	ldr	r1, [pc, #124]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	614b      	str	r3, [r1, #20]
 80071d2:	e011      	b.n	80071f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80071d4:	4b1d      	ldr	r3, [pc, #116]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80071dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6892      	ldr	r2, [r2, #8]
 80071e4:	0211      	lsls	r1, r2, #8
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	6912      	ldr	r2, [r2, #16]
 80071ea:	0852      	lsrs	r2, r2, #1
 80071ec:	3a01      	subs	r2, #1
 80071ee:	0652      	lsls	r2, r2, #25
 80071f0:	430a      	orrs	r2, r1
 80071f2:	4916      	ldr	r1, [pc, #88]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80071f8:	4b14      	ldr	r3, [pc, #80]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a13      	ldr	r2, [pc, #76]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007202:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007204:	f7fb fbe4 	bl	80029d0 <HAL_GetTick>
 8007208:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800720a:	e009      	b.n	8007220 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800720c:	f7fb fbe0 	bl	80029d0 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d902      	bls.n	8007220 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	73fb      	strb	r3, [r7, #15]
          break;
 800721e:	e005      	b.n	800722c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007220:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0ef      	beq.n	800720c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d106      	bne.n	8007240 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007232:	4b06      	ldr	r3, [pc, #24]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007234:	695a      	ldr	r2, [r3, #20]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	4904      	ldr	r1, [pc, #16]	@ (800724c <RCCEx_PLLSAI2_Config+0x1b8>)
 800723c:	4313      	orrs	r3, r2
 800723e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40021000 	.word	0x40021000

08007250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e095      	b.n	800738e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	d108      	bne.n	800727c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007272:	d009      	beq.n	8007288 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	61da      	str	r2, [r3, #28]
 800727a:	e005      	b.n	8007288 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fb f84c 	bl	8002340 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072c8:	d902      	bls.n	80072d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	e002      	b.n	80072d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80072d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80072de:	d007      	beq.n	80072f0 <HAL_SPI_Init+0xa0>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072e8:	d002      	beq.n	80072f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007300:	431a      	orrs	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007332:	ea42 0103 	orr.w	r1, r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	0c1b      	lsrs	r3, r3, #16
 800734c:	f003 0204 	and.w	r2, r3, #4
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	f003 0310 	and.w	r3, r3, #16
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800736c:	ea42 0103 	orr.w	r1, r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b082      	sub	sp, #8
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e040      	b.n	800742a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d106      	bne.n	80073be <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7fb f837 	bl	800242c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2224      	movs	r2, #36	@ 0x24
 80073c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0201 	bic.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fb69 	bl	8007ab4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f8ae 	bl	8007544 <UART_SetConfig>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d101      	bne.n	80073f2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e01b      	b.n	800742a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007400:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007410:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f042 0201 	orr.w	r2, r2, #1
 8007420:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fbe8 	bl	8007bf8 <UART_CheckIdleState>
 8007428:	4603      	mov	r3, r0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b08a      	sub	sp, #40	@ 0x28
 8007436:	af02      	add	r7, sp, #8
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	603b      	str	r3, [r7, #0]
 800743e:	4613      	mov	r3, r2
 8007440:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007446:	2b20      	cmp	r3, #32
 8007448:	d177      	bne.n	800753a <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_UART_Transmit+0x24>
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e070      	b.n	800753c <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2221      	movs	r2, #33	@ 0x21
 8007466:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007468:	f7fb fab2 	bl	80029d0 <HAL_GetTick>
 800746c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	88fa      	ldrh	r2, [r7, #6]
 8007472:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	88fa      	ldrh	r2, [r7, #6]
 800747a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007486:	d108      	bne.n	800749a <HAL_UART_Transmit+0x68>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d104      	bne.n	800749a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007490:	2300      	movs	r3, #0
 8007492:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	e003      	b.n	80074a2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074a2:	e02f      	b.n	8007504 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2200      	movs	r2, #0
 80074ac:	2180      	movs	r1, #128	@ 0x80
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 fc4a 	bl	8007d48 <UART_WaitOnFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e03b      	b.n	800753c <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10b      	bne.n	80074e2 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	881a      	ldrh	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074d6:	b292      	uxth	r2, r2
 80074d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	3302      	adds	r3, #2
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	e007      	b.n	80074f2 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	781a      	ldrb	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	3301      	adds	r3, #1
 80074f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1c9      	bne.n	80074a4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2200      	movs	r2, #0
 8007518:	2140      	movs	r1, #64	@ 0x40
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 fc14 	bl	8007d48 <UART_WaitOnFlagUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d004      	beq.n	8007530 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2220      	movs	r2, #32
 800752a:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e005      	b.n	800753c <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2220      	movs	r2, #32
 8007534:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	e000      	b.n	800753c <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800753a:	2302      	movs	r3, #2
  }
}
 800753c:	4618      	mov	r0, r3
 800753e:	3720      	adds	r7, #32
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007548:	b08a      	sub	sp, #40	@ 0x28
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	431a      	orrs	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	431a      	orrs	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	4313      	orrs	r3, r2
 800756a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	4ba4      	ldr	r3, [pc, #656]	@ (8007804 <UART_SetConfig+0x2c0>)
 8007574:	4013      	ands	r3, r2
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800757c:	430b      	orrs	r3, r1
 800757e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a99      	ldr	r2, [pc, #612]	@ (8007808 <UART_SetConfig+0x2c4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d004      	beq.n	80075b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ac:	4313      	orrs	r3, r2
 80075ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c0:	430a      	orrs	r2, r1
 80075c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a90      	ldr	r2, [pc, #576]	@ (800780c <UART_SetConfig+0x2c8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d126      	bne.n	800761c <UART_SetConfig+0xd8>
 80075ce:	4b90      	ldr	r3, [pc, #576]	@ (8007810 <UART_SetConfig+0x2cc>)
 80075d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d4:	f003 0303 	and.w	r3, r3, #3
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d81b      	bhi.n	8007614 <UART_SetConfig+0xd0>
 80075dc:	a201      	add	r2, pc, #4	@ (adr r2, 80075e4 <UART_SetConfig+0xa0>)
 80075de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e2:	bf00      	nop
 80075e4:	080075f5 	.word	0x080075f5
 80075e8:	08007605 	.word	0x08007605
 80075ec:	080075fd 	.word	0x080075fd
 80075f0:	0800760d 	.word	0x0800760d
 80075f4:	2301      	movs	r3, #1
 80075f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075fa:	e116      	b.n	800782a <UART_SetConfig+0x2e6>
 80075fc:	2302      	movs	r3, #2
 80075fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007602:	e112      	b.n	800782a <UART_SetConfig+0x2e6>
 8007604:	2304      	movs	r3, #4
 8007606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800760a:	e10e      	b.n	800782a <UART_SetConfig+0x2e6>
 800760c:	2308      	movs	r3, #8
 800760e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007612:	e10a      	b.n	800782a <UART_SetConfig+0x2e6>
 8007614:	2310      	movs	r3, #16
 8007616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800761a:	e106      	b.n	800782a <UART_SetConfig+0x2e6>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a7c      	ldr	r2, [pc, #496]	@ (8007814 <UART_SetConfig+0x2d0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d138      	bne.n	8007698 <UART_SetConfig+0x154>
 8007626:	4b7a      	ldr	r3, [pc, #488]	@ (8007810 <UART_SetConfig+0x2cc>)
 8007628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762c:	f003 030c 	and.w	r3, r3, #12
 8007630:	2b0c      	cmp	r3, #12
 8007632:	d82d      	bhi.n	8007690 <UART_SetConfig+0x14c>
 8007634:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <UART_SetConfig+0xf8>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	08007671 	.word	0x08007671
 8007640:	08007691 	.word	0x08007691
 8007644:	08007691 	.word	0x08007691
 8007648:	08007691 	.word	0x08007691
 800764c:	08007681 	.word	0x08007681
 8007650:	08007691 	.word	0x08007691
 8007654:	08007691 	.word	0x08007691
 8007658:	08007691 	.word	0x08007691
 800765c:	08007679 	.word	0x08007679
 8007660:	08007691 	.word	0x08007691
 8007664:	08007691 	.word	0x08007691
 8007668:	08007691 	.word	0x08007691
 800766c:	08007689 	.word	0x08007689
 8007670:	2300      	movs	r3, #0
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007676:	e0d8      	b.n	800782a <UART_SetConfig+0x2e6>
 8007678:	2302      	movs	r3, #2
 800767a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800767e:	e0d4      	b.n	800782a <UART_SetConfig+0x2e6>
 8007680:	2304      	movs	r3, #4
 8007682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007686:	e0d0      	b.n	800782a <UART_SetConfig+0x2e6>
 8007688:	2308      	movs	r3, #8
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768e:	e0cc      	b.n	800782a <UART_SetConfig+0x2e6>
 8007690:	2310      	movs	r3, #16
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007696:	e0c8      	b.n	800782a <UART_SetConfig+0x2e6>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a5e      	ldr	r2, [pc, #376]	@ (8007818 <UART_SetConfig+0x2d4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d125      	bne.n	80076ee <UART_SetConfig+0x1aa>
 80076a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007810 <UART_SetConfig+0x2cc>)
 80076a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076ac:	2b30      	cmp	r3, #48	@ 0x30
 80076ae:	d016      	beq.n	80076de <UART_SetConfig+0x19a>
 80076b0:	2b30      	cmp	r3, #48	@ 0x30
 80076b2:	d818      	bhi.n	80076e6 <UART_SetConfig+0x1a2>
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d00a      	beq.n	80076ce <UART_SetConfig+0x18a>
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	d814      	bhi.n	80076e6 <UART_SetConfig+0x1a2>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <UART_SetConfig+0x182>
 80076c0:	2b10      	cmp	r3, #16
 80076c2:	d008      	beq.n	80076d6 <UART_SetConfig+0x192>
 80076c4:	e00f      	b.n	80076e6 <UART_SetConfig+0x1a2>
 80076c6:	2300      	movs	r3, #0
 80076c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076cc:	e0ad      	b.n	800782a <UART_SetConfig+0x2e6>
 80076ce:	2302      	movs	r3, #2
 80076d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076d4:	e0a9      	b.n	800782a <UART_SetConfig+0x2e6>
 80076d6:	2304      	movs	r3, #4
 80076d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076dc:	e0a5      	b.n	800782a <UART_SetConfig+0x2e6>
 80076de:	2308      	movs	r3, #8
 80076e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e4:	e0a1      	b.n	800782a <UART_SetConfig+0x2e6>
 80076e6:	2310      	movs	r3, #16
 80076e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ec:	e09d      	b.n	800782a <UART_SetConfig+0x2e6>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a4a      	ldr	r2, [pc, #296]	@ (800781c <UART_SetConfig+0x2d8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d125      	bne.n	8007744 <UART_SetConfig+0x200>
 80076f8:	4b45      	ldr	r3, [pc, #276]	@ (8007810 <UART_SetConfig+0x2cc>)
 80076fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007702:	2bc0      	cmp	r3, #192	@ 0xc0
 8007704:	d016      	beq.n	8007734 <UART_SetConfig+0x1f0>
 8007706:	2bc0      	cmp	r3, #192	@ 0xc0
 8007708:	d818      	bhi.n	800773c <UART_SetConfig+0x1f8>
 800770a:	2b80      	cmp	r3, #128	@ 0x80
 800770c:	d00a      	beq.n	8007724 <UART_SetConfig+0x1e0>
 800770e:	2b80      	cmp	r3, #128	@ 0x80
 8007710:	d814      	bhi.n	800773c <UART_SetConfig+0x1f8>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <UART_SetConfig+0x1d8>
 8007716:	2b40      	cmp	r3, #64	@ 0x40
 8007718:	d008      	beq.n	800772c <UART_SetConfig+0x1e8>
 800771a:	e00f      	b.n	800773c <UART_SetConfig+0x1f8>
 800771c:	2300      	movs	r3, #0
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007722:	e082      	b.n	800782a <UART_SetConfig+0x2e6>
 8007724:	2302      	movs	r3, #2
 8007726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800772a:	e07e      	b.n	800782a <UART_SetConfig+0x2e6>
 800772c:	2304      	movs	r3, #4
 800772e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007732:	e07a      	b.n	800782a <UART_SetConfig+0x2e6>
 8007734:	2308      	movs	r3, #8
 8007736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800773a:	e076      	b.n	800782a <UART_SetConfig+0x2e6>
 800773c:	2310      	movs	r3, #16
 800773e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007742:	e072      	b.n	800782a <UART_SetConfig+0x2e6>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a35      	ldr	r2, [pc, #212]	@ (8007820 <UART_SetConfig+0x2dc>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d12a      	bne.n	80077a4 <UART_SetConfig+0x260>
 800774e:	4b30      	ldr	r3, [pc, #192]	@ (8007810 <UART_SetConfig+0x2cc>)
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007758:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800775c:	d01a      	beq.n	8007794 <UART_SetConfig+0x250>
 800775e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007762:	d81b      	bhi.n	800779c <UART_SetConfig+0x258>
 8007764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007768:	d00c      	beq.n	8007784 <UART_SetConfig+0x240>
 800776a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800776e:	d815      	bhi.n	800779c <UART_SetConfig+0x258>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <UART_SetConfig+0x238>
 8007774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007778:	d008      	beq.n	800778c <UART_SetConfig+0x248>
 800777a:	e00f      	b.n	800779c <UART_SetConfig+0x258>
 800777c:	2300      	movs	r3, #0
 800777e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007782:	e052      	b.n	800782a <UART_SetConfig+0x2e6>
 8007784:	2302      	movs	r3, #2
 8007786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800778a:	e04e      	b.n	800782a <UART_SetConfig+0x2e6>
 800778c:	2304      	movs	r3, #4
 800778e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007792:	e04a      	b.n	800782a <UART_SetConfig+0x2e6>
 8007794:	2308      	movs	r3, #8
 8007796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800779a:	e046      	b.n	800782a <UART_SetConfig+0x2e6>
 800779c:	2310      	movs	r3, #16
 800779e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077a2:	e042      	b.n	800782a <UART_SetConfig+0x2e6>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a17      	ldr	r2, [pc, #92]	@ (8007808 <UART_SetConfig+0x2c4>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d13a      	bne.n	8007824 <UART_SetConfig+0x2e0>
 80077ae:	4b18      	ldr	r3, [pc, #96]	@ (8007810 <UART_SetConfig+0x2cc>)
 80077b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077bc:	d01a      	beq.n	80077f4 <UART_SetConfig+0x2b0>
 80077be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077c2:	d81b      	bhi.n	80077fc <UART_SetConfig+0x2b8>
 80077c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077c8:	d00c      	beq.n	80077e4 <UART_SetConfig+0x2a0>
 80077ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077ce:	d815      	bhi.n	80077fc <UART_SetConfig+0x2b8>
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <UART_SetConfig+0x298>
 80077d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077d8:	d008      	beq.n	80077ec <UART_SetConfig+0x2a8>
 80077da:	e00f      	b.n	80077fc <UART_SetConfig+0x2b8>
 80077dc:	2300      	movs	r3, #0
 80077de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077e2:	e022      	b.n	800782a <UART_SetConfig+0x2e6>
 80077e4:	2302      	movs	r3, #2
 80077e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ea:	e01e      	b.n	800782a <UART_SetConfig+0x2e6>
 80077ec:	2304      	movs	r3, #4
 80077ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077f2:	e01a      	b.n	800782a <UART_SetConfig+0x2e6>
 80077f4:	2308      	movs	r3, #8
 80077f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fa:	e016      	b.n	800782a <UART_SetConfig+0x2e6>
 80077fc:	2310      	movs	r3, #16
 80077fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007802:	e012      	b.n	800782a <UART_SetConfig+0x2e6>
 8007804:	efff69f3 	.word	0xefff69f3
 8007808:	40008000 	.word	0x40008000
 800780c:	40013800 	.word	0x40013800
 8007810:	40021000 	.word	0x40021000
 8007814:	40004400 	.word	0x40004400
 8007818:	40004800 	.word	0x40004800
 800781c:	40004c00 	.word	0x40004c00
 8007820:	40005000 	.word	0x40005000
 8007824:	2310      	movs	r3, #16
 8007826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a9f      	ldr	r2, [pc, #636]	@ (8007aac <UART_SetConfig+0x568>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d17a      	bne.n	800792a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007834:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007838:	2b08      	cmp	r3, #8
 800783a:	d824      	bhi.n	8007886 <UART_SetConfig+0x342>
 800783c:	a201      	add	r2, pc, #4	@ (adr r2, 8007844 <UART_SetConfig+0x300>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	08007869 	.word	0x08007869
 8007848:	08007887 	.word	0x08007887
 800784c:	08007871 	.word	0x08007871
 8007850:	08007887 	.word	0x08007887
 8007854:	08007877 	.word	0x08007877
 8007858:	08007887 	.word	0x08007887
 800785c:	08007887 	.word	0x08007887
 8007860:	08007887 	.word	0x08007887
 8007864:	0800787f 	.word	0x0800787f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007868:	f7fe ff9a 	bl	80067a0 <HAL_RCC_GetPCLK1Freq>
 800786c:	61f8      	str	r0, [r7, #28]
        break;
 800786e:	e010      	b.n	8007892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007870:	4b8f      	ldr	r3, [pc, #572]	@ (8007ab0 <UART_SetConfig+0x56c>)
 8007872:	61fb      	str	r3, [r7, #28]
        break;
 8007874:	e00d      	b.n	8007892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007876:	f7fe fefb 	bl	8006670 <HAL_RCC_GetSysClockFreq>
 800787a:	61f8      	str	r0, [r7, #28]
        break;
 800787c:	e009      	b.n	8007892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800787e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007882:	61fb      	str	r3, [r7, #28]
        break;
 8007884:	e005      	b.n	8007892 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007890:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 80fb 	beq.w	8007a90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	4613      	mov	r3, r2
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	4413      	add	r3, r2
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d305      	bcc.n	80078b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d903      	bls.n	80078be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80078bc:	e0e8      	b.n	8007a90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	2200      	movs	r2, #0
 80078c2:	461c      	mov	r4, r3
 80078c4:	4615      	mov	r5, r2
 80078c6:	f04f 0200 	mov.w	r2, #0
 80078ca:	f04f 0300 	mov.w	r3, #0
 80078ce:	022b      	lsls	r3, r5, #8
 80078d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80078d4:	0222      	lsls	r2, r4, #8
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	6849      	ldr	r1, [r1, #4]
 80078da:	0849      	lsrs	r1, r1, #1
 80078dc:	2000      	movs	r0, #0
 80078de:	4688      	mov	r8, r1
 80078e0:	4681      	mov	r9, r0
 80078e2:	eb12 0a08 	adds.w	sl, r2, r8
 80078e6:	eb43 0b09 	adc.w	fp, r3, r9
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	603b      	str	r3, [r7, #0]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f8:	4650      	mov	r0, sl
 80078fa:	4659      	mov	r1, fp
 80078fc:	f7f9 f9c4 	bl	8000c88 <__aeabi_uldivmod>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4613      	mov	r3, r2
 8007906:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800790e:	d308      	bcc.n	8007922 <UART_SetConfig+0x3de>
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007916:	d204      	bcs.n	8007922 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	60da      	str	r2, [r3, #12]
 8007920:	e0b6      	b.n	8007a90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007928:	e0b2      	b.n	8007a90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007932:	d15e      	bne.n	80079f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007934:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007938:	2b08      	cmp	r3, #8
 800793a:	d828      	bhi.n	800798e <UART_SetConfig+0x44a>
 800793c:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <UART_SetConfig+0x400>)
 800793e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007942:	bf00      	nop
 8007944:	08007969 	.word	0x08007969
 8007948:	08007971 	.word	0x08007971
 800794c:	08007979 	.word	0x08007979
 8007950:	0800798f 	.word	0x0800798f
 8007954:	0800797f 	.word	0x0800797f
 8007958:	0800798f 	.word	0x0800798f
 800795c:	0800798f 	.word	0x0800798f
 8007960:	0800798f 	.word	0x0800798f
 8007964:	08007987 	.word	0x08007987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007968:	f7fe ff1a 	bl	80067a0 <HAL_RCC_GetPCLK1Freq>
 800796c:	61f8      	str	r0, [r7, #28]
        break;
 800796e:	e014      	b.n	800799a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007970:	f7fe ff2c 	bl	80067cc <HAL_RCC_GetPCLK2Freq>
 8007974:	61f8      	str	r0, [r7, #28]
        break;
 8007976:	e010      	b.n	800799a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007978:	4b4d      	ldr	r3, [pc, #308]	@ (8007ab0 <UART_SetConfig+0x56c>)
 800797a:	61fb      	str	r3, [r7, #28]
        break;
 800797c:	e00d      	b.n	800799a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797e:	f7fe fe77 	bl	8006670 <HAL_RCC_GetSysClockFreq>
 8007982:	61f8      	str	r0, [r7, #28]
        break;
 8007984:	e009      	b.n	800799a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800798a:	61fb      	str	r3, [r7, #28]
        break;
 800798c:	e005      	b.n	800799a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d077      	beq.n	8007a90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	005a      	lsls	r2, r3, #1
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	085b      	lsrs	r3, r3, #1
 80079aa:	441a      	add	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b0f      	cmp	r3, #15
 80079ba:	d916      	bls.n	80079ea <UART_SetConfig+0x4a6>
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079c2:	d212      	bcs.n	80079ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f023 030f 	bic.w	r3, r3, #15
 80079cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	b29a      	uxth	r2, r3
 80079da:	8afb      	ldrh	r3, [r7, #22]
 80079dc:	4313      	orrs	r3, r2
 80079de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	8afa      	ldrh	r2, [r7, #22]
 80079e6:	60da      	str	r2, [r3, #12]
 80079e8:	e052      	b.n	8007a90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80079f0:	e04e      	b.n	8007a90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d827      	bhi.n	8007a4a <UART_SetConfig+0x506>
 80079fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007a00 <UART_SetConfig+0x4bc>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a25 	.word	0x08007a25
 8007a04:	08007a2d 	.word	0x08007a2d
 8007a08:	08007a35 	.word	0x08007a35
 8007a0c:	08007a4b 	.word	0x08007a4b
 8007a10:	08007a3b 	.word	0x08007a3b
 8007a14:	08007a4b 	.word	0x08007a4b
 8007a18:	08007a4b 	.word	0x08007a4b
 8007a1c:	08007a4b 	.word	0x08007a4b
 8007a20:	08007a43 	.word	0x08007a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a24:	f7fe febc 	bl	80067a0 <HAL_RCC_GetPCLK1Freq>
 8007a28:	61f8      	str	r0, [r7, #28]
        break;
 8007a2a:	e014      	b.n	8007a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a2c:	f7fe fece 	bl	80067cc <HAL_RCC_GetPCLK2Freq>
 8007a30:	61f8      	str	r0, [r7, #28]
        break;
 8007a32:	e010      	b.n	8007a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a34:	4b1e      	ldr	r3, [pc, #120]	@ (8007ab0 <UART_SetConfig+0x56c>)
 8007a36:	61fb      	str	r3, [r7, #28]
        break;
 8007a38:	e00d      	b.n	8007a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a3a:	f7fe fe19 	bl	8006670 <HAL_RCC_GetSysClockFreq>
 8007a3e:	61f8      	str	r0, [r7, #28]
        break;
 8007a40:	e009      	b.n	8007a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a46:	61fb      	str	r3, [r7, #28]
        break;
 8007a48:	e005      	b.n	8007a56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a54:	bf00      	nop
    }

    if (pclk != 0U)
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d019      	beq.n	8007a90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	085a      	lsrs	r2, r3, #1
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	441a      	add	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	2b0f      	cmp	r3, #15
 8007a74:	d909      	bls.n	8007a8a <UART_SetConfig+0x546>
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a7c:	d205      	bcs.n	8007a8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60da      	str	r2, [r3, #12]
 8007a88:	e002      	b.n	8007a90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007a9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3728      	adds	r7, #40	@ 0x28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aaa:	bf00      	nop
 8007aac:	40008000 	.word	0x40008000
 8007ab0:	00f42400 	.word	0x00f42400

08007ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00a      	beq.n	8007ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00a      	beq.n	8007b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b26:	f003 0304 	and.w	r3, r3, #4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b48:	f003 0310 	and.w	r3, r3, #16
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00a      	beq.n	8007b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01a      	beq.n	8007bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bb2:	d10a      	bne.n	8007bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	605a      	str	r2, [r3, #4]
  }
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b098      	sub	sp, #96	@ 0x60
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c08:	f7fa fee2 	bl	80029d0 <HAL_GetTick>
 8007c0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0308 	and.w	r3, r3, #8
 8007c18:	2b08      	cmp	r3, #8
 8007c1a:	d12e      	bne.n	8007c7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c24:	2200      	movs	r2, #0
 8007c26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f88c 	bl	8007d48 <UART_WaitOnFlagUntilTimeout>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d021      	beq.n	8007c7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3e:	e853 3f00 	ldrex	r3, [r3]
 8007c42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	461a      	mov	r2, r3
 8007c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e6      	bne.n	8007c36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e062      	b.n	8007d40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d149      	bne.n	8007d1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c90:	2200      	movs	r2, #0
 8007c92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f856 	bl	8007d48 <UART_WaitOnFlagUntilTimeout>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d03c      	beq.n	8007d1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	623b      	str	r3, [r7, #32]
   return(result);
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e6      	bne.n	8007ca2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	e853 3f00 	ldrex	r3, [r3]
 8007ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 0301 	bic.w	r3, r3, #1
 8007cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cf4:	61fa      	str	r2, [r7, #28]
 8007cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	69b9      	ldr	r1, [r7, #24]
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	617b      	str	r3, [r7, #20]
   return(result);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e5      	bne.n	8007cd4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e011      	b.n	8007d40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3758      	adds	r7, #88	@ 0x58
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d58:	e04f      	b.n	8007dfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d60:	d04b      	beq.n	8007dfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d62:	f7fa fe35 	bl	80029d0 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d302      	bcc.n	8007d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e04e      	b.n	8007e1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0304 	and.w	r3, r3, #4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d037      	beq.n	8007dfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b80      	cmp	r3, #128	@ 0x80
 8007d8e:	d034      	beq.n	8007dfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b40      	cmp	r3, #64	@ 0x40
 8007d94:	d031      	beq.n	8007dfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	f003 0308 	and.w	r3, r3, #8
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	d110      	bne.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2208      	movs	r2, #8
 8007daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f838 	bl	8007e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2208      	movs	r2, #8
 8007db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e029      	b.n	8007e1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dd4:	d111      	bne.n	8007dfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f81e 	bl	8007e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e00f      	b.n	8007e1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69da      	ldr	r2, [r3, #28]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	4013      	ands	r3, r2
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	bf0c      	ite	eq
 8007e0a:	2301      	moveq	r3, #1
 8007e0c:	2300      	movne	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	461a      	mov	r2, r3
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d0a0      	beq.n	8007d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b095      	sub	sp, #84	@ 0x54
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e6      	bne.n	8007e2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f023 0301 	bic.w	r3, r3, #1
 8007e72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e5      	bne.n	8007e5c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d118      	bne.n	8007eca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f023 0310 	bic.w	r3, r3, #16
 8007eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eb6:	61bb      	str	r3, [r7, #24]
 8007eb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6979      	ldr	r1, [r7, #20]
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e6      	bne.n	8007e98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007ede:	bf00      	nop
 8007ee0:	3754      	adds	r7, #84	@ 0x54
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007eea:	b084      	sub	sp, #16
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	f107 001c 	add.w	r0, r7, #28
 8007ef8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fa69 	bl	80083e0 <USB_CoreReset>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007f12:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f26:	e005      	b.n	8007f34 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f40:	b004      	add	sp, #16
 8007f42:	4770      	bx	lr

08007f44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f023 0201 	bic.w	r2, r3, #1
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f82:	78fb      	ldrb	r3, [r7, #3]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d115      	bne.n	8007fb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f94:	200a      	movs	r0, #10
 8007f96:	f7fa fd27 	bl	80029e8 <HAL_Delay>
      ms += 10U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	330a      	adds	r3, #10
 8007f9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fa0f 	bl	80083c4 <USB_GetMode>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d01e      	beq.n	8007fea <USB_SetCurrentMode+0x84>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2bc7      	cmp	r3, #199	@ 0xc7
 8007fb0:	d9f0      	bls.n	8007f94 <USB_SetCurrentMode+0x2e>
 8007fb2:	e01a      	b.n	8007fea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d115      	bne.n	8007fe6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fc6:	200a      	movs	r0, #10
 8007fc8:	f7fa fd0e 	bl	80029e8 <HAL_Delay>
      ms += 10U;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	330a      	adds	r3, #10
 8007fd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f9f6 	bl	80083c4 <USB_GetMode>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d005      	beq.n	8007fea <USB_SetCurrentMode+0x84>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2bc7      	cmp	r3, #199	@ 0xc7
 8007fe2:	d9f0      	bls.n	8007fc6 <USB_SetCurrentMode+0x60>
 8007fe4:	e001      	b.n	8007fea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e005      	b.n	8007ff6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2bc8      	cmp	r3, #200	@ 0xc8
 8007fee:	d101      	bne.n	8007ff4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e000      	b.n	8007ff6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008000:	b084      	sub	sp, #16
 8008002:	b580      	push	{r7, lr}
 8008004:	b086      	sub	sp, #24
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800800e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	e009      	b.n	8008034 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	3340      	adds	r3, #64	@ 0x40
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	2200      	movs	r2, #0
 800802c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	3301      	adds	r3, #1
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	2b0e      	cmp	r3, #14
 8008038:	d9f2      	bls.n	8008020 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800803a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800803e:	2b00      	cmp	r3, #0
 8008040:	d11c      	bne.n	800807c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008050:	f043 0302 	orr.w	r3, r3, #2
 8008054:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	e005      	b.n	8008088 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008080:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800808e:	461a      	mov	r2, r3
 8008090:	2300      	movs	r3, #0
 8008092:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008094:	2103      	movs	r1, #3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f95a 	bl	8008350 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800809c:	2110      	movs	r1, #16
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f8f6 	bl	8008290 <USB_FlushTxFifo>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f920 	bl	80082f4 <USB_FlushRxFifo>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c4:	461a      	mov	r2, r3
 80080c6:	2300      	movs	r3, #0
 80080c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080d0:	461a      	mov	r2, r3
 80080d2:	2300      	movs	r3, #0
 80080d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080dc:	461a      	mov	r2, r3
 80080de:	2300      	movs	r3, #0
 80080e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080e2:	2300      	movs	r3, #0
 80080e4:	613b      	str	r3, [r7, #16]
 80080e6:	e043      	b.n	8008170 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080fe:	d118      	bne.n	8008132 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008112:	461a      	mov	r2, r3
 8008114:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	e013      	b.n	8008144 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008128:	461a      	mov	r2, r3
 800812a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	e008      	b.n	8008144 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813e:	461a      	mov	r2, r3
 8008140:	2300      	movs	r3, #0
 8008142:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008150:	461a      	mov	r2, r3
 8008152:	2300      	movs	r3, #0
 8008154:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008162:	461a      	mov	r2, r3
 8008164:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008168:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	3301      	adds	r3, #1
 800816e:	613b      	str	r3, [r7, #16]
 8008170:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008174:	461a      	mov	r2, r3
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	4293      	cmp	r3, r2
 800817a:	d3b5      	bcc.n	80080e8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800817c:	2300      	movs	r3, #0
 800817e:	613b      	str	r3, [r7, #16]
 8008180:	e043      	b.n	800820a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008194:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008198:	d118      	bne.n	80081cc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ac:	461a      	mov	r2, r3
 80081ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	e013      	b.n	80081de <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c2:	461a      	mov	r2, r3
 80081c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	e008      	b.n	80081de <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d8:	461a      	mov	r2, r3
 80081da:	2300      	movs	r3, #0
 80081dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ea:	461a      	mov	r2, r3
 80081ec:	2300      	movs	r3, #0
 80081ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fc:	461a      	mov	r2, r3
 80081fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008202:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	3301      	adds	r3, #1
 8008208:	613b      	str	r3, [r7, #16]
 800820a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800820e:	461a      	mov	r2, r3
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	4293      	cmp	r3, r2
 8008214:	d3b5      	bcc.n	8008182 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008228:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008236:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	f043 0210 	orr.w	r2, r3, #16
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	699a      	ldr	r2, [r3, #24]
 8008248:	4b10      	ldr	r3, [pc, #64]	@ (800828c <USB_DevInit+0x28c>)
 800824a:	4313      	orrs	r3, r2
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008250:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	f043 0208 	orr.w	r2, r3, #8
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008264:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008268:	2b01      	cmp	r3, #1
 800826a:	d107      	bne.n	800827c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008274:	f043 0304 	orr.w	r3, r3, #4
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800827c:	7dfb      	ldrb	r3, [r7, #23]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008288:	b004      	add	sp, #16
 800828a:	4770      	bx	lr
 800828c:	803c3800 	.word	0x803c3800

08008290 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3301      	adds	r3, #1
 80082a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082aa:	d901      	bls.n	80082b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e01b      	b.n	80082e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	daf2      	bge.n	800829e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	019b      	lsls	r3, r3, #6
 80082c0:	f043 0220 	orr.w	r2, r3, #32
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3301      	adds	r3, #1
 80082cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082d4:	d901      	bls.n	80082da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e006      	b.n	80082e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d0f0      	beq.n	80082c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3301      	adds	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800830c:	d901      	bls.n	8008312 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e018      	b.n	8008344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	daf2      	bge.n	8008300 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2210      	movs	r2, #16
 8008322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3301      	adds	r3, #1
 8008328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008330:	d901      	bls.n	8008336 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e006      	b.n	8008344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	2b10      	cmp	r3, #16
 8008340:	d0f0      	beq.n	8008324 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	68f9      	ldr	r1, [r7, #12]
 800836c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008370:	4313      	orrs	r3, r2
 8008372:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008382:	b480      	push	{r7}
 8008384:	b085      	sub	sp, #20
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800839c:	f023 0303 	bic.w	r3, r3, #3
 80083a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083b0:	f043 0302 	orr.w	r3, r3, #2
 80083b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	f003 0301 	and.w	r3, r3, #1
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3301      	adds	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083f8:	d901      	bls.n	80083fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e01b      	b.n	8008436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	daf2      	bge.n	80083ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f043 0201 	orr.w	r2, r3, #1
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3301      	adds	r3, #1
 800841a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008422:	d901      	bls.n	8008428 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e006      	b.n	8008436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b01      	cmp	r3, #1
 8008432:	d0f0      	beq.n	8008416 <USB_CoreReset+0x36>

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <__cvt>:
 8008442:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008446:	ec57 6b10 	vmov	r6, r7, d0
 800844a:	2f00      	cmp	r7, #0
 800844c:	460c      	mov	r4, r1
 800844e:	4619      	mov	r1, r3
 8008450:	463b      	mov	r3, r7
 8008452:	bfbb      	ittet	lt
 8008454:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008458:	461f      	movlt	r7, r3
 800845a:	2300      	movge	r3, #0
 800845c:	232d      	movlt	r3, #45	@ 0x2d
 800845e:	700b      	strb	r3, [r1, #0]
 8008460:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008462:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008466:	4691      	mov	r9, r2
 8008468:	f023 0820 	bic.w	r8, r3, #32
 800846c:	bfbc      	itt	lt
 800846e:	4632      	movlt	r2, r6
 8008470:	4616      	movlt	r6, r2
 8008472:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008476:	d005      	beq.n	8008484 <__cvt+0x42>
 8008478:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800847c:	d100      	bne.n	8008480 <__cvt+0x3e>
 800847e:	3401      	adds	r4, #1
 8008480:	2102      	movs	r1, #2
 8008482:	e000      	b.n	8008486 <__cvt+0x44>
 8008484:	2103      	movs	r1, #3
 8008486:	ab03      	add	r3, sp, #12
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	ab02      	add	r3, sp, #8
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	ec47 6b10 	vmov	d0, r6, r7
 8008492:	4653      	mov	r3, sl
 8008494:	4622      	mov	r2, r4
 8008496:	f001 f8a7 	bl	80095e8 <_dtoa_r>
 800849a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800849e:	4605      	mov	r5, r0
 80084a0:	d119      	bne.n	80084d6 <__cvt+0x94>
 80084a2:	f019 0f01 	tst.w	r9, #1
 80084a6:	d00e      	beq.n	80084c6 <__cvt+0x84>
 80084a8:	eb00 0904 	add.w	r9, r0, r4
 80084ac:	2200      	movs	r2, #0
 80084ae:	2300      	movs	r3, #0
 80084b0:	4630      	mov	r0, r6
 80084b2:	4639      	mov	r1, r7
 80084b4:	f7f8 fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 80084b8:	b108      	cbz	r0, 80084be <__cvt+0x7c>
 80084ba:	f8cd 900c 	str.w	r9, [sp, #12]
 80084be:	2230      	movs	r2, #48	@ 0x30
 80084c0:	9b03      	ldr	r3, [sp, #12]
 80084c2:	454b      	cmp	r3, r9
 80084c4:	d31e      	bcc.n	8008504 <__cvt+0xc2>
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084ca:	1b5b      	subs	r3, r3, r5
 80084cc:	4628      	mov	r0, r5
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	b004      	add	sp, #16
 80084d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80084da:	eb00 0904 	add.w	r9, r0, r4
 80084de:	d1e5      	bne.n	80084ac <__cvt+0x6a>
 80084e0:	7803      	ldrb	r3, [r0, #0]
 80084e2:	2b30      	cmp	r3, #48	@ 0x30
 80084e4:	d10a      	bne.n	80084fc <__cvt+0xba>
 80084e6:	2200      	movs	r2, #0
 80084e8:	2300      	movs	r3, #0
 80084ea:	4630      	mov	r0, r6
 80084ec:	4639      	mov	r1, r7
 80084ee:	f7f8 faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80084f2:	b918      	cbnz	r0, 80084fc <__cvt+0xba>
 80084f4:	f1c4 0401 	rsb	r4, r4, #1
 80084f8:	f8ca 4000 	str.w	r4, [sl]
 80084fc:	f8da 3000 	ldr.w	r3, [sl]
 8008500:	4499      	add	r9, r3
 8008502:	e7d3      	b.n	80084ac <__cvt+0x6a>
 8008504:	1c59      	adds	r1, r3, #1
 8008506:	9103      	str	r1, [sp, #12]
 8008508:	701a      	strb	r2, [r3, #0]
 800850a:	e7d9      	b.n	80084c0 <__cvt+0x7e>

0800850c <__exponent>:
 800850c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800850e:	2900      	cmp	r1, #0
 8008510:	bfba      	itte	lt
 8008512:	4249      	neglt	r1, r1
 8008514:	232d      	movlt	r3, #45	@ 0x2d
 8008516:	232b      	movge	r3, #43	@ 0x2b
 8008518:	2909      	cmp	r1, #9
 800851a:	7002      	strb	r2, [r0, #0]
 800851c:	7043      	strb	r3, [r0, #1]
 800851e:	dd29      	ble.n	8008574 <__exponent+0x68>
 8008520:	f10d 0307 	add.w	r3, sp, #7
 8008524:	461d      	mov	r5, r3
 8008526:	270a      	movs	r7, #10
 8008528:	461a      	mov	r2, r3
 800852a:	fbb1 f6f7 	udiv	r6, r1, r7
 800852e:	fb07 1416 	mls	r4, r7, r6, r1
 8008532:	3430      	adds	r4, #48	@ 0x30
 8008534:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008538:	460c      	mov	r4, r1
 800853a:	2c63      	cmp	r4, #99	@ 0x63
 800853c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008540:	4631      	mov	r1, r6
 8008542:	dcf1      	bgt.n	8008528 <__exponent+0x1c>
 8008544:	3130      	adds	r1, #48	@ 0x30
 8008546:	1e94      	subs	r4, r2, #2
 8008548:	f803 1c01 	strb.w	r1, [r3, #-1]
 800854c:	1c41      	adds	r1, r0, #1
 800854e:	4623      	mov	r3, r4
 8008550:	42ab      	cmp	r3, r5
 8008552:	d30a      	bcc.n	800856a <__exponent+0x5e>
 8008554:	f10d 0309 	add.w	r3, sp, #9
 8008558:	1a9b      	subs	r3, r3, r2
 800855a:	42ac      	cmp	r4, r5
 800855c:	bf88      	it	hi
 800855e:	2300      	movhi	r3, #0
 8008560:	3302      	adds	r3, #2
 8008562:	4403      	add	r3, r0
 8008564:	1a18      	subs	r0, r3, r0
 8008566:	b003      	add	sp, #12
 8008568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800856a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800856e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008572:	e7ed      	b.n	8008550 <__exponent+0x44>
 8008574:	2330      	movs	r3, #48	@ 0x30
 8008576:	3130      	adds	r1, #48	@ 0x30
 8008578:	7083      	strb	r3, [r0, #2]
 800857a:	70c1      	strb	r1, [r0, #3]
 800857c:	1d03      	adds	r3, r0, #4
 800857e:	e7f1      	b.n	8008564 <__exponent+0x58>

08008580 <_printf_float>:
 8008580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008584:	b08d      	sub	sp, #52	@ 0x34
 8008586:	460c      	mov	r4, r1
 8008588:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800858c:	4616      	mov	r6, r2
 800858e:	461f      	mov	r7, r3
 8008590:	4605      	mov	r5, r0
 8008592:	f000 ff23 	bl	80093dc <_localeconv_r>
 8008596:	6803      	ldr	r3, [r0, #0]
 8008598:	9304      	str	r3, [sp, #16]
 800859a:	4618      	mov	r0, r3
 800859c:	f7f7 fe68 	bl	8000270 <strlen>
 80085a0:	2300      	movs	r3, #0
 80085a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80085a4:	f8d8 3000 	ldr.w	r3, [r8]
 80085a8:	9005      	str	r0, [sp, #20]
 80085aa:	3307      	adds	r3, #7
 80085ac:	f023 0307 	bic.w	r3, r3, #7
 80085b0:	f103 0208 	add.w	r2, r3, #8
 80085b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80085b8:	f8d4 b000 	ldr.w	fp, [r4]
 80085bc:	f8c8 2000 	str.w	r2, [r8]
 80085c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80085c8:	9307      	str	r3, [sp, #28]
 80085ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80085ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80085d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085d6:	4b9c      	ldr	r3, [pc, #624]	@ (8008848 <_printf_float+0x2c8>)
 80085d8:	f04f 32ff 	mov.w	r2, #4294967295
 80085dc:	f7f8 faa6 	bl	8000b2c <__aeabi_dcmpun>
 80085e0:	bb70      	cbnz	r0, 8008640 <_printf_float+0xc0>
 80085e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085e6:	4b98      	ldr	r3, [pc, #608]	@ (8008848 <_printf_float+0x2c8>)
 80085e8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ec:	f7f8 fa80 	bl	8000af0 <__aeabi_dcmple>
 80085f0:	bb30      	cbnz	r0, 8008640 <_printf_float+0xc0>
 80085f2:	2200      	movs	r2, #0
 80085f4:	2300      	movs	r3, #0
 80085f6:	4640      	mov	r0, r8
 80085f8:	4649      	mov	r1, r9
 80085fa:	f7f8 fa6f 	bl	8000adc <__aeabi_dcmplt>
 80085fe:	b110      	cbz	r0, 8008606 <_printf_float+0x86>
 8008600:	232d      	movs	r3, #45	@ 0x2d
 8008602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008606:	4a91      	ldr	r2, [pc, #580]	@ (800884c <_printf_float+0x2cc>)
 8008608:	4b91      	ldr	r3, [pc, #580]	@ (8008850 <_printf_float+0x2d0>)
 800860a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800860e:	bf94      	ite	ls
 8008610:	4690      	movls	r8, r2
 8008612:	4698      	movhi	r8, r3
 8008614:	2303      	movs	r3, #3
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	f02b 0304 	bic.w	r3, fp, #4
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	f04f 0900 	mov.w	r9, #0
 8008622:	9700      	str	r7, [sp, #0]
 8008624:	4633      	mov	r3, r6
 8008626:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008628:	4621      	mov	r1, r4
 800862a:	4628      	mov	r0, r5
 800862c:	f000 f9d2 	bl	80089d4 <_printf_common>
 8008630:	3001      	adds	r0, #1
 8008632:	f040 808d 	bne.w	8008750 <_printf_float+0x1d0>
 8008636:	f04f 30ff 	mov.w	r0, #4294967295
 800863a:	b00d      	add	sp, #52	@ 0x34
 800863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008640:	4642      	mov	r2, r8
 8008642:	464b      	mov	r3, r9
 8008644:	4640      	mov	r0, r8
 8008646:	4649      	mov	r1, r9
 8008648:	f7f8 fa70 	bl	8000b2c <__aeabi_dcmpun>
 800864c:	b140      	cbz	r0, 8008660 <_printf_float+0xe0>
 800864e:	464b      	mov	r3, r9
 8008650:	2b00      	cmp	r3, #0
 8008652:	bfbc      	itt	lt
 8008654:	232d      	movlt	r3, #45	@ 0x2d
 8008656:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800865a:	4a7e      	ldr	r2, [pc, #504]	@ (8008854 <_printf_float+0x2d4>)
 800865c:	4b7e      	ldr	r3, [pc, #504]	@ (8008858 <_printf_float+0x2d8>)
 800865e:	e7d4      	b.n	800860a <_printf_float+0x8a>
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008666:	9206      	str	r2, [sp, #24]
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	d13b      	bne.n	80086e4 <_printf_float+0x164>
 800866c:	2306      	movs	r3, #6
 800866e:	6063      	str	r3, [r4, #4]
 8008670:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008674:	2300      	movs	r3, #0
 8008676:	6022      	str	r2, [r4, #0]
 8008678:	9303      	str	r3, [sp, #12]
 800867a:	ab0a      	add	r3, sp, #40	@ 0x28
 800867c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008680:	ab09      	add	r3, sp, #36	@ 0x24
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	6861      	ldr	r1, [r4, #4]
 8008686:	ec49 8b10 	vmov	d0, r8, r9
 800868a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800868e:	4628      	mov	r0, r5
 8008690:	f7ff fed7 	bl	8008442 <__cvt>
 8008694:	9b06      	ldr	r3, [sp, #24]
 8008696:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008698:	2b47      	cmp	r3, #71	@ 0x47
 800869a:	4680      	mov	r8, r0
 800869c:	d129      	bne.n	80086f2 <_printf_float+0x172>
 800869e:	1cc8      	adds	r0, r1, #3
 80086a0:	db02      	blt.n	80086a8 <_printf_float+0x128>
 80086a2:	6863      	ldr	r3, [r4, #4]
 80086a4:	4299      	cmp	r1, r3
 80086a6:	dd41      	ble.n	800872c <_printf_float+0x1ac>
 80086a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80086ac:	fa5f fa8a 	uxtb.w	sl, sl
 80086b0:	3901      	subs	r1, #1
 80086b2:	4652      	mov	r2, sl
 80086b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80086b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80086ba:	f7ff ff27 	bl	800850c <__exponent>
 80086be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086c0:	1813      	adds	r3, r2, r0
 80086c2:	2a01      	cmp	r2, #1
 80086c4:	4681      	mov	r9, r0
 80086c6:	6123      	str	r3, [r4, #16]
 80086c8:	dc02      	bgt.n	80086d0 <_printf_float+0x150>
 80086ca:	6822      	ldr	r2, [r4, #0]
 80086cc:	07d2      	lsls	r2, r2, #31
 80086ce:	d501      	bpl.n	80086d4 <_printf_float+0x154>
 80086d0:	3301      	adds	r3, #1
 80086d2:	6123      	str	r3, [r4, #16]
 80086d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0a2      	beq.n	8008622 <_printf_float+0xa2>
 80086dc:	232d      	movs	r3, #45	@ 0x2d
 80086de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086e2:	e79e      	b.n	8008622 <_printf_float+0xa2>
 80086e4:	9a06      	ldr	r2, [sp, #24]
 80086e6:	2a47      	cmp	r2, #71	@ 0x47
 80086e8:	d1c2      	bne.n	8008670 <_printf_float+0xf0>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1c0      	bne.n	8008670 <_printf_float+0xf0>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e7bd      	b.n	800866e <_printf_float+0xee>
 80086f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086f6:	d9db      	bls.n	80086b0 <_printf_float+0x130>
 80086f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80086fc:	d118      	bne.n	8008730 <_printf_float+0x1b0>
 80086fe:	2900      	cmp	r1, #0
 8008700:	6863      	ldr	r3, [r4, #4]
 8008702:	dd0b      	ble.n	800871c <_printf_float+0x19c>
 8008704:	6121      	str	r1, [r4, #16]
 8008706:	b913      	cbnz	r3, 800870e <_printf_float+0x18e>
 8008708:	6822      	ldr	r2, [r4, #0]
 800870a:	07d0      	lsls	r0, r2, #31
 800870c:	d502      	bpl.n	8008714 <_printf_float+0x194>
 800870e:	3301      	adds	r3, #1
 8008710:	440b      	add	r3, r1
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008716:	f04f 0900 	mov.w	r9, #0
 800871a:	e7db      	b.n	80086d4 <_printf_float+0x154>
 800871c:	b913      	cbnz	r3, 8008724 <_printf_float+0x1a4>
 800871e:	6822      	ldr	r2, [r4, #0]
 8008720:	07d2      	lsls	r2, r2, #31
 8008722:	d501      	bpl.n	8008728 <_printf_float+0x1a8>
 8008724:	3302      	adds	r3, #2
 8008726:	e7f4      	b.n	8008712 <_printf_float+0x192>
 8008728:	2301      	movs	r3, #1
 800872a:	e7f2      	b.n	8008712 <_printf_float+0x192>
 800872c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008732:	4299      	cmp	r1, r3
 8008734:	db05      	blt.n	8008742 <_printf_float+0x1c2>
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	6121      	str	r1, [r4, #16]
 800873a:	07d8      	lsls	r0, r3, #31
 800873c:	d5ea      	bpl.n	8008714 <_printf_float+0x194>
 800873e:	1c4b      	adds	r3, r1, #1
 8008740:	e7e7      	b.n	8008712 <_printf_float+0x192>
 8008742:	2900      	cmp	r1, #0
 8008744:	bfd4      	ite	le
 8008746:	f1c1 0202 	rsble	r2, r1, #2
 800874a:	2201      	movgt	r2, #1
 800874c:	4413      	add	r3, r2
 800874e:	e7e0      	b.n	8008712 <_printf_float+0x192>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	055a      	lsls	r2, r3, #21
 8008754:	d407      	bmi.n	8008766 <_printf_float+0x1e6>
 8008756:	6923      	ldr	r3, [r4, #16]
 8008758:	4642      	mov	r2, r8
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	d12b      	bne.n	80087bc <_printf_float+0x23c>
 8008764:	e767      	b.n	8008636 <_printf_float+0xb6>
 8008766:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800876a:	f240 80dd 	bls.w	8008928 <_printf_float+0x3a8>
 800876e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008772:	2200      	movs	r2, #0
 8008774:	2300      	movs	r3, #0
 8008776:	f7f8 f9a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800877a:	2800      	cmp	r0, #0
 800877c:	d033      	beq.n	80087e6 <_printf_float+0x266>
 800877e:	4a37      	ldr	r2, [pc, #220]	@ (800885c <_printf_float+0x2dc>)
 8008780:	2301      	movs	r3, #1
 8008782:	4631      	mov	r1, r6
 8008784:	4628      	mov	r0, r5
 8008786:	47b8      	blx	r7
 8008788:	3001      	adds	r0, #1
 800878a:	f43f af54 	beq.w	8008636 <_printf_float+0xb6>
 800878e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008792:	4543      	cmp	r3, r8
 8008794:	db02      	blt.n	800879c <_printf_float+0x21c>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	07d8      	lsls	r0, r3, #31
 800879a:	d50f      	bpl.n	80087bc <_printf_float+0x23c>
 800879c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087a0:	4631      	mov	r1, r6
 80087a2:	4628      	mov	r0, r5
 80087a4:	47b8      	blx	r7
 80087a6:	3001      	adds	r0, #1
 80087a8:	f43f af45 	beq.w	8008636 <_printf_float+0xb6>
 80087ac:	f04f 0900 	mov.w	r9, #0
 80087b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80087b4:	f104 0a1a 	add.w	sl, r4, #26
 80087b8:	45c8      	cmp	r8, r9
 80087ba:	dc09      	bgt.n	80087d0 <_printf_float+0x250>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	079b      	lsls	r3, r3, #30
 80087c0:	f100 8103 	bmi.w	80089ca <_printf_float+0x44a>
 80087c4:	68e0      	ldr	r0, [r4, #12]
 80087c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087c8:	4298      	cmp	r0, r3
 80087ca:	bfb8      	it	lt
 80087cc:	4618      	movlt	r0, r3
 80087ce:	e734      	b.n	800863a <_printf_float+0xba>
 80087d0:	2301      	movs	r3, #1
 80087d2:	4652      	mov	r2, sl
 80087d4:	4631      	mov	r1, r6
 80087d6:	4628      	mov	r0, r5
 80087d8:	47b8      	blx	r7
 80087da:	3001      	adds	r0, #1
 80087dc:	f43f af2b 	beq.w	8008636 <_printf_float+0xb6>
 80087e0:	f109 0901 	add.w	r9, r9, #1
 80087e4:	e7e8      	b.n	80087b8 <_printf_float+0x238>
 80087e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	dc39      	bgt.n	8008860 <_printf_float+0x2e0>
 80087ec:	4a1b      	ldr	r2, [pc, #108]	@ (800885c <_printf_float+0x2dc>)
 80087ee:	2301      	movs	r3, #1
 80087f0:	4631      	mov	r1, r6
 80087f2:	4628      	mov	r0, r5
 80087f4:	47b8      	blx	r7
 80087f6:	3001      	adds	r0, #1
 80087f8:	f43f af1d 	beq.w	8008636 <_printf_float+0xb6>
 80087fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008800:	ea59 0303 	orrs.w	r3, r9, r3
 8008804:	d102      	bne.n	800880c <_printf_float+0x28c>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	07d9      	lsls	r1, r3, #31
 800880a:	d5d7      	bpl.n	80087bc <_printf_float+0x23c>
 800880c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008810:	4631      	mov	r1, r6
 8008812:	4628      	mov	r0, r5
 8008814:	47b8      	blx	r7
 8008816:	3001      	adds	r0, #1
 8008818:	f43f af0d 	beq.w	8008636 <_printf_float+0xb6>
 800881c:	f04f 0a00 	mov.w	sl, #0
 8008820:	f104 0b1a 	add.w	fp, r4, #26
 8008824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008826:	425b      	negs	r3, r3
 8008828:	4553      	cmp	r3, sl
 800882a:	dc01      	bgt.n	8008830 <_printf_float+0x2b0>
 800882c:	464b      	mov	r3, r9
 800882e:	e793      	b.n	8008758 <_printf_float+0x1d8>
 8008830:	2301      	movs	r3, #1
 8008832:	465a      	mov	r2, fp
 8008834:	4631      	mov	r1, r6
 8008836:	4628      	mov	r0, r5
 8008838:	47b8      	blx	r7
 800883a:	3001      	adds	r0, #1
 800883c:	f43f aefb 	beq.w	8008636 <_printf_float+0xb6>
 8008840:	f10a 0a01 	add.w	sl, sl, #1
 8008844:	e7ee      	b.n	8008824 <_printf_float+0x2a4>
 8008846:	bf00      	nop
 8008848:	7fefffff 	.word	0x7fefffff
 800884c:	0800d248 	.word	0x0800d248
 8008850:	0800d24c 	.word	0x0800d24c
 8008854:	0800d250 	.word	0x0800d250
 8008858:	0800d254 	.word	0x0800d254
 800885c:	0800d258 	.word	0x0800d258
 8008860:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008862:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008866:	4553      	cmp	r3, sl
 8008868:	bfa8      	it	ge
 800886a:	4653      	movge	r3, sl
 800886c:	2b00      	cmp	r3, #0
 800886e:	4699      	mov	r9, r3
 8008870:	dc36      	bgt.n	80088e0 <_printf_float+0x360>
 8008872:	f04f 0b00 	mov.w	fp, #0
 8008876:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800887a:	f104 021a 	add.w	r2, r4, #26
 800887e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008880:	9306      	str	r3, [sp, #24]
 8008882:	eba3 0309 	sub.w	r3, r3, r9
 8008886:	455b      	cmp	r3, fp
 8008888:	dc31      	bgt.n	80088ee <_printf_float+0x36e>
 800888a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888c:	459a      	cmp	sl, r3
 800888e:	dc3a      	bgt.n	8008906 <_printf_float+0x386>
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	07da      	lsls	r2, r3, #31
 8008894:	d437      	bmi.n	8008906 <_printf_float+0x386>
 8008896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008898:	ebaa 0903 	sub.w	r9, sl, r3
 800889c:	9b06      	ldr	r3, [sp, #24]
 800889e:	ebaa 0303 	sub.w	r3, sl, r3
 80088a2:	4599      	cmp	r9, r3
 80088a4:	bfa8      	it	ge
 80088a6:	4699      	movge	r9, r3
 80088a8:	f1b9 0f00 	cmp.w	r9, #0
 80088ac:	dc33      	bgt.n	8008916 <_printf_float+0x396>
 80088ae:	f04f 0800 	mov.w	r8, #0
 80088b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088b6:	f104 0b1a 	add.w	fp, r4, #26
 80088ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088bc:	ebaa 0303 	sub.w	r3, sl, r3
 80088c0:	eba3 0309 	sub.w	r3, r3, r9
 80088c4:	4543      	cmp	r3, r8
 80088c6:	f77f af79 	ble.w	80087bc <_printf_float+0x23c>
 80088ca:	2301      	movs	r3, #1
 80088cc:	465a      	mov	r2, fp
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	f43f aeae 	beq.w	8008636 <_printf_float+0xb6>
 80088da:	f108 0801 	add.w	r8, r8, #1
 80088de:	e7ec      	b.n	80088ba <_printf_float+0x33a>
 80088e0:	4642      	mov	r2, r8
 80088e2:	4631      	mov	r1, r6
 80088e4:	4628      	mov	r0, r5
 80088e6:	47b8      	blx	r7
 80088e8:	3001      	adds	r0, #1
 80088ea:	d1c2      	bne.n	8008872 <_printf_float+0x2f2>
 80088ec:	e6a3      	b.n	8008636 <_printf_float+0xb6>
 80088ee:	2301      	movs	r3, #1
 80088f0:	4631      	mov	r1, r6
 80088f2:	4628      	mov	r0, r5
 80088f4:	9206      	str	r2, [sp, #24]
 80088f6:	47b8      	blx	r7
 80088f8:	3001      	adds	r0, #1
 80088fa:	f43f ae9c 	beq.w	8008636 <_printf_float+0xb6>
 80088fe:	9a06      	ldr	r2, [sp, #24]
 8008900:	f10b 0b01 	add.w	fp, fp, #1
 8008904:	e7bb      	b.n	800887e <_printf_float+0x2fe>
 8008906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	47b8      	blx	r7
 8008910:	3001      	adds	r0, #1
 8008912:	d1c0      	bne.n	8008896 <_printf_float+0x316>
 8008914:	e68f      	b.n	8008636 <_printf_float+0xb6>
 8008916:	9a06      	ldr	r2, [sp, #24]
 8008918:	464b      	mov	r3, r9
 800891a:	4442      	add	r2, r8
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	d1c3      	bne.n	80088ae <_printf_float+0x32e>
 8008926:	e686      	b.n	8008636 <_printf_float+0xb6>
 8008928:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800892c:	f1ba 0f01 	cmp.w	sl, #1
 8008930:	dc01      	bgt.n	8008936 <_printf_float+0x3b6>
 8008932:	07db      	lsls	r3, r3, #31
 8008934:	d536      	bpl.n	80089a4 <_printf_float+0x424>
 8008936:	2301      	movs	r3, #1
 8008938:	4642      	mov	r2, r8
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	47b8      	blx	r7
 8008940:	3001      	adds	r0, #1
 8008942:	f43f ae78 	beq.w	8008636 <_printf_float+0xb6>
 8008946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800894a:	4631      	mov	r1, r6
 800894c:	4628      	mov	r0, r5
 800894e:	47b8      	blx	r7
 8008950:	3001      	adds	r0, #1
 8008952:	f43f ae70 	beq.w	8008636 <_printf_float+0xb6>
 8008956:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800895a:	2200      	movs	r2, #0
 800895c:	2300      	movs	r3, #0
 800895e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008962:	f7f8 f8b1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008966:	b9c0      	cbnz	r0, 800899a <_printf_float+0x41a>
 8008968:	4653      	mov	r3, sl
 800896a:	f108 0201 	add.w	r2, r8, #1
 800896e:	4631      	mov	r1, r6
 8008970:	4628      	mov	r0, r5
 8008972:	47b8      	blx	r7
 8008974:	3001      	adds	r0, #1
 8008976:	d10c      	bne.n	8008992 <_printf_float+0x412>
 8008978:	e65d      	b.n	8008636 <_printf_float+0xb6>
 800897a:	2301      	movs	r3, #1
 800897c:	465a      	mov	r2, fp
 800897e:	4631      	mov	r1, r6
 8008980:	4628      	mov	r0, r5
 8008982:	47b8      	blx	r7
 8008984:	3001      	adds	r0, #1
 8008986:	f43f ae56 	beq.w	8008636 <_printf_float+0xb6>
 800898a:	f108 0801 	add.w	r8, r8, #1
 800898e:	45d0      	cmp	r8, sl
 8008990:	dbf3      	blt.n	800897a <_printf_float+0x3fa>
 8008992:	464b      	mov	r3, r9
 8008994:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008998:	e6df      	b.n	800875a <_printf_float+0x1da>
 800899a:	f04f 0800 	mov.w	r8, #0
 800899e:	f104 0b1a 	add.w	fp, r4, #26
 80089a2:	e7f4      	b.n	800898e <_printf_float+0x40e>
 80089a4:	2301      	movs	r3, #1
 80089a6:	4642      	mov	r2, r8
 80089a8:	e7e1      	b.n	800896e <_printf_float+0x3ee>
 80089aa:	2301      	movs	r3, #1
 80089ac:	464a      	mov	r2, r9
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	f43f ae3e 	beq.w	8008636 <_printf_float+0xb6>
 80089ba:	f108 0801 	add.w	r8, r8, #1
 80089be:	68e3      	ldr	r3, [r4, #12]
 80089c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089c2:	1a5b      	subs	r3, r3, r1
 80089c4:	4543      	cmp	r3, r8
 80089c6:	dcf0      	bgt.n	80089aa <_printf_float+0x42a>
 80089c8:	e6fc      	b.n	80087c4 <_printf_float+0x244>
 80089ca:	f04f 0800 	mov.w	r8, #0
 80089ce:	f104 0919 	add.w	r9, r4, #25
 80089d2:	e7f4      	b.n	80089be <_printf_float+0x43e>

080089d4 <_printf_common>:
 80089d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d8:	4616      	mov	r6, r2
 80089da:	4698      	mov	r8, r3
 80089dc:	688a      	ldr	r2, [r1, #8]
 80089de:	690b      	ldr	r3, [r1, #16]
 80089e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089e4:	4293      	cmp	r3, r2
 80089e6:	bfb8      	it	lt
 80089e8:	4613      	movlt	r3, r2
 80089ea:	6033      	str	r3, [r6, #0]
 80089ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089f0:	4607      	mov	r7, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	b10a      	cbz	r2, 80089fa <_printf_common+0x26>
 80089f6:	3301      	adds	r3, #1
 80089f8:	6033      	str	r3, [r6, #0]
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	0699      	lsls	r1, r3, #26
 80089fe:	bf42      	ittt	mi
 8008a00:	6833      	ldrmi	r3, [r6, #0]
 8008a02:	3302      	addmi	r3, #2
 8008a04:	6033      	strmi	r3, [r6, #0]
 8008a06:	6825      	ldr	r5, [r4, #0]
 8008a08:	f015 0506 	ands.w	r5, r5, #6
 8008a0c:	d106      	bne.n	8008a1c <_printf_common+0x48>
 8008a0e:	f104 0a19 	add.w	sl, r4, #25
 8008a12:	68e3      	ldr	r3, [r4, #12]
 8008a14:	6832      	ldr	r2, [r6, #0]
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	dc26      	bgt.n	8008a6a <_printf_common+0x96>
 8008a1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a20:	6822      	ldr	r2, [r4, #0]
 8008a22:	3b00      	subs	r3, #0
 8008a24:	bf18      	it	ne
 8008a26:	2301      	movne	r3, #1
 8008a28:	0692      	lsls	r2, r2, #26
 8008a2a:	d42b      	bmi.n	8008a84 <_printf_common+0xb0>
 8008a2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a30:	4641      	mov	r1, r8
 8008a32:	4638      	mov	r0, r7
 8008a34:	47c8      	blx	r9
 8008a36:	3001      	adds	r0, #1
 8008a38:	d01e      	beq.n	8008a78 <_printf_common+0xa4>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	6922      	ldr	r2, [r4, #16]
 8008a3e:	f003 0306 	and.w	r3, r3, #6
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	bf02      	ittt	eq
 8008a46:	68e5      	ldreq	r5, [r4, #12]
 8008a48:	6833      	ldreq	r3, [r6, #0]
 8008a4a:	1aed      	subeq	r5, r5, r3
 8008a4c:	68a3      	ldr	r3, [r4, #8]
 8008a4e:	bf0c      	ite	eq
 8008a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a54:	2500      	movne	r5, #0
 8008a56:	4293      	cmp	r3, r2
 8008a58:	bfc4      	itt	gt
 8008a5a:	1a9b      	subgt	r3, r3, r2
 8008a5c:	18ed      	addgt	r5, r5, r3
 8008a5e:	2600      	movs	r6, #0
 8008a60:	341a      	adds	r4, #26
 8008a62:	42b5      	cmp	r5, r6
 8008a64:	d11a      	bne.n	8008a9c <_printf_common+0xc8>
 8008a66:	2000      	movs	r0, #0
 8008a68:	e008      	b.n	8008a7c <_printf_common+0xa8>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	4641      	mov	r1, r8
 8008a70:	4638      	mov	r0, r7
 8008a72:	47c8      	blx	r9
 8008a74:	3001      	adds	r0, #1
 8008a76:	d103      	bne.n	8008a80 <_printf_common+0xac>
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a80:	3501      	adds	r5, #1
 8008a82:	e7c6      	b.n	8008a12 <_printf_common+0x3e>
 8008a84:	18e1      	adds	r1, r4, r3
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	2030      	movs	r0, #48	@ 0x30
 8008a8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a8e:	4422      	add	r2, r4
 8008a90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a98:	3302      	adds	r3, #2
 8008a9a:	e7c7      	b.n	8008a2c <_printf_common+0x58>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	4641      	mov	r1, r8
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	47c8      	blx	r9
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d0e6      	beq.n	8008a78 <_printf_common+0xa4>
 8008aaa:	3601      	adds	r6, #1
 8008aac:	e7d9      	b.n	8008a62 <_printf_common+0x8e>
	...

08008ab0 <_printf_i>:
 8008ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab4:	7e0f      	ldrb	r7, [r1, #24]
 8008ab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ab8:	2f78      	cmp	r7, #120	@ 0x78
 8008aba:	4691      	mov	r9, r2
 8008abc:	4680      	mov	r8, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	469a      	mov	sl, r3
 8008ac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ac6:	d807      	bhi.n	8008ad8 <_printf_i+0x28>
 8008ac8:	2f62      	cmp	r7, #98	@ 0x62
 8008aca:	d80a      	bhi.n	8008ae2 <_printf_i+0x32>
 8008acc:	2f00      	cmp	r7, #0
 8008ace:	f000 80d2 	beq.w	8008c76 <_printf_i+0x1c6>
 8008ad2:	2f58      	cmp	r7, #88	@ 0x58
 8008ad4:	f000 80b9 	beq.w	8008c4a <_printf_i+0x19a>
 8008ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008adc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ae0:	e03a      	b.n	8008b58 <_printf_i+0xa8>
 8008ae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ae6:	2b15      	cmp	r3, #21
 8008ae8:	d8f6      	bhi.n	8008ad8 <_printf_i+0x28>
 8008aea:	a101      	add	r1, pc, #4	@ (adr r1, 8008af0 <_printf_i+0x40>)
 8008aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008af0:	08008b49 	.word	0x08008b49
 8008af4:	08008b5d 	.word	0x08008b5d
 8008af8:	08008ad9 	.word	0x08008ad9
 8008afc:	08008ad9 	.word	0x08008ad9
 8008b00:	08008ad9 	.word	0x08008ad9
 8008b04:	08008ad9 	.word	0x08008ad9
 8008b08:	08008b5d 	.word	0x08008b5d
 8008b0c:	08008ad9 	.word	0x08008ad9
 8008b10:	08008ad9 	.word	0x08008ad9
 8008b14:	08008ad9 	.word	0x08008ad9
 8008b18:	08008ad9 	.word	0x08008ad9
 8008b1c:	08008c5d 	.word	0x08008c5d
 8008b20:	08008b87 	.word	0x08008b87
 8008b24:	08008c17 	.word	0x08008c17
 8008b28:	08008ad9 	.word	0x08008ad9
 8008b2c:	08008ad9 	.word	0x08008ad9
 8008b30:	08008c7f 	.word	0x08008c7f
 8008b34:	08008ad9 	.word	0x08008ad9
 8008b38:	08008b87 	.word	0x08008b87
 8008b3c:	08008ad9 	.word	0x08008ad9
 8008b40:	08008ad9 	.word	0x08008ad9
 8008b44:	08008c1f 	.word	0x08008c1f
 8008b48:	6833      	ldr	r3, [r6, #0]
 8008b4a:	1d1a      	adds	r2, r3, #4
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6032      	str	r2, [r6, #0]
 8008b50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e09d      	b.n	8008c98 <_printf_i+0x1e8>
 8008b5c:	6833      	ldr	r3, [r6, #0]
 8008b5e:	6820      	ldr	r0, [r4, #0]
 8008b60:	1d19      	adds	r1, r3, #4
 8008b62:	6031      	str	r1, [r6, #0]
 8008b64:	0606      	lsls	r6, r0, #24
 8008b66:	d501      	bpl.n	8008b6c <_printf_i+0xbc>
 8008b68:	681d      	ldr	r5, [r3, #0]
 8008b6a:	e003      	b.n	8008b74 <_printf_i+0xc4>
 8008b6c:	0645      	lsls	r5, r0, #25
 8008b6e:	d5fb      	bpl.n	8008b68 <_printf_i+0xb8>
 8008b70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b74:	2d00      	cmp	r5, #0
 8008b76:	da03      	bge.n	8008b80 <_printf_i+0xd0>
 8008b78:	232d      	movs	r3, #45	@ 0x2d
 8008b7a:	426d      	negs	r5, r5
 8008b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b80:	4859      	ldr	r0, [pc, #356]	@ (8008ce8 <_printf_i+0x238>)
 8008b82:	230a      	movs	r3, #10
 8008b84:	e011      	b.n	8008baa <_printf_i+0xfa>
 8008b86:	6821      	ldr	r1, [r4, #0]
 8008b88:	6833      	ldr	r3, [r6, #0]
 8008b8a:	0608      	lsls	r0, r1, #24
 8008b8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b90:	d402      	bmi.n	8008b98 <_printf_i+0xe8>
 8008b92:	0649      	lsls	r1, r1, #25
 8008b94:	bf48      	it	mi
 8008b96:	b2ad      	uxthmi	r5, r5
 8008b98:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b9a:	4853      	ldr	r0, [pc, #332]	@ (8008ce8 <_printf_i+0x238>)
 8008b9c:	6033      	str	r3, [r6, #0]
 8008b9e:	bf14      	ite	ne
 8008ba0:	230a      	movne	r3, #10
 8008ba2:	2308      	moveq	r3, #8
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008baa:	6866      	ldr	r6, [r4, #4]
 8008bac:	60a6      	str	r6, [r4, #8]
 8008bae:	2e00      	cmp	r6, #0
 8008bb0:	bfa2      	ittt	ge
 8008bb2:	6821      	ldrge	r1, [r4, #0]
 8008bb4:	f021 0104 	bicge.w	r1, r1, #4
 8008bb8:	6021      	strge	r1, [r4, #0]
 8008bba:	b90d      	cbnz	r5, 8008bc0 <_printf_i+0x110>
 8008bbc:	2e00      	cmp	r6, #0
 8008bbe:	d04b      	beq.n	8008c58 <_printf_i+0x1a8>
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bc6:	fb03 5711 	mls	r7, r3, r1, r5
 8008bca:	5dc7      	ldrb	r7, [r0, r7]
 8008bcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bd0:	462f      	mov	r7, r5
 8008bd2:	42bb      	cmp	r3, r7
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	d9f4      	bls.n	8008bc2 <_printf_i+0x112>
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d10b      	bne.n	8008bf4 <_printf_i+0x144>
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	07df      	lsls	r7, r3, #31
 8008be0:	d508      	bpl.n	8008bf4 <_printf_i+0x144>
 8008be2:	6923      	ldr	r3, [r4, #16]
 8008be4:	6861      	ldr	r1, [r4, #4]
 8008be6:	4299      	cmp	r1, r3
 8008be8:	bfde      	ittt	le
 8008bea:	2330      	movle	r3, #48	@ 0x30
 8008bec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bf4:	1b92      	subs	r2, r2, r6
 8008bf6:	6122      	str	r2, [r4, #16]
 8008bf8:	f8cd a000 	str.w	sl, [sp]
 8008bfc:	464b      	mov	r3, r9
 8008bfe:	aa03      	add	r2, sp, #12
 8008c00:	4621      	mov	r1, r4
 8008c02:	4640      	mov	r0, r8
 8008c04:	f7ff fee6 	bl	80089d4 <_printf_common>
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d14a      	bne.n	8008ca2 <_printf_i+0x1f2>
 8008c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c10:	b004      	add	sp, #16
 8008c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	f043 0320 	orr.w	r3, r3, #32
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	4833      	ldr	r0, [pc, #204]	@ (8008cec <_printf_i+0x23c>)
 8008c20:	2778      	movs	r7, #120	@ 0x78
 8008c22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	6831      	ldr	r1, [r6, #0]
 8008c2a:	061f      	lsls	r7, r3, #24
 8008c2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c30:	d402      	bmi.n	8008c38 <_printf_i+0x188>
 8008c32:	065f      	lsls	r7, r3, #25
 8008c34:	bf48      	it	mi
 8008c36:	b2ad      	uxthmi	r5, r5
 8008c38:	6031      	str	r1, [r6, #0]
 8008c3a:	07d9      	lsls	r1, r3, #31
 8008c3c:	bf44      	itt	mi
 8008c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c42:	6023      	strmi	r3, [r4, #0]
 8008c44:	b11d      	cbz	r5, 8008c4e <_printf_i+0x19e>
 8008c46:	2310      	movs	r3, #16
 8008c48:	e7ac      	b.n	8008ba4 <_printf_i+0xf4>
 8008c4a:	4827      	ldr	r0, [pc, #156]	@ (8008ce8 <_printf_i+0x238>)
 8008c4c:	e7e9      	b.n	8008c22 <_printf_i+0x172>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	f023 0320 	bic.w	r3, r3, #32
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	e7f6      	b.n	8008c46 <_printf_i+0x196>
 8008c58:	4616      	mov	r6, r2
 8008c5a:	e7bd      	b.n	8008bd8 <_printf_i+0x128>
 8008c5c:	6833      	ldr	r3, [r6, #0]
 8008c5e:	6825      	ldr	r5, [r4, #0]
 8008c60:	6961      	ldr	r1, [r4, #20]
 8008c62:	1d18      	adds	r0, r3, #4
 8008c64:	6030      	str	r0, [r6, #0]
 8008c66:	062e      	lsls	r6, r5, #24
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	d501      	bpl.n	8008c70 <_printf_i+0x1c0>
 8008c6c:	6019      	str	r1, [r3, #0]
 8008c6e:	e002      	b.n	8008c76 <_printf_i+0x1c6>
 8008c70:	0668      	lsls	r0, r5, #25
 8008c72:	d5fb      	bpl.n	8008c6c <_printf_i+0x1bc>
 8008c74:	8019      	strh	r1, [r3, #0]
 8008c76:	2300      	movs	r3, #0
 8008c78:	6123      	str	r3, [r4, #16]
 8008c7a:	4616      	mov	r6, r2
 8008c7c:	e7bc      	b.n	8008bf8 <_printf_i+0x148>
 8008c7e:	6833      	ldr	r3, [r6, #0]
 8008c80:	1d1a      	adds	r2, r3, #4
 8008c82:	6032      	str	r2, [r6, #0]
 8008c84:	681e      	ldr	r6, [r3, #0]
 8008c86:	6862      	ldr	r2, [r4, #4]
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f7f7 faa0 	bl	80001d0 <memchr>
 8008c90:	b108      	cbz	r0, 8008c96 <_printf_i+0x1e6>
 8008c92:	1b80      	subs	r0, r0, r6
 8008c94:	6060      	str	r0, [r4, #4]
 8008c96:	6863      	ldr	r3, [r4, #4]
 8008c98:	6123      	str	r3, [r4, #16]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ca0:	e7aa      	b.n	8008bf8 <_printf_i+0x148>
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	4640      	mov	r0, r8
 8008caa:	47d0      	blx	sl
 8008cac:	3001      	adds	r0, #1
 8008cae:	d0ad      	beq.n	8008c0c <_printf_i+0x15c>
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	079b      	lsls	r3, r3, #30
 8008cb4:	d413      	bmi.n	8008cde <_printf_i+0x22e>
 8008cb6:	68e0      	ldr	r0, [r4, #12]
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	4298      	cmp	r0, r3
 8008cbc:	bfb8      	it	lt
 8008cbe:	4618      	movlt	r0, r3
 8008cc0:	e7a6      	b.n	8008c10 <_printf_i+0x160>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4632      	mov	r2, r6
 8008cc6:	4649      	mov	r1, r9
 8008cc8:	4640      	mov	r0, r8
 8008cca:	47d0      	blx	sl
 8008ccc:	3001      	adds	r0, #1
 8008cce:	d09d      	beq.n	8008c0c <_printf_i+0x15c>
 8008cd0:	3501      	adds	r5, #1
 8008cd2:	68e3      	ldr	r3, [r4, #12]
 8008cd4:	9903      	ldr	r1, [sp, #12]
 8008cd6:	1a5b      	subs	r3, r3, r1
 8008cd8:	42ab      	cmp	r3, r5
 8008cda:	dcf2      	bgt.n	8008cc2 <_printf_i+0x212>
 8008cdc:	e7eb      	b.n	8008cb6 <_printf_i+0x206>
 8008cde:	2500      	movs	r5, #0
 8008ce0:	f104 0619 	add.w	r6, r4, #25
 8008ce4:	e7f5      	b.n	8008cd2 <_printf_i+0x222>
 8008ce6:	bf00      	nop
 8008ce8:	0800d25a 	.word	0x0800d25a
 8008cec:	0800d26b 	.word	0x0800d26b

08008cf0 <_scanf_float>:
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	b087      	sub	sp, #28
 8008cf6:	4617      	mov	r7, r2
 8008cf8:	9303      	str	r3, [sp, #12]
 8008cfa:	688b      	ldr	r3, [r1, #8]
 8008cfc:	1e5a      	subs	r2, r3, #1
 8008cfe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008d02:	bf81      	itttt	hi
 8008d04:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008d08:	eb03 0b05 	addhi.w	fp, r3, r5
 8008d0c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008d10:	608b      	strhi	r3, [r1, #8]
 8008d12:	680b      	ldr	r3, [r1, #0]
 8008d14:	460a      	mov	r2, r1
 8008d16:	f04f 0500 	mov.w	r5, #0
 8008d1a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008d1e:	f842 3b1c 	str.w	r3, [r2], #28
 8008d22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008d26:	4680      	mov	r8, r0
 8008d28:	460c      	mov	r4, r1
 8008d2a:	bf98      	it	ls
 8008d2c:	f04f 0b00 	movls.w	fp, #0
 8008d30:	9201      	str	r2, [sp, #4]
 8008d32:	4616      	mov	r6, r2
 8008d34:	46aa      	mov	sl, r5
 8008d36:	46a9      	mov	r9, r5
 8008d38:	9502      	str	r5, [sp, #8]
 8008d3a:	68a2      	ldr	r2, [r4, #8]
 8008d3c:	b152      	cbz	r2, 8008d54 <_scanf_float+0x64>
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b4e      	cmp	r3, #78	@ 0x4e
 8008d44:	d864      	bhi.n	8008e10 <_scanf_float+0x120>
 8008d46:	2b40      	cmp	r3, #64	@ 0x40
 8008d48:	d83c      	bhi.n	8008dc4 <_scanf_float+0xd4>
 8008d4a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008d4e:	b2c8      	uxtb	r0, r1
 8008d50:	280e      	cmp	r0, #14
 8008d52:	d93a      	bls.n	8008dca <_scanf_float+0xda>
 8008d54:	f1b9 0f00 	cmp.w	r9, #0
 8008d58:	d003      	beq.n	8008d62 <_scanf_float+0x72>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d66:	f1ba 0f01 	cmp.w	sl, #1
 8008d6a:	f200 8117 	bhi.w	8008f9c <_scanf_float+0x2ac>
 8008d6e:	9b01      	ldr	r3, [sp, #4]
 8008d70:	429e      	cmp	r6, r3
 8008d72:	f200 8108 	bhi.w	8008f86 <_scanf_float+0x296>
 8008d76:	2001      	movs	r0, #1
 8008d78:	b007      	add	sp, #28
 8008d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008d82:	2a0d      	cmp	r2, #13
 8008d84:	d8e6      	bhi.n	8008d54 <_scanf_float+0x64>
 8008d86:	a101      	add	r1, pc, #4	@ (adr r1, 8008d8c <_scanf_float+0x9c>)
 8008d88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d8c:	08008ed3 	.word	0x08008ed3
 8008d90:	08008d55 	.word	0x08008d55
 8008d94:	08008d55 	.word	0x08008d55
 8008d98:	08008d55 	.word	0x08008d55
 8008d9c:	08008f33 	.word	0x08008f33
 8008da0:	08008f0b 	.word	0x08008f0b
 8008da4:	08008d55 	.word	0x08008d55
 8008da8:	08008d55 	.word	0x08008d55
 8008dac:	08008ee1 	.word	0x08008ee1
 8008db0:	08008d55 	.word	0x08008d55
 8008db4:	08008d55 	.word	0x08008d55
 8008db8:	08008d55 	.word	0x08008d55
 8008dbc:	08008d55 	.word	0x08008d55
 8008dc0:	08008e99 	.word	0x08008e99
 8008dc4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008dc8:	e7db      	b.n	8008d82 <_scanf_float+0x92>
 8008dca:	290e      	cmp	r1, #14
 8008dcc:	d8c2      	bhi.n	8008d54 <_scanf_float+0x64>
 8008dce:	a001      	add	r0, pc, #4	@ (adr r0, 8008dd4 <_scanf_float+0xe4>)
 8008dd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008dd4:	08008e89 	.word	0x08008e89
 8008dd8:	08008d55 	.word	0x08008d55
 8008ddc:	08008e89 	.word	0x08008e89
 8008de0:	08008f1f 	.word	0x08008f1f
 8008de4:	08008d55 	.word	0x08008d55
 8008de8:	08008e31 	.word	0x08008e31
 8008dec:	08008e6f 	.word	0x08008e6f
 8008df0:	08008e6f 	.word	0x08008e6f
 8008df4:	08008e6f 	.word	0x08008e6f
 8008df8:	08008e6f 	.word	0x08008e6f
 8008dfc:	08008e6f 	.word	0x08008e6f
 8008e00:	08008e6f 	.word	0x08008e6f
 8008e04:	08008e6f 	.word	0x08008e6f
 8008e08:	08008e6f 	.word	0x08008e6f
 8008e0c:	08008e6f 	.word	0x08008e6f
 8008e10:	2b6e      	cmp	r3, #110	@ 0x6e
 8008e12:	d809      	bhi.n	8008e28 <_scanf_float+0x138>
 8008e14:	2b60      	cmp	r3, #96	@ 0x60
 8008e16:	d8b2      	bhi.n	8008d7e <_scanf_float+0x8e>
 8008e18:	2b54      	cmp	r3, #84	@ 0x54
 8008e1a:	d07b      	beq.n	8008f14 <_scanf_float+0x224>
 8008e1c:	2b59      	cmp	r3, #89	@ 0x59
 8008e1e:	d199      	bne.n	8008d54 <_scanf_float+0x64>
 8008e20:	2d07      	cmp	r5, #7
 8008e22:	d197      	bne.n	8008d54 <_scanf_float+0x64>
 8008e24:	2508      	movs	r5, #8
 8008e26:	e02c      	b.n	8008e82 <_scanf_float+0x192>
 8008e28:	2b74      	cmp	r3, #116	@ 0x74
 8008e2a:	d073      	beq.n	8008f14 <_scanf_float+0x224>
 8008e2c:	2b79      	cmp	r3, #121	@ 0x79
 8008e2e:	e7f6      	b.n	8008e1e <_scanf_float+0x12e>
 8008e30:	6821      	ldr	r1, [r4, #0]
 8008e32:	05c8      	lsls	r0, r1, #23
 8008e34:	d51b      	bpl.n	8008e6e <_scanf_float+0x17e>
 8008e36:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008e3a:	6021      	str	r1, [r4, #0]
 8008e3c:	f109 0901 	add.w	r9, r9, #1
 8008e40:	f1bb 0f00 	cmp.w	fp, #0
 8008e44:	d003      	beq.n	8008e4e <_scanf_float+0x15e>
 8008e46:	3201      	adds	r2, #1
 8008e48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e4c:	60a2      	str	r2, [r4, #8]
 8008e4e:	68a3      	ldr	r3, [r4, #8]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	60a3      	str	r3, [r4, #8]
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	3301      	adds	r3, #1
 8008e58:	6123      	str	r3, [r4, #16]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	607b      	str	r3, [r7, #4]
 8008e62:	f340 8087 	ble.w	8008f74 <_scanf_float+0x284>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	e765      	b.n	8008d3a <_scanf_float+0x4a>
 8008e6e:	eb1a 0105 	adds.w	r1, sl, r5
 8008e72:	f47f af6f 	bne.w	8008d54 <_scanf_float+0x64>
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008e7c:	6022      	str	r2, [r4, #0]
 8008e7e:	460d      	mov	r5, r1
 8008e80:	468a      	mov	sl, r1
 8008e82:	f806 3b01 	strb.w	r3, [r6], #1
 8008e86:	e7e2      	b.n	8008e4e <_scanf_float+0x15e>
 8008e88:	6822      	ldr	r2, [r4, #0]
 8008e8a:	0610      	lsls	r0, r2, #24
 8008e8c:	f57f af62 	bpl.w	8008d54 <_scanf_float+0x64>
 8008e90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e94:	6022      	str	r2, [r4, #0]
 8008e96:	e7f4      	b.n	8008e82 <_scanf_float+0x192>
 8008e98:	f1ba 0f00 	cmp.w	sl, #0
 8008e9c:	d10e      	bne.n	8008ebc <_scanf_float+0x1cc>
 8008e9e:	f1b9 0f00 	cmp.w	r9, #0
 8008ea2:	d10e      	bne.n	8008ec2 <_scanf_float+0x1d2>
 8008ea4:	6822      	ldr	r2, [r4, #0]
 8008ea6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008eaa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008eae:	d108      	bne.n	8008ec2 <_scanf_float+0x1d2>
 8008eb0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008eb4:	6022      	str	r2, [r4, #0]
 8008eb6:	f04f 0a01 	mov.w	sl, #1
 8008eba:	e7e2      	b.n	8008e82 <_scanf_float+0x192>
 8008ebc:	f1ba 0f02 	cmp.w	sl, #2
 8008ec0:	d055      	beq.n	8008f6e <_scanf_float+0x27e>
 8008ec2:	2d01      	cmp	r5, #1
 8008ec4:	d002      	beq.n	8008ecc <_scanf_float+0x1dc>
 8008ec6:	2d04      	cmp	r5, #4
 8008ec8:	f47f af44 	bne.w	8008d54 <_scanf_float+0x64>
 8008ecc:	3501      	adds	r5, #1
 8008ece:	b2ed      	uxtb	r5, r5
 8008ed0:	e7d7      	b.n	8008e82 <_scanf_float+0x192>
 8008ed2:	f1ba 0f01 	cmp.w	sl, #1
 8008ed6:	f47f af3d 	bne.w	8008d54 <_scanf_float+0x64>
 8008eda:	f04f 0a02 	mov.w	sl, #2
 8008ede:	e7d0      	b.n	8008e82 <_scanf_float+0x192>
 8008ee0:	b97d      	cbnz	r5, 8008f02 <_scanf_float+0x212>
 8008ee2:	f1b9 0f00 	cmp.w	r9, #0
 8008ee6:	f47f af38 	bne.w	8008d5a <_scanf_float+0x6a>
 8008eea:	6822      	ldr	r2, [r4, #0]
 8008eec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008ef0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008ef4:	f040 8108 	bne.w	8009108 <_scanf_float+0x418>
 8008ef8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008efc:	6022      	str	r2, [r4, #0]
 8008efe:	2501      	movs	r5, #1
 8008f00:	e7bf      	b.n	8008e82 <_scanf_float+0x192>
 8008f02:	2d03      	cmp	r5, #3
 8008f04:	d0e2      	beq.n	8008ecc <_scanf_float+0x1dc>
 8008f06:	2d05      	cmp	r5, #5
 8008f08:	e7de      	b.n	8008ec8 <_scanf_float+0x1d8>
 8008f0a:	2d02      	cmp	r5, #2
 8008f0c:	f47f af22 	bne.w	8008d54 <_scanf_float+0x64>
 8008f10:	2503      	movs	r5, #3
 8008f12:	e7b6      	b.n	8008e82 <_scanf_float+0x192>
 8008f14:	2d06      	cmp	r5, #6
 8008f16:	f47f af1d 	bne.w	8008d54 <_scanf_float+0x64>
 8008f1a:	2507      	movs	r5, #7
 8008f1c:	e7b1      	b.n	8008e82 <_scanf_float+0x192>
 8008f1e:	6822      	ldr	r2, [r4, #0]
 8008f20:	0591      	lsls	r1, r2, #22
 8008f22:	f57f af17 	bpl.w	8008d54 <_scanf_float+0x64>
 8008f26:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008f2a:	6022      	str	r2, [r4, #0]
 8008f2c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f30:	e7a7      	b.n	8008e82 <_scanf_float+0x192>
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008f38:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008f3c:	d006      	beq.n	8008f4c <_scanf_float+0x25c>
 8008f3e:	0550      	lsls	r0, r2, #21
 8008f40:	f57f af08 	bpl.w	8008d54 <_scanf_float+0x64>
 8008f44:	f1b9 0f00 	cmp.w	r9, #0
 8008f48:	f000 80de 	beq.w	8009108 <_scanf_float+0x418>
 8008f4c:	0591      	lsls	r1, r2, #22
 8008f4e:	bf58      	it	pl
 8008f50:	9902      	ldrpl	r1, [sp, #8]
 8008f52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f56:	bf58      	it	pl
 8008f58:	eba9 0101 	subpl.w	r1, r9, r1
 8008f5c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008f60:	bf58      	it	pl
 8008f62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	f04f 0900 	mov.w	r9, #0
 8008f6c:	e789      	b.n	8008e82 <_scanf_float+0x192>
 8008f6e:	f04f 0a03 	mov.w	sl, #3
 8008f72:	e786      	b.n	8008e82 <_scanf_float+0x192>
 8008f74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008f78:	4639      	mov	r1, r7
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	4798      	blx	r3
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	f43f aedb 	beq.w	8008d3a <_scanf_float+0x4a>
 8008f84:	e6e6      	b.n	8008d54 <_scanf_float+0x64>
 8008f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f8e:	463a      	mov	r2, r7
 8008f90:	4640      	mov	r0, r8
 8008f92:	4798      	blx	r3
 8008f94:	6923      	ldr	r3, [r4, #16]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	6123      	str	r3, [r4, #16]
 8008f9a:	e6e8      	b.n	8008d6e <_scanf_float+0x7e>
 8008f9c:	1e6b      	subs	r3, r5, #1
 8008f9e:	2b06      	cmp	r3, #6
 8008fa0:	d824      	bhi.n	8008fec <_scanf_float+0x2fc>
 8008fa2:	2d02      	cmp	r5, #2
 8008fa4:	d836      	bhi.n	8009014 <_scanf_float+0x324>
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	429e      	cmp	r6, r3
 8008faa:	f67f aee4 	bls.w	8008d76 <_scanf_float+0x86>
 8008fae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fb6:	463a      	mov	r2, r7
 8008fb8:	4640      	mov	r0, r8
 8008fba:	4798      	blx	r3
 8008fbc:	6923      	ldr	r3, [r4, #16]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	e7f0      	b.n	8008fa6 <_scanf_float+0x2b6>
 8008fc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fc8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008fcc:	463a      	mov	r2, r7
 8008fce:	4640      	mov	r0, r8
 8008fd0:	4798      	blx	r3
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	6123      	str	r3, [r4, #16]
 8008fd8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fdc:	fa5f fa8a 	uxtb.w	sl, sl
 8008fe0:	f1ba 0f02 	cmp.w	sl, #2
 8008fe4:	d1ee      	bne.n	8008fc4 <_scanf_float+0x2d4>
 8008fe6:	3d03      	subs	r5, #3
 8008fe8:	b2ed      	uxtb	r5, r5
 8008fea:	1b76      	subs	r6, r6, r5
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	05da      	lsls	r2, r3, #23
 8008ff0:	d530      	bpl.n	8009054 <_scanf_float+0x364>
 8008ff2:	055b      	lsls	r3, r3, #21
 8008ff4:	d511      	bpl.n	800901a <_scanf_float+0x32a>
 8008ff6:	9b01      	ldr	r3, [sp, #4]
 8008ff8:	429e      	cmp	r6, r3
 8008ffa:	f67f aebc 	bls.w	8008d76 <_scanf_float+0x86>
 8008ffe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009002:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009006:	463a      	mov	r2, r7
 8009008:	4640      	mov	r0, r8
 800900a:	4798      	blx	r3
 800900c:	6923      	ldr	r3, [r4, #16]
 800900e:	3b01      	subs	r3, #1
 8009010:	6123      	str	r3, [r4, #16]
 8009012:	e7f0      	b.n	8008ff6 <_scanf_float+0x306>
 8009014:	46aa      	mov	sl, r5
 8009016:	46b3      	mov	fp, r6
 8009018:	e7de      	b.n	8008fd8 <_scanf_float+0x2e8>
 800901a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800901e:	6923      	ldr	r3, [r4, #16]
 8009020:	2965      	cmp	r1, #101	@ 0x65
 8009022:	f103 33ff 	add.w	r3, r3, #4294967295
 8009026:	f106 35ff 	add.w	r5, r6, #4294967295
 800902a:	6123      	str	r3, [r4, #16]
 800902c:	d00c      	beq.n	8009048 <_scanf_float+0x358>
 800902e:	2945      	cmp	r1, #69	@ 0x45
 8009030:	d00a      	beq.n	8009048 <_scanf_float+0x358>
 8009032:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009036:	463a      	mov	r2, r7
 8009038:	4640      	mov	r0, r8
 800903a:	4798      	blx	r3
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009042:	3b01      	subs	r3, #1
 8009044:	1eb5      	subs	r5, r6, #2
 8009046:	6123      	str	r3, [r4, #16]
 8009048:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800904c:	463a      	mov	r2, r7
 800904e:	4640      	mov	r0, r8
 8009050:	4798      	blx	r3
 8009052:	462e      	mov	r6, r5
 8009054:	6822      	ldr	r2, [r4, #0]
 8009056:	f012 0210 	ands.w	r2, r2, #16
 800905a:	d001      	beq.n	8009060 <_scanf_float+0x370>
 800905c:	2000      	movs	r0, #0
 800905e:	e68b      	b.n	8008d78 <_scanf_float+0x88>
 8009060:	7032      	strb	r2, [r6, #0]
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800906c:	d11c      	bne.n	80090a8 <_scanf_float+0x3b8>
 800906e:	9b02      	ldr	r3, [sp, #8]
 8009070:	454b      	cmp	r3, r9
 8009072:	eba3 0209 	sub.w	r2, r3, r9
 8009076:	d123      	bne.n	80090c0 <_scanf_float+0x3d0>
 8009078:	9901      	ldr	r1, [sp, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	4640      	mov	r0, r8
 800907e:	f002 fc2b 	bl	800b8d8 <_strtod_r>
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	6821      	ldr	r1, [r4, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f011 0f02 	tst.w	r1, #2
 800908c:	ec57 6b10 	vmov	r6, r7, d0
 8009090:	f103 0204 	add.w	r2, r3, #4
 8009094:	d01f      	beq.n	80090d6 <_scanf_float+0x3e6>
 8009096:	9903      	ldr	r1, [sp, #12]
 8009098:	600a      	str	r2, [r1, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	e9c3 6700 	strd	r6, r7, [r3]
 80090a0:	68e3      	ldr	r3, [r4, #12]
 80090a2:	3301      	adds	r3, #1
 80090a4:	60e3      	str	r3, [r4, #12]
 80090a6:	e7d9      	b.n	800905c <_scanf_float+0x36c>
 80090a8:	9b04      	ldr	r3, [sp, #16]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0e4      	beq.n	8009078 <_scanf_float+0x388>
 80090ae:	9905      	ldr	r1, [sp, #20]
 80090b0:	230a      	movs	r3, #10
 80090b2:	3101      	adds	r1, #1
 80090b4:	4640      	mov	r0, r8
 80090b6:	f002 fc8f 	bl	800b9d8 <_strtol_r>
 80090ba:	9b04      	ldr	r3, [sp, #16]
 80090bc:	9e05      	ldr	r6, [sp, #20]
 80090be:	1ac2      	subs	r2, r0, r3
 80090c0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80090c4:	429e      	cmp	r6, r3
 80090c6:	bf28      	it	cs
 80090c8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80090cc:	4910      	ldr	r1, [pc, #64]	@ (8009110 <_scanf_float+0x420>)
 80090ce:	4630      	mov	r0, r6
 80090d0:	f000 f918 	bl	8009304 <siprintf>
 80090d4:	e7d0      	b.n	8009078 <_scanf_float+0x388>
 80090d6:	f011 0f04 	tst.w	r1, #4
 80090da:	9903      	ldr	r1, [sp, #12]
 80090dc:	600a      	str	r2, [r1, #0]
 80090de:	d1dc      	bne.n	800909a <_scanf_float+0x3aa>
 80090e0:	681d      	ldr	r5, [r3, #0]
 80090e2:	4632      	mov	r2, r6
 80090e4:	463b      	mov	r3, r7
 80090e6:	4630      	mov	r0, r6
 80090e8:	4639      	mov	r1, r7
 80090ea:	f7f7 fd1f 	bl	8000b2c <__aeabi_dcmpun>
 80090ee:	b128      	cbz	r0, 80090fc <_scanf_float+0x40c>
 80090f0:	4808      	ldr	r0, [pc, #32]	@ (8009114 <_scanf_float+0x424>)
 80090f2:	f000 f9eb 	bl	80094cc <nanf>
 80090f6:	ed85 0a00 	vstr	s0, [r5]
 80090fa:	e7d1      	b.n	80090a0 <_scanf_float+0x3b0>
 80090fc:	4630      	mov	r0, r6
 80090fe:	4639      	mov	r1, r7
 8009100:	f7f7 fd72 	bl	8000be8 <__aeabi_d2f>
 8009104:	6028      	str	r0, [r5, #0]
 8009106:	e7cb      	b.n	80090a0 <_scanf_float+0x3b0>
 8009108:	f04f 0900 	mov.w	r9, #0
 800910c:	e629      	b.n	8008d62 <_scanf_float+0x72>
 800910e:	bf00      	nop
 8009110:	0800d27c 	.word	0x0800d27c
 8009114:	0800d615 	.word	0x0800d615

08009118 <std>:
 8009118:	2300      	movs	r3, #0
 800911a:	b510      	push	{r4, lr}
 800911c:	4604      	mov	r4, r0
 800911e:	e9c0 3300 	strd	r3, r3, [r0]
 8009122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009126:	6083      	str	r3, [r0, #8]
 8009128:	8181      	strh	r1, [r0, #12]
 800912a:	6643      	str	r3, [r0, #100]	@ 0x64
 800912c:	81c2      	strh	r2, [r0, #14]
 800912e:	6183      	str	r3, [r0, #24]
 8009130:	4619      	mov	r1, r3
 8009132:	2208      	movs	r2, #8
 8009134:	305c      	adds	r0, #92	@ 0x5c
 8009136:	f000 f948 	bl	80093ca <memset>
 800913a:	4b0d      	ldr	r3, [pc, #52]	@ (8009170 <std+0x58>)
 800913c:	6263      	str	r3, [r4, #36]	@ 0x24
 800913e:	4b0d      	ldr	r3, [pc, #52]	@ (8009174 <std+0x5c>)
 8009140:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009142:	4b0d      	ldr	r3, [pc, #52]	@ (8009178 <std+0x60>)
 8009144:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009146:	4b0d      	ldr	r3, [pc, #52]	@ (800917c <std+0x64>)
 8009148:	6323      	str	r3, [r4, #48]	@ 0x30
 800914a:	4b0d      	ldr	r3, [pc, #52]	@ (8009180 <std+0x68>)
 800914c:	6224      	str	r4, [r4, #32]
 800914e:	429c      	cmp	r4, r3
 8009150:	d006      	beq.n	8009160 <std+0x48>
 8009152:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009156:	4294      	cmp	r4, r2
 8009158:	d002      	beq.n	8009160 <std+0x48>
 800915a:	33d0      	adds	r3, #208	@ 0xd0
 800915c:	429c      	cmp	r4, r3
 800915e:	d105      	bne.n	800916c <std+0x54>
 8009160:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009168:	f000 b9ac 	b.w	80094c4 <__retarget_lock_init_recursive>
 800916c:	bd10      	pop	{r4, pc}
 800916e:	bf00      	nop
 8009170:	08009345 	.word	0x08009345
 8009174:	08009367 	.word	0x08009367
 8009178:	0800939f 	.word	0x0800939f
 800917c:	080093c3 	.word	0x080093c3
 8009180:	20000a78 	.word	0x20000a78

08009184 <stdio_exit_handler>:
 8009184:	4a02      	ldr	r2, [pc, #8]	@ (8009190 <stdio_exit_handler+0xc>)
 8009186:	4903      	ldr	r1, [pc, #12]	@ (8009194 <stdio_exit_handler+0x10>)
 8009188:	4803      	ldr	r0, [pc, #12]	@ (8009198 <stdio_exit_handler+0x14>)
 800918a:	f000 b869 	b.w	8009260 <_fwalk_sglue>
 800918e:	bf00      	nop
 8009190:	2000000c 	.word	0x2000000c
 8009194:	0800bd95 	.word	0x0800bd95
 8009198:	2000001c 	.word	0x2000001c

0800919c <cleanup_stdio>:
 800919c:	6841      	ldr	r1, [r0, #4]
 800919e:	4b0c      	ldr	r3, [pc, #48]	@ (80091d0 <cleanup_stdio+0x34>)
 80091a0:	4299      	cmp	r1, r3
 80091a2:	b510      	push	{r4, lr}
 80091a4:	4604      	mov	r4, r0
 80091a6:	d001      	beq.n	80091ac <cleanup_stdio+0x10>
 80091a8:	f002 fdf4 	bl	800bd94 <_fflush_r>
 80091ac:	68a1      	ldr	r1, [r4, #8]
 80091ae:	4b09      	ldr	r3, [pc, #36]	@ (80091d4 <cleanup_stdio+0x38>)
 80091b0:	4299      	cmp	r1, r3
 80091b2:	d002      	beq.n	80091ba <cleanup_stdio+0x1e>
 80091b4:	4620      	mov	r0, r4
 80091b6:	f002 fded 	bl	800bd94 <_fflush_r>
 80091ba:	68e1      	ldr	r1, [r4, #12]
 80091bc:	4b06      	ldr	r3, [pc, #24]	@ (80091d8 <cleanup_stdio+0x3c>)
 80091be:	4299      	cmp	r1, r3
 80091c0:	d004      	beq.n	80091cc <cleanup_stdio+0x30>
 80091c2:	4620      	mov	r0, r4
 80091c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091c8:	f002 bde4 	b.w	800bd94 <_fflush_r>
 80091cc:	bd10      	pop	{r4, pc}
 80091ce:	bf00      	nop
 80091d0:	20000a78 	.word	0x20000a78
 80091d4:	20000ae0 	.word	0x20000ae0
 80091d8:	20000b48 	.word	0x20000b48

080091dc <global_stdio_init.part.0>:
 80091dc:	b510      	push	{r4, lr}
 80091de:	4b0b      	ldr	r3, [pc, #44]	@ (800920c <global_stdio_init.part.0+0x30>)
 80091e0:	4c0b      	ldr	r4, [pc, #44]	@ (8009210 <global_stdio_init.part.0+0x34>)
 80091e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009214 <global_stdio_init.part.0+0x38>)
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	4620      	mov	r0, r4
 80091e8:	2200      	movs	r2, #0
 80091ea:	2104      	movs	r1, #4
 80091ec:	f7ff ff94 	bl	8009118 <std>
 80091f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80091f4:	2201      	movs	r2, #1
 80091f6:	2109      	movs	r1, #9
 80091f8:	f7ff ff8e 	bl	8009118 <std>
 80091fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009200:	2202      	movs	r2, #2
 8009202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009206:	2112      	movs	r1, #18
 8009208:	f7ff bf86 	b.w	8009118 <std>
 800920c:	20000bb0 	.word	0x20000bb0
 8009210:	20000a78 	.word	0x20000a78
 8009214:	08009185 	.word	0x08009185

08009218 <__sfp_lock_acquire>:
 8009218:	4801      	ldr	r0, [pc, #4]	@ (8009220 <__sfp_lock_acquire+0x8>)
 800921a:	f000 b954 	b.w	80094c6 <__retarget_lock_acquire_recursive>
 800921e:	bf00      	nop
 8009220:	20000bb9 	.word	0x20000bb9

08009224 <__sfp_lock_release>:
 8009224:	4801      	ldr	r0, [pc, #4]	@ (800922c <__sfp_lock_release+0x8>)
 8009226:	f000 b94f 	b.w	80094c8 <__retarget_lock_release_recursive>
 800922a:	bf00      	nop
 800922c:	20000bb9 	.word	0x20000bb9

08009230 <__sinit>:
 8009230:	b510      	push	{r4, lr}
 8009232:	4604      	mov	r4, r0
 8009234:	f7ff fff0 	bl	8009218 <__sfp_lock_acquire>
 8009238:	6a23      	ldr	r3, [r4, #32]
 800923a:	b11b      	cbz	r3, 8009244 <__sinit+0x14>
 800923c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009240:	f7ff bff0 	b.w	8009224 <__sfp_lock_release>
 8009244:	4b04      	ldr	r3, [pc, #16]	@ (8009258 <__sinit+0x28>)
 8009246:	6223      	str	r3, [r4, #32]
 8009248:	4b04      	ldr	r3, [pc, #16]	@ (800925c <__sinit+0x2c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1f5      	bne.n	800923c <__sinit+0xc>
 8009250:	f7ff ffc4 	bl	80091dc <global_stdio_init.part.0>
 8009254:	e7f2      	b.n	800923c <__sinit+0xc>
 8009256:	bf00      	nop
 8009258:	0800919d 	.word	0x0800919d
 800925c:	20000bb0 	.word	0x20000bb0

08009260 <_fwalk_sglue>:
 8009260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009264:	4607      	mov	r7, r0
 8009266:	4688      	mov	r8, r1
 8009268:	4614      	mov	r4, r2
 800926a:	2600      	movs	r6, #0
 800926c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009270:	f1b9 0901 	subs.w	r9, r9, #1
 8009274:	d505      	bpl.n	8009282 <_fwalk_sglue+0x22>
 8009276:	6824      	ldr	r4, [r4, #0]
 8009278:	2c00      	cmp	r4, #0
 800927a:	d1f7      	bne.n	800926c <_fwalk_sglue+0xc>
 800927c:	4630      	mov	r0, r6
 800927e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009282:	89ab      	ldrh	r3, [r5, #12]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d907      	bls.n	8009298 <_fwalk_sglue+0x38>
 8009288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800928c:	3301      	adds	r3, #1
 800928e:	d003      	beq.n	8009298 <_fwalk_sglue+0x38>
 8009290:	4629      	mov	r1, r5
 8009292:	4638      	mov	r0, r7
 8009294:	47c0      	blx	r8
 8009296:	4306      	orrs	r6, r0
 8009298:	3568      	adds	r5, #104	@ 0x68
 800929a:	e7e9      	b.n	8009270 <_fwalk_sglue+0x10>

0800929c <sniprintf>:
 800929c:	b40c      	push	{r2, r3}
 800929e:	b530      	push	{r4, r5, lr}
 80092a0:	4b17      	ldr	r3, [pc, #92]	@ (8009300 <sniprintf+0x64>)
 80092a2:	1e0c      	subs	r4, r1, #0
 80092a4:	681d      	ldr	r5, [r3, #0]
 80092a6:	b09d      	sub	sp, #116	@ 0x74
 80092a8:	da08      	bge.n	80092bc <sniprintf+0x20>
 80092aa:	238b      	movs	r3, #139	@ 0x8b
 80092ac:	602b      	str	r3, [r5, #0]
 80092ae:	f04f 30ff 	mov.w	r0, #4294967295
 80092b2:	b01d      	add	sp, #116	@ 0x74
 80092b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092b8:	b002      	add	sp, #8
 80092ba:	4770      	bx	lr
 80092bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80092c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092c4:	bf14      	ite	ne
 80092c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80092ca:	4623      	moveq	r3, r4
 80092cc:	9304      	str	r3, [sp, #16]
 80092ce:	9307      	str	r3, [sp, #28]
 80092d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80092d4:	9002      	str	r0, [sp, #8]
 80092d6:	9006      	str	r0, [sp, #24]
 80092d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80092de:	ab21      	add	r3, sp, #132	@ 0x84
 80092e0:	a902      	add	r1, sp, #8
 80092e2:	4628      	mov	r0, r5
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	f002 fbd5 	bl	800ba94 <_svfiprintf_r>
 80092ea:	1c43      	adds	r3, r0, #1
 80092ec:	bfbc      	itt	lt
 80092ee:	238b      	movlt	r3, #139	@ 0x8b
 80092f0:	602b      	strlt	r3, [r5, #0]
 80092f2:	2c00      	cmp	r4, #0
 80092f4:	d0dd      	beq.n	80092b2 <sniprintf+0x16>
 80092f6:	9b02      	ldr	r3, [sp, #8]
 80092f8:	2200      	movs	r2, #0
 80092fa:	701a      	strb	r2, [r3, #0]
 80092fc:	e7d9      	b.n	80092b2 <sniprintf+0x16>
 80092fe:	bf00      	nop
 8009300:	20000018 	.word	0x20000018

08009304 <siprintf>:
 8009304:	b40e      	push	{r1, r2, r3}
 8009306:	b500      	push	{lr}
 8009308:	b09c      	sub	sp, #112	@ 0x70
 800930a:	ab1d      	add	r3, sp, #116	@ 0x74
 800930c:	9002      	str	r0, [sp, #8]
 800930e:	9006      	str	r0, [sp, #24]
 8009310:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009314:	4809      	ldr	r0, [pc, #36]	@ (800933c <siprintf+0x38>)
 8009316:	9107      	str	r1, [sp, #28]
 8009318:	9104      	str	r1, [sp, #16]
 800931a:	4909      	ldr	r1, [pc, #36]	@ (8009340 <siprintf+0x3c>)
 800931c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009320:	9105      	str	r1, [sp, #20]
 8009322:	6800      	ldr	r0, [r0, #0]
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	a902      	add	r1, sp, #8
 8009328:	f002 fbb4 	bl	800ba94 <_svfiprintf_r>
 800932c:	9b02      	ldr	r3, [sp, #8]
 800932e:	2200      	movs	r2, #0
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	b01c      	add	sp, #112	@ 0x70
 8009334:	f85d eb04 	ldr.w	lr, [sp], #4
 8009338:	b003      	add	sp, #12
 800933a:	4770      	bx	lr
 800933c:	20000018 	.word	0x20000018
 8009340:	ffff0208 	.word	0xffff0208

08009344 <__sread>:
 8009344:	b510      	push	{r4, lr}
 8009346:	460c      	mov	r4, r1
 8009348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800934c:	f000 f86c 	bl	8009428 <_read_r>
 8009350:	2800      	cmp	r0, #0
 8009352:	bfab      	itete	ge
 8009354:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009356:	89a3      	ldrhlt	r3, [r4, #12]
 8009358:	181b      	addge	r3, r3, r0
 800935a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800935e:	bfac      	ite	ge
 8009360:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009362:	81a3      	strhlt	r3, [r4, #12]
 8009364:	bd10      	pop	{r4, pc}

08009366 <__swrite>:
 8009366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800936a:	461f      	mov	r7, r3
 800936c:	898b      	ldrh	r3, [r1, #12]
 800936e:	05db      	lsls	r3, r3, #23
 8009370:	4605      	mov	r5, r0
 8009372:	460c      	mov	r4, r1
 8009374:	4616      	mov	r6, r2
 8009376:	d505      	bpl.n	8009384 <__swrite+0x1e>
 8009378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800937c:	2302      	movs	r3, #2
 800937e:	2200      	movs	r2, #0
 8009380:	f000 f840 	bl	8009404 <_lseek_r>
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800938a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800938e:	81a3      	strh	r3, [r4, #12]
 8009390:	4632      	mov	r2, r6
 8009392:	463b      	mov	r3, r7
 8009394:	4628      	mov	r0, r5
 8009396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800939a:	f000 b857 	b.w	800944c <_write_r>

0800939e <__sseek>:
 800939e:	b510      	push	{r4, lr}
 80093a0:	460c      	mov	r4, r1
 80093a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a6:	f000 f82d 	bl	8009404 <_lseek_r>
 80093aa:	1c43      	adds	r3, r0, #1
 80093ac:	89a3      	ldrh	r3, [r4, #12]
 80093ae:	bf15      	itete	ne
 80093b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093ba:	81a3      	strheq	r3, [r4, #12]
 80093bc:	bf18      	it	ne
 80093be:	81a3      	strhne	r3, [r4, #12]
 80093c0:	bd10      	pop	{r4, pc}

080093c2 <__sclose>:
 80093c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c6:	f000 b80d 	b.w	80093e4 <_close_r>

080093ca <memset>:
 80093ca:	4402      	add	r2, r0
 80093cc:	4603      	mov	r3, r0
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d100      	bne.n	80093d4 <memset+0xa>
 80093d2:	4770      	bx	lr
 80093d4:	f803 1b01 	strb.w	r1, [r3], #1
 80093d8:	e7f9      	b.n	80093ce <memset+0x4>
	...

080093dc <_localeconv_r>:
 80093dc:	4800      	ldr	r0, [pc, #0]	@ (80093e0 <_localeconv_r+0x4>)
 80093de:	4770      	bx	lr
 80093e0:	20000158 	.word	0x20000158

080093e4 <_close_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4d06      	ldr	r5, [pc, #24]	@ (8009400 <_close_r+0x1c>)
 80093e8:	2300      	movs	r3, #0
 80093ea:	4604      	mov	r4, r0
 80093ec:	4608      	mov	r0, r1
 80093ee:	602b      	str	r3, [r5, #0]
 80093f0:	f7f9 f9e0 	bl	80027b4 <_close>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d102      	bne.n	80093fe <_close_r+0x1a>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b103      	cbz	r3, 80093fe <_close_r+0x1a>
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	20000bb4 	.word	0x20000bb4

08009404 <_lseek_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d07      	ldr	r5, [pc, #28]	@ (8009424 <_lseek_r+0x20>)
 8009408:	4604      	mov	r4, r0
 800940a:	4608      	mov	r0, r1
 800940c:	4611      	mov	r1, r2
 800940e:	2200      	movs	r2, #0
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	f7f9 f9f5 	bl	8002802 <_lseek>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_lseek_r+0x1e>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_lseek_r+0x1e>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20000bb4 	.word	0x20000bb4

08009428 <_read_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4d07      	ldr	r5, [pc, #28]	@ (8009448 <_read_r+0x20>)
 800942c:	4604      	mov	r4, r0
 800942e:	4608      	mov	r0, r1
 8009430:	4611      	mov	r1, r2
 8009432:	2200      	movs	r2, #0
 8009434:	602a      	str	r2, [r5, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	f7f9 f983 	bl	8002742 <_read>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_read_r+0x1e>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_read_r+0x1e>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	20000bb4 	.word	0x20000bb4

0800944c <_write_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4d07      	ldr	r5, [pc, #28]	@ (800946c <_write_r+0x20>)
 8009450:	4604      	mov	r4, r0
 8009452:	4608      	mov	r0, r1
 8009454:	4611      	mov	r1, r2
 8009456:	2200      	movs	r2, #0
 8009458:	602a      	str	r2, [r5, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	f7f9 f98e 	bl	800277c <_write>
 8009460:	1c43      	adds	r3, r0, #1
 8009462:	d102      	bne.n	800946a <_write_r+0x1e>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	b103      	cbz	r3, 800946a <_write_r+0x1e>
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	bd38      	pop	{r3, r4, r5, pc}
 800946c:	20000bb4 	.word	0x20000bb4

08009470 <__errno>:
 8009470:	4b01      	ldr	r3, [pc, #4]	@ (8009478 <__errno+0x8>)
 8009472:	6818      	ldr	r0, [r3, #0]
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	20000018 	.word	0x20000018

0800947c <__libc_init_array>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	4d0d      	ldr	r5, [pc, #52]	@ (80094b4 <__libc_init_array+0x38>)
 8009480:	4c0d      	ldr	r4, [pc, #52]	@ (80094b8 <__libc_init_array+0x3c>)
 8009482:	1b64      	subs	r4, r4, r5
 8009484:	10a4      	asrs	r4, r4, #2
 8009486:	2600      	movs	r6, #0
 8009488:	42a6      	cmp	r6, r4
 800948a:	d109      	bne.n	80094a0 <__libc_init_array+0x24>
 800948c:	4d0b      	ldr	r5, [pc, #44]	@ (80094bc <__libc_init_array+0x40>)
 800948e:	4c0c      	ldr	r4, [pc, #48]	@ (80094c0 <__libc_init_array+0x44>)
 8009490:	f003 fdf4 	bl	800d07c <_init>
 8009494:	1b64      	subs	r4, r4, r5
 8009496:	10a4      	asrs	r4, r4, #2
 8009498:	2600      	movs	r6, #0
 800949a:	42a6      	cmp	r6, r4
 800949c:	d105      	bne.n	80094aa <__libc_init_array+0x2e>
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a4:	4798      	blx	r3
 80094a6:	3601      	adds	r6, #1
 80094a8:	e7ee      	b.n	8009488 <__libc_init_array+0xc>
 80094aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ae:	4798      	blx	r3
 80094b0:	3601      	adds	r6, #1
 80094b2:	e7f2      	b.n	800949a <__libc_init_array+0x1e>
 80094b4:	0800d680 	.word	0x0800d680
 80094b8:	0800d680 	.word	0x0800d680
 80094bc:	0800d680 	.word	0x0800d680
 80094c0:	0800d684 	.word	0x0800d684

080094c4 <__retarget_lock_init_recursive>:
 80094c4:	4770      	bx	lr

080094c6 <__retarget_lock_acquire_recursive>:
 80094c6:	4770      	bx	lr

080094c8 <__retarget_lock_release_recursive>:
 80094c8:	4770      	bx	lr
	...

080094cc <nanf>:
 80094cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80094d4 <nanf+0x8>
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	7fc00000 	.word	0x7fc00000

080094d8 <quorem>:
 80094d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	6903      	ldr	r3, [r0, #16]
 80094de:	690c      	ldr	r4, [r1, #16]
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	4607      	mov	r7, r0
 80094e4:	db7e      	blt.n	80095e4 <quorem+0x10c>
 80094e6:	3c01      	subs	r4, #1
 80094e8:	f101 0814 	add.w	r8, r1, #20
 80094ec:	00a3      	lsls	r3, r4, #2
 80094ee:	f100 0514 	add.w	r5, r0, #20
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009502:	3301      	adds	r3, #1
 8009504:	429a      	cmp	r2, r3
 8009506:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800950a:	fbb2 f6f3 	udiv	r6, r2, r3
 800950e:	d32e      	bcc.n	800956e <quorem+0x96>
 8009510:	f04f 0a00 	mov.w	sl, #0
 8009514:	46c4      	mov	ip, r8
 8009516:	46ae      	mov	lr, r5
 8009518:	46d3      	mov	fp, sl
 800951a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800951e:	b298      	uxth	r0, r3
 8009520:	fb06 a000 	mla	r0, r6, r0, sl
 8009524:	0c02      	lsrs	r2, r0, #16
 8009526:	0c1b      	lsrs	r3, r3, #16
 8009528:	fb06 2303 	mla	r3, r6, r3, r2
 800952c:	f8de 2000 	ldr.w	r2, [lr]
 8009530:	b280      	uxth	r0, r0
 8009532:	b292      	uxth	r2, r2
 8009534:	1a12      	subs	r2, r2, r0
 8009536:	445a      	add	r2, fp
 8009538:	f8de 0000 	ldr.w	r0, [lr]
 800953c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009540:	b29b      	uxth	r3, r3
 8009542:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009546:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800954a:	b292      	uxth	r2, r2
 800954c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009550:	45e1      	cmp	r9, ip
 8009552:	f84e 2b04 	str.w	r2, [lr], #4
 8009556:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800955a:	d2de      	bcs.n	800951a <quorem+0x42>
 800955c:	9b00      	ldr	r3, [sp, #0]
 800955e:	58eb      	ldr	r3, [r5, r3]
 8009560:	b92b      	cbnz	r3, 800956e <quorem+0x96>
 8009562:	9b01      	ldr	r3, [sp, #4]
 8009564:	3b04      	subs	r3, #4
 8009566:	429d      	cmp	r5, r3
 8009568:	461a      	mov	r2, r3
 800956a:	d32f      	bcc.n	80095cc <quorem+0xf4>
 800956c:	613c      	str	r4, [r7, #16]
 800956e:	4638      	mov	r0, r7
 8009570:	f001 f9c2 	bl	800a8f8 <__mcmp>
 8009574:	2800      	cmp	r0, #0
 8009576:	db25      	blt.n	80095c4 <quorem+0xec>
 8009578:	4629      	mov	r1, r5
 800957a:	2000      	movs	r0, #0
 800957c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009580:	f8d1 c000 	ldr.w	ip, [r1]
 8009584:	fa1f fe82 	uxth.w	lr, r2
 8009588:	fa1f f38c 	uxth.w	r3, ip
 800958c:	eba3 030e 	sub.w	r3, r3, lr
 8009590:	4403      	add	r3, r0
 8009592:	0c12      	lsrs	r2, r2, #16
 8009594:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009598:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800959c:	b29b      	uxth	r3, r3
 800959e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095a2:	45c1      	cmp	r9, r8
 80095a4:	f841 3b04 	str.w	r3, [r1], #4
 80095a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80095ac:	d2e6      	bcs.n	800957c <quorem+0xa4>
 80095ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095b6:	b922      	cbnz	r2, 80095c2 <quorem+0xea>
 80095b8:	3b04      	subs	r3, #4
 80095ba:	429d      	cmp	r5, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	d30b      	bcc.n	80095d8 <quorem+0x100>
 80095c0:	613c      	str	r4, [r7, #16]
 80095c2:	3601      	adds	r6, #1
 80095c4:	4630      	mov	r0, r6
 80095c6:	b003      	add	sp, #12
 80095c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095cc:	6812      	ldr	r2, [r2, #0]
 80095ce:	3b04      	subs	r3, #4
 80095d0:	2a00      	cmp	r2, #0
 80095d2:	d1cb      	bne.n	800956c <quorem+0x94>
 80095d4:	3c01      	subs	r4, #1
 80095d6:	e7c6      	b.n	8009566 <quorem+0x8e>
 80095d8:	6812      	ldr	r2, [r2, #0]
 80095da:	3b04      	subs	r3, #4
 80095dc:	2a00      	cmp	r2, #0
 80095de:	d1ef      	bne.n	80095c0 <quorem+0xe8>
 80095e0:	3c01      	subs	r4, #1
 80095e2:	e7ea      	b.n	80095ba <quorem+0xe2>
 80095e4:	2000      	movs	r0, #0
 80095e6:	e7ee      	b.n	80095c6 <quorem+0xee>

080095e8 <_dtoa_r>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	69c7      	ldr	r7, [r0, #28]
 80095ee:	b099      	sub	sp, #100	@ 0x64
 80095f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80095f4:	ec55 4b10 	vmov	r4, r5, d0
 80095f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80095fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80095fc:	4683      	mov	fp, r0
 80095fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8009600:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009602:	b97f      	cbnz	r7, 8009624 <_dtoa_r+0x3c>
 8009604:	2010      	movs	r0, #16
 8009606:	f000 fdfd 	bl	800a204 <malloc>
 800960a:	4602      	mov	r2, r0
 800960c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009610:	b920      	cbnz	r0, 800961c <_dtoa_r+0x34>
 8009612:	4ba7      	ldr	r3, [pc, #668]	@ (80098b0 <_dtoa_r+0x2c8>)
 8009614:	21ef      	movs	r1, #239	@ 0xef
 8009616:	48a7      	ldr	r0, [pc, #668]	@ (80098b4 <_dtoa_r+0x2cc>)
 8009618:	f002 fc36 	bl	800be88 <__assert_func>
 800961c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009620:	6007      	str	r7, [r0, #0]
 8009622:	60c7      	str	r7, [r0, #12]
 8009624:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009628:	6819      	ldr	r1, [r3, #0]
 800962a:	b159      	cbz	r1, 8009644 <_dtoa_r+0x5c>
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	604a      	str	r2, [r1, #4]
 8009630:	2301      	movs	r3, #1
 8009632:	4093      	lsls	r3, r2
 8009634:	608b      	str	r3, [r1, #8]
 8009636:	4658      	mov	r0, fp
 8009638:	f000 feda 	bl	800a3f0 <_Bfree>
 800963c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	1e2b      	subs	r3, r5, #0
 8009646:	bfb9      	ittee	lt
 8009648:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800964c:	9303      	strlt	r3, [sp, #12]
 800964e:	2300      	movge	r3, #0
 8009650:	6033      	strge	r3, [r6, #0]
 8009652:	9f03      	ldr	r7, [sp, #12]
 8009654:	4b98      	ldr	r3, [pc, #608]	@ (80098b8 <_dtoa_r+0x2d0>)
 8009656:	bfbc      	itt	lt
 8009658:	2201      	movlt	r2, #1
 800965a:	6032      	strlt	r2, [r6, #0]
 800965c:	43bb      	bics	r3, r7
 800965e:	d112      	bne.n	8009686 <_dtoa_r+0x9e>
 8009660:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009662:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800966c:	4323      	orrs	r3, r4
 800966e:	f000 854d 	beq.w	800a10c <_dtoa_r+0xb24>
 8009672:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009674:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80098cc <_dtoa_r+0x2e4>
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 854f 	beq.w	800a11c <_dtoa_r+0xb34>
 800967e:	f10a 0303 	add.w	r3, sl, #3
 8009682:	f000 bd49 	b.w	800a118 <_dtoa_r+0xb30>
 8009686:	ed9d 7b02 	vldr	d7, [sp, #8]
 800968a:	2200      	movs	r2, #0
 800968c:	ec51 0b17 	vmov	r0, r1, d7
 8009690:	2300      	movs	r3, #0
 8009692:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009696:	f7f7 fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800969a:	4680      	mov	r8, r0
 800969c:	b158      	cbz	r0, 80096b6 <_dtoa_r+0xce>
 800969e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096a0:	2301      	movs	r3, #1
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096a6:	b113      	cbz	r3, 80096ae <_dtoa_r+0xc6>
 80096a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80096aa:	4b84      	ldr	r3, [pc, #528]	@ (80098bc <_dtoa_r+0x2d4>)
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80098d0 <_dtoa_r+0x2e8>
 80096b2:	f000 bd33 	b.w	800a11c <_dtoa_r+0xb34>
 80096b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80096ba:	aa16      	add	r2, sp, #88	@ 0x58
 80096bc:	a917      	add	r1, sp, #92	@ 0x5c
 80096be:	4658      	mov	r0, fp
 80096c0:	f001 fa3a 	bl	800ab38 <__d2b>
 80096c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80096c8:	4681      	mov	r9, r0
 80096ca:	2e00      	cmp	r6, #0
 80096cc:	d077      	beq.n	80097be <_dtoa_r+0x1d6>
 80096ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80096d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80096e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80096e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80096e8:	4619      	mov	r1, r3
 80096ea:	2200      	movs	r2, #0
 80096ec:	4b74      	ldr	r3, [pc, #464]	@ (80098c0 <_dtoa_r+0x2d8>)
 80096ee:	f7f6 fdcb 	bl	8000288 <__aeabi_dsub>
 80096f2:	a369      	add	r3, pc, #420	@ (adr r3, 8009898 <_dtoa_r+0x2b0>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f7f6 ff7e 	bl	80005f8 <__aeabi_dmul>
 80096fc:	a368      	add	r3, pc, #416	@ (adr r3, 80098a0 <_dtoa_r+0x2b8>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	f7f6 fdc3 	bl	800028c <__adddf3>
 8009706:	4604      	mov	r4, r0
 8009708:	4630      	mov	r0, r6
 800970a:	460d      	mov	r5, r1
 800970c:	f7f6 ff0a 	bl	8000524 <__aeabi_i2d>
 8009710:	a365      	add	r3, pc, #404	@ (adr r3, 80098a8 <_dtoa_r+0x2c0>)
 8009712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009716:	f7f6 ff6f 	bl	80005f8 <__aeabi_dmul>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	4620      	mov	r0, r4
 8009720:	4629      	mov	r1, r5
 8009722:	f7f6 fdb3 	bl	800028c <__adddf3>
 8009726:	4604      	mov	r4, r0
 8009728:	460d      	mov	r5, r1
 800972a:	f7f7 fa15 	bl	8000b58 <__aeabi_d2iz>
 800972e:	2200      	movs	r2, #0
 8009730:	4607      	mov	r7, r0
 8009732:	2300      	movs	r3, #0
 8009734:	4620      	mov	r0, r4
 8009736:	4629      	mov	r1, r5
 8009738:	f7f7 f9d0 	bl	8000adc <__aeabi_dcmplt>
 800973c:	b140      	cbz	r0, 8009750 <_dtoa_r+0x168>
 800973e:	4638      	mov	r0, r7
 8009740:	f7f6 fef0 	bl	8000524 <__aeabi_i2d>
 8009744:	4622      	mov	r2, r4
 8009746:	462b      	mov	r3, r5
 8009748:	f7f7 f9be 	bl	8000ac8 <__aeabi_dcmpeq>
 800974c:	b900      	cbnz	r0, 8009750 <_dtoa_r+0x168>
 800974e:	3f01      	subs	r7, #1
 8009750:	2f16      	cmp	r7, #22
 8009752:	d851      	bhi.n	80097f8 <_dtoa_r+0x210>
 8009754:	4b5b      	ldr	r3, [pc, #364]	@ (80098c4 <_dtoa_r+0x2dc>)
 8009756:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009762:	f7f7 f9bb 	bl	8000adc <__aeabi_dcmplt>
 8009766:	2800      	cmp	r0, #0
 8009768:	d048      	beq.n	80097fc <_dtoa_r+0x214>
 800976a:	3f01      	subs	r7, #1
 800976c:	2300      	movs	r3, #0
 800976e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009770:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009772:	1b9b      	subs	r3, r3, r6
 8009774:	1e5a      	subs	r2, r3, #1
 8009776:	bf44      	itt	mi
 8009778:	f1c3 0801 	rsbmi	r8, r3, #1
 800977c:	2300      	movmi	r3, #0
 800977e:	9208      	str	r2, [sp, #32]
 8009780:	bf54      	ite	pl
 8009782:	f04f 0800 	movpl.w	r8, #0
 8009786:	9308      	strmi	r3, [sp, #32]
 8009788:	2f00      	cmp	r7, #0
 800978a:	db39      	blt.n	8009800 <_dtoa_r+0x218>
 800978c:	9b08      	ldr	r3, [sp, #32]
 800978e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009790:	443b      	add	r3, r7
 8009792:	9308      	str	r3, [sp, #32]
 8009794:	2300      	movs	r3, #0
 8009796:	930a      	str	r3, [sp, #40]	@ 0x28
 8009798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800979a:	2b09      	cmp	r3, #9
 800979c:	d864      	bhi.n	8009868 <_dtoa_r+0x280>
 800979e:	2b05      	cmp	r3, #5
 80097a0:	bfc4      	itt	gt
 80097a2:	3b04      	subgt	r3, #4
 80097a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80097a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097a8:	f1a3 0302 	sub.w	r3, r3, #2
 80097ac:	bfcc      	ite	gt
 80097ae:	2400      	movgt	r4, #0
 80097b0:	2401      	movle	r4, #1
 80097b2:	2b03      	cmp	r3, #3
 80097b4:	d863      	bhi.n	800987e <_dtoa_r+0x296>
 80097b6:	e8df f003 	tbb	[pc, r3]
 80097ba:	372a      	.short	0x372a
 80097bc:	5535      	.short	0x5535
 80097be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80097c2:	441e      	add	r6, r3
 80097c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80097c8:	2b20      	cmp	r3, #32
 80097ca:	bfc1      	itttt	gt
 80097cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80097d0:	409f      	lslgt	r7, r3
 80097d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80097d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80097da:	bfd6      	itet	le
 80097dc:	f1c3 0320 	rsble	r3, r3, #32
 80097e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80097e4:	fa04 f003 	lslle.w	r0, r4, r3
 80097e8:	f7f6 fe8c 	bl	8000504 <__aeabi_ui2d>
 80097ec:	2201      	movs	r2, #1
 80097ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80097f2:	3e01      	subs	r6, #1
 80097f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80097f6:	e777      	b.n	80096e8 <_dtoa_r+0x100>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e7b8      	b.n	800976e <_dtoa_r+0x186>
 80097fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80097fe:	e7b7      	b.n	8009770 <_dtoa_r+0x188>
 8009800:	427b      	negs	r3, r7
 8009802:	930a      	str	r3, [sp, #40]	@ 0x28
 8009804:	2300      	movs	r3, #0
 8009806:	eba8 0807 	sub.w	r8, r8, r7
 800980a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800980c:	e7c4      	b.n	8009798 <_dtoa_r+0x1b0>
 800980e:	2300      	movs	r3, #0
 8009810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009814:	2b00      	cmp	r3, #0
 8009816:	dc35      	bgt.n	8009884 <_dtoa_r+0x29c>
 8009818:	2301      	movs	r3, #1
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	9307      	str	r3, [sp, #28]
 800981e:	461a      	mov	r2, r3
 8009820:	920e      	str	r2, [sp, #56]	@ 0x38
 8009822:	e00b      	b.n	800983c <_dtoa_r+0x254>
 8009824:	2301      	movs	r3, #1
 8009826:	e7f3      	b.n	8009810 <_dtoa_r+0x228>
 8009828:	2300      	movs	r3, #0
 800982a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800982c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800982e:	18fb      	adds	r3, r7, r3
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	3301      	adds	r3, #1
 8009834:	2b01      	cmp	r3, #1
 8009836:	9307      	str	r3, [sp, #28]
 8009838:	bfb8      	it	lt
 800983a:	2301      	movlt	r3, #1
 800983c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009840:	2100      	movs	r1, #0
 8009842:	2204      	movs	r2, #4
 8009844:	f102 0514 	add.w	r5, r2, #20
 8009848:	429d      	cmp	r5, r3
 800984a:	d91f      	bls.n	800988c <_dtoa_r+0x2a4>
 800984c:	6041      	str	r1, [r0, #4]
 800984e:	4658      	mov	r0, fp
 8009850:	f000 fd8e 	bl	800a370 <_Balloc>
 8009854:	4682      	mov	sl, r0
 8009856:	2800      	cmp	r0, #0
 8009858:	d13c      	bne.n	80098d4 <_dtoa_r+0x2ec>
 800985a:	4b1b      	ldr	r3, [pc, #108]	@ (80098c8 <_dtoa_r+0x2e0>)
 800985c:	4602      	mov	r2, r0
 800985e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009862:	e6d8      	b.n	8009616 <_dtoa_r+0x2e>
 8009864:	2301      	movs	r3, #1
 8009866:	e7e0      	b.n	800982a <_dtoa_r+0x242>
 8009868:	2401      	movs	r4, #1
 800986a:	2300      	movs	r3, #0
 800986c:	9309      	str	r3, [sp, #36]	@ 0x24
 800986e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009870:	f04f 33ff 	mov.w	r3, #4294967295
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	9307      	str	r3, [sp, #28]
 8009878:	2200      	movs	r2, #0
 800987a:	2312      	movs	r3, #18
 800987c:	e7d0      	b.n	8009820 <_dtoa_r+0x238>
 800987e:	2301      	movs	r3, #1
 8009880:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009882:	e7f5      	b.n	8009870 <_dtoa_r+0x288>
 8009884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	9307      	str	r3, [sp, #28]
 800988a:	e7d7      	b.n	800983c <_dtoa_r+0x254>
 800988c:	3101      	adds	r1, #1
 800988e:	0052      	lsls	r2, r2, #1
 8009890:	e7d8      	b.n	8009844 <_dtoa_r+0x25c>
 8009892:	bf00      	nop
 8009894:	f3af 8000 	nop.w
 8009898:	636f4361 	.word	0x636f4361
 800989c:	3fd287a7 	.word	0x3fd287a7
 80098a0:	8b60c8b3 	.word	0x8b60c8b3
 80098a4:	3fc68a28 	.word	0x3fc68a28
 80098a8:	509f79fb 	.word	0x509f79fb
 80098ac:	3fd34413 	.word	0x3fd34413
 80098b0:	0800d28e 	.word	0x0800d28e
 80098b4:	0800d2a5 	.word	0x0800d2a5
 80098b8:	7ff00000 	.word	0x7ff00000
 80098bc:	0800d259 	.word	0x0800d259
 80098c0:	3ff80000 	.word	0x3ff80000
 80098c4:	0800d3a0 	.word	0x0800d3a0
 80098c8:	0800d2fd 	.word	0x0800d2fd
 80098cc:	0800d28a 	.word	0x0800d28a
 80098d0:	0800d258 	.word	0x0800d258
 80098d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80098d8:	6018      	str	r0, [r3, #0]
 80098da:	9b07      	ldr	r3, [sp, #28]
 80098dc:	2b0e      	cmp	r3, #14
 80098de:	f200 80a4 	bhi.w	8009a2a <_dtoa_r+0x442>
 80098e2:	2c00      	cmp	r4, #0
 80098e4:	f000 80a1 	beq.w	8009a2a <_dtoa_r+0x442>
 80098e8:	2f00      	cmp	r7, #0
 80098ea:	dd33      	ble.n	8009954 <_dtoa_r+0x36c>
 80098ec:	4bad      	ldr	r3, [pc, #692]	@ (8009ba4 <_dtoa_r+0x5bc>)
 80098ee:	f007 020f 	and.w	r2, r7, #15
 80098f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098f6:	ed93 7b00 	vldr	d7, [r3]
 80098fa:	05f8      	lsls	r0, r7, #23
 80098fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009900:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009904:	d516      	bpl.n	8009934 <_dtoa_r+0x34c>
 8009906:	4ba8      	ldr	r3, [pc, #672]	@ (8009ba8 <_dtoa_r+0x5c0>)
 8009908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800990c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009910:	f7f6 ff9c 	bl	800084c <__aeabi_ddiv>
 8009914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009918:	f004 040f 	and.w	r4, r4, #15
 800991c:	2603      	movs	r6, #3
 800991e:	4da2      	ldr	r5, [pc, #648]	@ (8009ba8 <_dtoa_r+0x5c0>)
 8009920:	b954      	cbnz	r4, 8009938 <_dtoa_r+0x350>
 8009922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800992a:	f7f6 ff8f 	bl	800084c <__aeabi_ddiv>
 800992e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009932:	e028      	b.n	8009986 <_dtoa_r+0x39e>
 8009934:	2602      	movs	r6, #2
 8009936:	e7f2      	b.n	800991e <_dtoa_r+0x336>
 8009938:	07e1      	lsls	r1, r4, #31
 800993a:	d508      	bpl.n	800994e <_dtoa_r+0x366>
 800993c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009940:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009944:	f7f6 fe58 	bl	80005f8 <__aeabi_dmul>
 8009948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800994c:	3601      	adds	r6, #1
 800994e:	1064      	asrs	r4, r4, #1
 8009950:	3508      	adds	r5, #8
 8009952:	e7e5      	b.n	8009920 <_dtoa_r+0x338>
 8009954:	f000 80d2 	beq.w	8009afc <_dtoa_r+0x514>
 8009958:	427c      	negs	r4, r7
 800995a:	4b92      	ldr	r3, [pc, #584]	@ (8009ba4 <_dtoa_r+0x5bc>)
 800995c:	4d92      	ldr	r5, [pc, #584]	@ (8009ba8 <_dtoa_r+0x5c0>)
 800995e:	f004 020f 	and.w	r2, r4, #15
 8009962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800996e:	f7f6 fe43 	bl	80005f8 <__aeabi_dmul>
 8009972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009976:	1124      	asrs	r4, r4, #4
 8009978:	2300      	movs	r3, #0
 800997a:	2602      	movs	r6, #2
 800997c:	2c00      	cmp	r4, #0
 800997e:	f040 80b2 	bne.w	8009ae6 <_dtoa_r+0x4fe>
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1d3      	bne.n	800992e <_dtoa_r+0x346>
 8009986:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009988:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 80b7 	beq.w	8009b00 <_dtoa_r+0x518>
 8009992:	4b86      	ldr	r3, [pc, #536]	@ (8009bac <_dtoa_r+0x5c4>)
 8009994:	2200      	movs	r2, #0
 8009996:	4620      	mov	r0, r4
 8009998:	4629      	mov	r1, r5
 800999a:	f7f7 f89f 	bl	8000adc <__aeabi_dcmplt>
 800999e:	2800      	cmp	r0, #0
 80099a0:	f000 80ae 	beq.w	8009b00 <_dtoa_r+0x518>
 80099a4:	9b07      	ldr	r3, [sp, #28]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 80aa 	beq.w	8009b00 <_dtoa_r+0x518>
 80099ac:	9b00      	ldr	r3, [sp, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	dd37      	ble.n	8009a22 <_dtoa_r+0x43a>
 80099b2:	1e7b      	subs	r3, r7, #1
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	4620      	mov	r0, r4
 80099b8:	4b7d      	ldr	r3, [pc, #500]	@ (8009bb0 <_dtoa_r+0x5c8>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	4629      	mov	r1, r5
 80099be:	f7f6 fe1b 	bl	80005f8 <__aeabi_dmul>
 80099c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099c6:	9c00      	ldr	r4, [sp, #0]
 80099c8:	3601      	adds	r6, #1
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7f6 fdaa 	bl	8000524 <__aeabi_i2d>
 80099d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099d4:	f7f6 fe10 	bl	80005f8 <__aeabi_dmul>
 80099d8:	4b76      	ldr	r3, [pc, #472]	@ (8009bb4 <_dtoa_r+0x5cc>)
 80099da:	2200      	movs	r2, #0
 80099dc:	f7f6 fc56 	bl	800028c <__adddf3>
 80099e0:	4605      	mov	r5, r0
 80099e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80099e6:	2c00      	cmp	r4, #0
 80099e8:	f040 808d 	bne.w	8009b06 <_dtoa_r+0x51e>
 80099ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099f0:	4b71      	ldr	r3, [pc, #452]	@ (8009bb8 <_dtoa_r+0x5d0>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	f7f6 fc48 	bl	8000288 <__aeabi_dsub>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a00:	462a      	mov	r2, r5
 8009a02:	4633      	mov	r3, r6
 8009a04:	f7f7 f888 	bl	8000b18 <__aeabi_dcmpgt>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	f040 828b 	bne.w	8009f24 <_dtoa_r+0x93c>
 8009a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a12:	462a      	mov	r2, r5
 8009a14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009a18:	f7f7 f860 	bl	8000adc <__aeabi_dcmplt>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	f040 8128 	bne.w	8009c72 <_dtoa_r+0x68a>
 8009a22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009a26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009a2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f2c0 815a 	blt.w	8009ce6 <_dtoa_r+0x6fe>
 8009a32:	2f0e      	cmp	r7, #14
 8009a34:	f300 8157 	bgt.w	8009ce6 <_dtoa_r+0x6fe>
 8009a38:	4b5a      	ldr	r3, [pc, #360]	@ (8009ba4 <_dtoa_r+0x5bc>)
 8009a3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a3e:	ed93 7b00 	vldr	d7, [r3]
 8009a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	ed8d 7b00 	vstr	d7, [sp]
 8009a4a:	da03      	bge.n	8009a54 <_dtoa_r+0x46c>
 8009a4c:	9b07      	ldr	r3, [sp, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f340 8101 	ble.w	8009c56 <_dtoa_r+0x66e>
 8009a54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a58:	4656      	mov	r6, sl
 8009a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a5e:	4620      	mov	r0, r4
 8009a60:	4629      	mov	r1, r5
 8009a62:	f7f6 fef3 	bl	800084c <__aeabi_ddiv>
 8009a66:	f7f7 f877 	bl	8000b58 <__aeabi_d2iz>
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	f7f6 fd5a 	bl	8000524 <__aeabi_i2d>
 8009a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a74:	f7f6 fdc0 	bl	80005f8 <__aeabi_dmul>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	4629      	mov	r1, r5
 8009a80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a84:	f7f6 fc00 	bl	8000288 <__aeabi_dsub>
 8009a88:	f806 4b01 	strb.w	r4, [r6], #1
 8009a8c:	9d07      	ldr	r5, [sp, #28]
 8009a8e:	eba6 040a 	sub.w	r4, r6, sl
 8009a92:	42a5      	cmp	r5, r4
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	f040 8117 	bne.w	8009cca <_dtoa_r+0x6e2>
 8009a9c:	f7f6 fbf6 	bl	800028c <__adddf3>
 8009aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	460d      	mov	r5, r1
 8009aa8:	f7f7 f836 	bl	8000b18 <__aeabi_dcmpgt>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	f040 80f9 	bne.w	8009ca4 <_dtoa_r+0x6bc>
 8009ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	f7f7 f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8009abe:	b118      	cbz	r0, 8009ac8 <_dtoa_r+0x4e0>
 8009ac0:	f018 0f01 	tst.w	r8, #1
 8009ac4:	f040 80ee 	bne.w	8009ca4 <_dtoa_r+0x6bc>
 8009ac8:	4649      	mov	r1, r9
 8009aca:	4658      	mov	r0, fp
 8009acc:	f000 fc90 	bl	800a3f0 <_Bfree>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	7033      	strb	r3, [r6, #0]
 8009ad4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ad6:	3701      	adds	r7, #1
 8009ad8:	601f      	str	r7, [r3, #0]
 8009ada:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 831d 	beq.w	800a11c <_dtoa_r+0xb34>
 8009ae2:	601e      	str	r6, [r3, #0]
 8009ae4:	e31a      	b.n	800a11c <_dtoa_r+0xb34>
 8009ae6:	07e2      	lsls	r2, r4, #31
 8009ae8:	d505      	bpl.n	8009af6 <_dtoa_r+0x50e>
 8009aea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009aee:	f7f6 fd83 	bl	80005f8 <__aeabi_dmul>
 8009af2:	3601      	adds	r6, #1
 8009af4:	2301      	movs	r3, #1
 8009af6:	1064      	asrs	r4, r4, #1
 8009af8:	3508      	adds	r5, #8
 8009afa:	e73f      	b.n	800997c <_dtoa_r+0x394>
 8009afc:	2602      	movs	r6, #2
 8009afe:	e742      	b.n	8009986 <_dtoa_r+0x39e>
 8009b00:	9c07      	ldr	r4, [sp, #28]
 8009b02:	9704      	str	r7, [sp, #16]
 8009b04:	e761      	b.n	80099ca <_dtoa_r+0x3e2>
 8009b06:	4b27      	ldr	r3, [pc, #156]	@ (8009ba4 <_dtoa_r+0x5bc>)
 8009b08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b12:	4454      	add	r4, sl
 8009b14:	2900      	cmp	r1, #0
 8009b16:	d053      	beq.n	8009bc0 <_dtoa_r+0x5d8>
 8009b18:	4928      	ldr	r1, [pc, #160]	@ (8009bbc <_dtoa_r+0x5d4>)
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	f7f6 fe96 	bl	800084c <__aeabi_ddiv>
 8009b20:	4633      	mov	r3, r6
 8009b22:	462a      	mov	r2, r5
 8009b24:	f7f6 fbb0 	bl	8000288 <__aeabi_dsub>
 8009b28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b2c:	4656      	mov	r6, sl
 8009b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b32:	f7f7 f811 	bl	8000b58 <__aeabi_d2iz>
 8009b36:	4605      	mov	r5, r0
 8009b38:	f7f6 fcf4 	bl	8000524 <__aeabi_i2d>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b44:	f7f6 fba0 	bl	8000288 <__aeabi_dsub>
 8009b48:	3530      	adds	r5, #48	@ 0x30
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b52:	f806 5b01 	strb.w	r5, [r6], #1
 8009b56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b5a:	f7f6 ffbf 	bl	8000adc <__aeabi_dcmplt>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d171      	bne.n	8009c46 <_dtoa_r+0x65e>
 8009b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b66:	4911      	ldr	r1, [pc, #68]	@ (8009bac <_dtoa_r+0x5c4>)
 8009b68:	2000      	movs	r0, #0
 8009b6a:	f7f6 fb8d 	bl	8000288 <__aeabi_dsub>
 8009b6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b72:	f7f6 ffb3 	bl	8000adc <__aeabi_dcmplt>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	f040 8095 	bne.w	8009ca6 <_dtoa_r+0x6be>
 8009b7c:	42a6      	cmp	r6, r4
 8009b7e:	f43f af50 	beq.w	8009a22 <_dtoa_r+0x43a>
 8009b82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b86:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb0 <_dtoa_r+0x5c8>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f7f6 fd35 	bl	80005f8 <__aeabi_dmul>
 8009b8e:	4b08      	ldr	r3, [pc, #32]	@ (8009bb0 <_dtoa_r+0x5c8>)
 8009b90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b94:	2200      	movs	r2, #0
 8009b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9a:	f7f6 fd2d 	bl	80005f8 <__aeabi_dmul>
 8009b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba2:	e7c4      	b.n	8009b2e <_dtoa_r+0x546>
 8009ba4:	0800d3a0 	.word	0x0800d3a0
 8009ba8:	0800d378 	.word	0x0800d378
 8009bac:	3ff00000 	.word	0x3ff00000
 8009bb0:	40240000 	.word	0x40240000
 8009bb4:	401c0000 	.word	0x401c0000
 8009bb8:	40140000 	.word	0x40140000
 8009bbc:	3fe00000 	.word	0x3fe00000
 8009bc0:	4631      	mov	r1, r6
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f7f6 fd18 	bl	80005f8 <__aeabi_dmul>
 8009bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bcc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009bce:	4656      	mov	r6, sl
 8009bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bd4:	f7f6 ffc0 	bl	8000b58 <__aeabi_d2iz>
 8009bd8:	4605      	mov	r5, r0
 8009bda:	f7f6 fca3 	bl	8000524 <__aeabi_i2d>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009be6:	f7f6 fb4f 	bl	8000288 <__aeabi_dsub>
 8009bea:	3530      	adds	r5, #48	@ 0x30
 8009bec:	f806 5b01 	strb.w	r5, [r6], #1
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	42a6      	cmp	r6, r4
 8009bf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bfa:	f04f 0200 	mov.w	r2, #0
 8009bfe:	d124      	bne.n	8009c4a <_dtoa_r+0x662>
 8009c00:	4bac      	ldr	r3, [pc, #688]	@ (8009eb4 <_dtoa_r+0x8cc>)
 8009c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c06:	f7f6 fb41 	bl	800028c <__adddf3>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c12:	f7f6 ff81 	bl	8000b18 <__aeabi_dcmpgt>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d145      	bne.n	8009ca6 <_dtoa_r+0x6be>
 8009c1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c1e:	49a5      	ldr	r1, [pc, #660]	@ (8009eb4 <_dtoa_r+0x8cc>)
 8009c20:	2000      	movs	r0, #0
 8009c22:	f7f6 fb31 	bl	8000288 <__aeabi_dsub>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c2e:	f7f6 ff55 	bl	8000adc <__aeabi_dcmplt>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	f43f aef5 	beq.w	8009a22 <_dtoa_r+0x43a>
 8009c38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009c3a:	1e73      	subs	r3, r6, #1
 8009c3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c42:	2b30      	cmp	r3, #48	@ 0x30
 8009c44:	d0f8      	beq.n	8009c38 <_dtoa_r+0x650>
 8009c46:	9f04      	ldr	r7, [sp, #16]
 8009c48:	e73e      	b.n	8009ac8 <_dtoa_r+0x4e0>
 8009c4a:	4b9b      	ldr	r3, [pc, #620]	@ (8009eb8 <_dtoa_r+0x8d0>)
 8009c4c:	f7f6 fcd4 	bl	80005f8 <__aeabi_dmul>
 8009c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c54:	e7bc      	b.n	8009bd0 <_dtoa_r+0x5e8>
 8009c56:	d10c      	bne.n	8009c72 <_dtoa_r+0x68a>
 8009c58:	4b98      	ldr	r3, [pc, #608]	@ (8009ebc <_dtoa_r+0x8d4>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c60:	f7f6 fcca 	bl	80005f8 <__aeabi_dmul>
 8009c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c68:	f7f6 ff4c 	bl	8000b04 <__aeabi_dcmpge>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	f000 8157 	beq.w	8009f20 <_dtoa_r+0x938>
 8009c72:	2400      	movs	r4, #0
 8009c74:	4625      	mov	r5, r4
 8009c76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c78:	43db      	mvns	r3, r3
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	4656      	mov	r6, sl
 8009c7e:	2700      	movs	r7, #0
 8009c80:	4621      	mov	r1, r4
 8009c82:	4658      	mov	r0, fp
 8009c84:	f000 fbb4 	bl	800a3f0 <_Bfree>
 8009c88:	2d00      	cmp	r5, #0
 8009c8a:	d0dc      	beq.n	8009c46 <_dtoa_r+0x65e>
 8009c8c:	b12f      	cbz	r7, 8009c9a <_dtoa_r+0x6b2>
 8009c8e:	42af      	cmp	r7, r5
 8009c90:	d003      	beq.n	8009c9a <_dtoa_r+0x6b2>
 8009c92:	4639      	mov	r1, r7
 8009c94:	4658      	mov	r0, fp
 8009c96:	f000 fbab 	bl	800a3f0 <_Bfree>
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	4658      	mov	r0, fp
 8009c9e:	f000 fba7 	bl	800a3f0 <_Bfree>
 8009ca2:	e7d0      	b.n	8009c46 <_dtoa_r+0x65e>
 8009ca4:	9704      	str	r7, [sp, #16]
 8009ca6:	4633      	mov	r3, r6
 8009ca8:	461e      	mov	r6, r3
 8009caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cae:	2a39      	cmp	r2, #57	@ 0x39
 8009cb0:	d107      	bne.n	8009cc2 <_dtoa_r+0x6da>
 8009cb2:	459a      	cmp	sl, r3
 8009cb4:	d1f8      	bne.n	8009ca8 <_dtoa_r+0x6c0>
 8009cb6:	9a04      	ldr	r2, [sp, #16]
 8009cb8:	3201      	adds	r2, #1
 8009cba:	9204      	str	r2, [sp, #16]
 8009cbc:	2230      	movs	r2, #48	@ 0x30
 8009cbe:	f88a 2000 	strb.w	r2, [sl]
 8009cc2:	781a      	ldrb	r2, [r3, #0]
 8009cc4:	3201      	adds	r2, #1
 8009cc6:	701a      	strb	r2, [r3, #0]
 8009cc8:	e7bd      	b.n	8009c46 <_dtoa_r+0x65e>
 8009cca:	4b7b      	ldr	r3, [pc, #492]	@ (8009eb8 <_dtoa_r+0x8d0>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f7f6 fc93 	bl	80005f8 <__aeabi_dmul>
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	460d      	mov	r5, r1
 8009cda:	f7f6 fef5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f43f aebb 	beq.w	8009a5a <_dtoa_r+0x472>
 8009ce4:	e6f0      	b.n	8009ac8 <_dtoa_r+0x4e0>
 8009ce6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009ce8:	2a00      	cmp	r2, #0
 8009cea:	f000 80db 	beq.w	8009ea4 <_dtoa_r+0x8bc>
 8009cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cf0:	2a01      	cmp	r2, #1
 8009cf2:	f300 80bf 	bgt.w	8009e74 <_dtoa_r+0x88c>
 8009cf6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009cf8:	2a00      	cmp	r2, #0
 8009cfa:	f000 80b7 	beq.w	8009e6c <_dtoa_r+0x884>
 8009cfe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d04:	4646      	mov	r6, r8
 8009d06:	9a08      	ldr	r2, [sp, #32]
 8009d08:	2101      	movs	r1, #1
 8009d0a:	441a      	add	r2, r3
 8009d0c:	4658      	mov	r0, fp
 8009d0e:	4498      	add	r8, r3
 8009d10:	9208      	str	r2, [sp, #32]
 8009d12:	f000 fc6b 	bl	800a5ec <__i2b>
 8009d16:	4605      	mov	r5, r0
 8009d18:	b15e      	cbz	r6, 8009d32 <_dtoa_r+0x74a>
 8009d1a:	9b08      	ldr	r3, [sp, #32]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	dd08      	ble.n	8009d32 <_dtoa_r+0x74a>
 8009d20:	42b3      	cmp	r3, r6
 8009d22:	9a08      	ldr	r2, [sp, #32]
 8009d24:	bfa8      	it	ge
 8009d26:	4633      	movge	r3, r6
 8009d28:	eba8 0803 	sub.w	r8, r8, r3
 8009d2c:	1af6      	subs	r6, r6, r3
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	9308      	str	r3, [sp, #32]
 8009d32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d34:	b1f3      	cbz	r3, 8009d74 <_dtoa_r+0x78c>
 8009d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 80b7 	beq.w	8009eac <_dtoa_r+0x8c4>
 8009d3e:	b18c      	cbz	r4, 8009d64 <_dtoa_r+0x77c>
 8009d40:	4629      	mov	r1, r5
 8009d42:	4622      	mov	r2, r4
 8009d44:	4658      	mov	r0, fp
 8009d46:	f000 fd11 	bl	800a76c <__pow5mult>
 8009d4a:	464a      	mov	r2, r9
 8009d4c:	4601      	mov	r1, r0
 8009d4e:	4605      	mov	r5, r0
 8009d50:	4658      	mov	r0, fp
 8009d52:	f000 fc61 	bl	800a618 <__multiply>
 8009d56:	4649      	mov	r1, r9
 8009d58:	9004      	str	r0, [sp, #16]
 8009d5a:	4658      	mov	r0, fp
 8009d5c:	f000 fb48 	bl	800a3f0 <_Bfree>
 8009d60:	9b04      	ldr	r3, [sp, #16]
 8009d62:	4699      	mov	r9, r3
 8009d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d66:	1b1a      	subs	r2, r3, r4
 8009d68:	d004      	beq.n	8009d74 <_dtoa_r+0x78c>
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	4658      	mov	r0, fp
 8009d6e:	f000 fcfd 	bl	800a76c <__pow5mult>
 8009d72:	4681      	mov	r9, r0
 8009d74:	2101      	movs	r1, #1
 8009d76:	4658      	mov	r0, fp
 8009d78:	f000 fc38 	bl	800a5ec <__i2b>
 8009d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d7e:	4604      	mov	r4, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 81cf 	beq.w	800a124 <_dtoa_r+0xb3c>
 8009d86:	461a      	mov	r2, r3
 8009d88:	4601      	mov	r1, r0
 8009d8a:	4658      	mov	r0, fp
 8009d8c:	f000 fcee 	bl	800a76c <__pow5mult>
 8009d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	4604      	mov	r4, r0
 8009d96:	f300 8095 	bgt.w	8009ec4 <_dtoa_r+0x8dc>
 8009d9a:	9b02      	ldr	r3, [sp, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f040 8087 	bne.w	8009eb0 <_dtoa_r+0x8c8>
 8009da2:	9b03      	ldr	r3, [sp, #12]
 8009da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f040 8089 	bne.w	8009ec0 <_dtoa_r+0x8d8>
 8009dae:	9b03      	ldr	r3, [sp, #12]
 8009db0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009db4:	0d1b      	lsrs	r3, r3, #20
 8009db6:	051b      	lsls	r3, r3, #20
 8009db8:	b12b      	cbz	r3, 8009dc6 <_dtoa_r+0x7de>
 8009dba:	9b08      	ldr	r3, [sp, #32]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	9308      	str	r3, [sp, #32]
 8009dc0:	f108 0801 	add.w	r8, r8, #1
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 81b0 	beq.w	800a130 <_dtoa_r+0xb48>
 8009dd0:	6923      	ldr	r3, [r4, #16]
 8009dd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009dd6:	6918      	ldr	r0, [r3, #16]
 8009dd8:	f000 fbbc 	bl	800a554 <__hi0bits>
 8009ddc:	f1c0 0020 	rsb	r0, r0, #32
 8009de0:	9b08      	ldr	r3, [sp, #32]
 8009de2:	4418      	add	r0, r3
 8009de4:	f010 001f 	ands.w	r0, r0, #31
 8009de8:	d077      	beq.n	8009eda <_dtoa_r+0x8f2>
 8009dea:	f1c0 0320 	rsb	r3, r0, #32
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	dd6b      	ble.n	8009eca <_dtoa_r+0x8e2>
 8009df2:	9b08      	ldr	r3, [sp, #32]
 8009df4:	f1c0 001c 	rsb	r0, r0, #28
 8009df8:	4403      	add	r3, r0
 8009dfa:	4480      	add	r8, r0
 8009dfc:	4406      	add	r6, r0
 8009dfe:	9308      	str	r3, [sp, #32]
 8009e00:	f1b8 0f00 	cmp.w	r8, #0
 8009e04:	dd05      	ble.n	8009e12 <_dtoa_r+0x82a>
 8009e06:	4649      	mov	r1, r9
 8009e08:	4642      	mov	r2, r8
 8009e0a:	4658      	mov	r0, fp
 8009e0c:	f000 fd08 	bl	800a820 <__lshift>
 8009e10:	4681      	mov	r9, r0
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	dd05      	ble.n	8009e24 <_dtoa_r+0x83c>
 8009e18:	4621      	mov	r1, r4
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	4658      	mov	r0, fp
 8009e1e:	f000 fcff 	bl	800a820 <__lshift>
 8009e22:	4604      	mov	r4, r0
 8009e24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d059      	beq.n	8009ede <_dtoa_r+0x8f6>
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	4648      	mov	r0, r9
 8009e2e:	f000 fd63 	bl	800a8f8 <__mcmp>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	da53      	bge.n	8009ede <_dtoa_r+0x8f6>
 8009e36:	1e7b      	subs	r3, r7, #1
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	220a      	movs	r2, #10
 8009e40:	4658      	mov	r0, fp
 8009e42:	f000 faf7 	bl	800a434 <__multadd>
 8009e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e48:	4681      	mov	r9, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f000 8172 	beq.w	800a134 <_dtoa_r+0xb4c>
 8009e50:	2300      	movs	r3, #0
 8009e52:	4629      	mov	r1, r5
 8009e54:	220a      	movs	r2, #10
 8009e56:	4658      	mov	r0, fp
 8009e58:	f000 faec 	bl	800a434 <__multadd>
 8009e5c:	9b00      	ldr	r3, [sp, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	4605      	mov	r5, r0
 8009e62:	dc67      	bgt.n	8009f34 <_dtoa_r+0x94c>
 8009e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	dc41      	bgt.n	8009eee <_dtoa_r+0x906>
 8009e6a:	e063      	b.n	8009f34 <_dtoa_r+0x94c>
 8009e6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009e72:	e746      	b.n	8009d02 <_dtoa_r+0x71a>
 8009e74:	9b07      	ldr	r3, [sp, #28]
 8009e76:	1e5c      	subs	r4, r3, #1
 8009e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e7a:	42a3      	cmp	r3, r4
 8009e7c:	bfbf      	itttt	lt
 8009e7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009e80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009e82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009e84:	1ae3      	sublt	r3, r4, r3
 8009e86:	bfb4      	ite	lt
 8009e88:	18d2      	addlt	r2, r2, r3
 8009e8a:	1b1c      	subge	r4, r3, r4
 8009e8c:	9b07      	ldr	r3, [sp, #28]
 8009e8e:	bfbc      	itt	lt
 8009e90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009e92:	2400      	movlt	r4, #0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	bfb5      	itete	lt
 8009e98:	eba8 0603 	sublt.w	r6, r8, r3
 8009e9c:	9b07      	ldrge	r3, [sp, #28]
 8009e9e:	2300      	movlt	r3, #0
 8009ea0:	4646      	movge	r6, r8
 8009ea2:	e730      	b.n	8009d06 <_dtoa_r+0x71e>
 8009ea4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ea6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009ea8:	4646      	mov	r6, r8
 8009eaa:	e735      	b.n	8009d18 <_dtoa_r+0x730>
 8009eac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009eae:	e75c      	b.n	8009d6a <_dtoa_r+0x782>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	e788      	b.n	8009dc6 <_dtoa_r+0x7de>
 8009eb4:	3fe00000 	.word	0x3fe00000
 8009eb8:	40240000 	.word	0x40240000
 8009ebc:	40140000 	.word	0x40140000
 8009ec0:	9b02      	ldr	r3, [sp, #8]
 8009ec2:	e780      	b.n	8009dc6 <_dtoa_r+0x7de>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ec8:	e782      	b.n	8009dd0 <_dtoa_r+0x7e8>
 8009eca:	d099      	beq.n	8009e00 <_dtoa_r+0x818>
 8009ecc:	9a08      	ldr	r2, [sp, #32]
 8009ece:	331c      	adds	r3, #28
 8009ed0:	441a      	add	r2, r3
 8009ed2:	4498      	add	r8, r3
 8009ed4:	441e      	add	r6, r3
 8009ed6:	9208      	str	r2, [sp, #32]
 8009ed8:	e792      	b.n	8009e00 <_dtoa_r+0x818>
 8009eda:	4603      	mov	r3, r0
 8009edc:	e7f6      	b.n	8009ecc <_dtoa_r+0x8e4>
 8009ede:	9b07      	ldr	r3, [sp, #28]
 8009ee0:	9704      	str	r7, [sp, #16]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	dc20      	bgt.n	8009f28 <_dtoa_r+0x940>
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	dd1e      	ble.n	8009f2c <_dtoa_r+0x944>
 8009eee:	9b00      	ldr	r3, [sp, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f47f aec0 	bne.w	8009c76 <_dtoa_r+0x68e>
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	2205      	movs	r2, #5
 8009efa:	4658      	mov	r0, fp
 8009efc:	f000 fa9a 	bl	800a434 <__multadd>
 8009f00:	4601      	mov	r1, r0
 8009f02:	4604      	mov	r4, r0
 8009f04:	4648      	mov	r0, r9
 8009f06:	f000 fcf7 	bl	800a8f8 <__mcmp>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	f77f aeb3 	ble.w	8009c76 <_dtoa_r+0x68e>
 8009f10:	4656      	mov	r6, sl
 8009f12:	2331      	movs	r3, #49	@ 0x31
 8009f14:	f806 3b01 	strb.w	r3, [r6], #1
 8009f18:	9b04      	ldr	r3, [sp, #16]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	9304      	str	r3, [sp, #16]
 8009f1e:	e6ae      	b.n	8009c7e <_dtoa_r+0x696>
 8009f20:	9c07      	ldr	r4, [sp, #28]
 8009f22:	9704      	str	r7, [sp, #16]
 8009f24:	4625      	mov	r5, r4
 8009f26:	e7f3      	b.n	8009f10 <_dtoa_r+0x928>
 8009f28:	9b07      	ldr	r3, [sp, #28]
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 8104 	beq.w	800a13c <_dtoa_r+0xb54>
 8009f34:	2e00      	cmp	r6, #0
 8009f36:	dd05      	ble.n	8009f44 <_dtoa_r+0x95c>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	4632      	mov	r2, r6
 8009f3c:	4658      	mov	r0, fp
 8009f3e:	f000 fc6f 	bl	800a820 <__lshift>
 8009f42:	4605      	mov	r5, r0
 8009f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d05a      	beq.n	800a000 <_dtoa_r+0xa18>
 8009f4a:	6869      	ldr	r1, [r5, #4]
 8009f4c:	4658      	mov	r0, fp
 8009f4e:	f000 fa0f 	bl	800a370 <_Balloc>
 8009f52:	4606      	mov	r6, r0
 8009f54:	b928      	cbnz	r0, 8009f62 <_dtoa_r+0x97a>
 8009f56:	4b84      	ldr	r3, [pc, #528]	@ (800a168 <_dtoa_r+0xb80>)
 8009f58:	4602      	mov	r2, r0
 8009f5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009f5e:	f7ff bb5a 	b.w	8009616 <_dtoa_r+0x2e>
 8009f62:	692a      	ldr	r2, [r5, #16]
 8009f64:	3202      	adds	r2, #2
 8009f66:	0092      	lsls	r2, r2, #2
 8009f68:	f105 010c 	add.w	r1, r5, #12
 8009f6c:	300c      	adds	r0, #12
 8009f6e:	f001 ff75 	bl	800be5c <memcpy>
 8009f72:	2201      	movs	r2, #1
 8009f74:	4631      	mov	r1, r6
 8009f76:	4658      	mov	r0, fp
 8009f78:	f000 fc52 	bl	800a820 <__lshift>
 8009f7c:	f10a 0301 	add.w	r3, sl, #1
 8009f80:	9307      	str	r3, [sp, #28]
 8009f82:	9b00      	ldr	r3, [sp, #0]
 8009f84:	4453      	add	r3, sl
 8009f86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f88:	9b02      	ldr	r3, [sp, #8]
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	462f      	mov	r7, r5
 8009f90:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f92:	4605      	mov	r5, r0
 8009f94:	9b07      	ldr	r3, [sp, #28]
 8009f96:	4621      	mov	r1, r4
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	4648      	mov	r0, r9
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	f7ff fa9b 	bl	80094d8 <quorem>
 8009fa2:	4639      	mov	r1, r7
 8009fa4:	9002      	str	r0, [sp, #8]
 8009fa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009faa:	4648      	mov	r0, r9
 8009fac:	f000 fca4 	bl	800a8f8 <__mcmp>
 8009fb0:	462a      	mov	r2, r5
 8009fb2:	9008      	str	r0, [sp, #32]
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	4658      	mov	r0, fp
 8009fb8:	f000 fcba 	bl	800a930 <__mdiff>
 8009fbc:	68c2      	ldr	r2, [r0, #12]
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	bb02      	cbnz	r2, 800a004 <_dtoa_r+0xa1c>
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	4648      	mov	r0, r9
 8009fc6:	f000 fc97 	bl	800a8f8 <__mcmp>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4658      	mov	r0, fp
 8009fd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009fd2:	f000 fa0d 	bl	800a3f0 <_Bfree>
 8009fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fda:	9e07      	ldr	r6, [sp, #28]
 8009fdc:	ea43 0102 	orr.w	r1, r3, r2
 8009fe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fe2:	4319      	orrs	r1, r3
 8009fe4:	d110      	bne.n	800a008 <_dtoa_r+0xa20>
 8009fe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fea:	d029      	beq.n	800a040 <_dtoa_r+0xa58>
 8009fec:	9b08      	ldr	r3, [sp, #32]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	dd02      	ble.n	8009ff8 <_dtoa_r+0xa10>
 8009ff2:	9b02      	ldr	r3, [sp, #8]
 8009ff4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009ff8:	9b00      	ldr	r3, [sp, #0]
 8009ffa:	f883 8000 	strb.w	r8, [r3]
 8009ffe:	e63f      	b.n	8009c80 <_dtoa_r+0x698>
 800a000:	4628      	mov	r0, r5
 800a002:	e7bb      	b.n	8009f7c <_dtoa_r+0x994>
 800a004:	2201      	movs	r2, #1
 800a006:	e7e1      	b.n	8009fcc <_dtoa_r+0x9e4>
 800a008:	9b08      	ldr	r3, [sp, #32]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	db04      	blt.n	800a018 <_dtoa_r+0xa30>
 800a00e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a010:	430b      	orrs	r3, r1
 800a012:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a014:	430b      	orrs	r3, r1
 800a016:	d120      	bne.n	800a05a <_dtoa_r+0xa72>
 800a018:	2a00      	cmp	r2, #0
 800a01a:	dded      	ble.n	8009ff8 <_dtoa_r+0xa10>
 800a01c:	4649      	mov	r1, r9
 800a01e:	2201      	movs	r2, #1
 800a020:	4658      	mov	r0, fp
 800a022:	f000 fbfd 	bl	800a820 <__lshift>
 800a026:	4621      	mov	r1, r4
 800a028:	4681      	mov	r9, r0
 800a02a:	f000 fc65 	bl	800a8f8 <__mcmp>
 800a02e:	2800      	cmp	r0, #0
 800a030:	dc03      	bgt.n	800a03a <_dtoa_r+0xa52>
 800a032:	d1e1      	bne.n	8009ff8 <_dtoa_r+0xa10>
 800a034:	f018 0f01 	tst.w	r8, #1
 800a038:	d0de      	beq.n	8009ff8 <_dtoa_r+0xa10>
 800a03a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a03e:	d1d8      	bne.n	8009ff2 <_dtoa_r+0xa0a>
 800a040:	9a00      	ldr	r2, [sp, #0]
 800a042:	2339      	movs	r3, #57	@ 0x39
 800a044:	7013      	strb	r3, [r2, #0]
 800a046:	4633      	mov	r3, r6
 800a048:	461e      	mov	r6, r3
 800a04a:	3b01      	subs	r3, #1
 800a04c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a050:	2a39      	cmp	r2, #57	@ 0x39
 800a052:	d052      	beq.n	800a0fa <_dtoa_r+0xb12>
 800a054:	3201      	adds	r2, #1
 800a056:	701a      	strb	r2, [r3, #0]
 800a058:	e612      	b.n	8009c80 <_dtoa_r+0x698>
 800a05a:	2a00      	cmp	r2, #0
 800a05c:	dd07      	ble.n	800a06e <_dtoa_r+0xa86>
 800a05e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a062:	d0ed      	beq.n	800a040 <_dtoa_r+0xa58>
 800a064:	9a00      	ldr	r2, [sp, #0]
 800a066:	f108 0301 	add.w	r3, r8, #1
 800a06a:	7013      	strb	r3, [r2, #0]
 800a06c:	e608      	b.n	8009c80 <_dtoa_r+0x698>
 800a06e:	9b07      	ldr	r3, [sp, #28]
 800a070:	9a07      	ldr	r2, [sp, #28]
 800a072:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a078:	4293      	cmp	r3, r2
 800a07a:	d028      	beq.n	800a0ce <_dtoa_r+0xae6>
 800a07c:	4649      	mov	r1, r9
 800a07e:	2300      	movs	r3, #0
 800a080:	220a      	movs	r2, #10
 800a082:	4658      	mov	r0, fp
 800a084:	f000 f9d6 	bl	800a434 <__multadd>
 800a088:	42af      	cmp	r7, r5
 800a08a:	4681      	mov	r9, r0
 800a08c:	f04f 0300 	mov.w	r3, #0
 800a090:	f04f 020a 	mov.w	r2, #10
 800a094:	4639      	mov	r1, r7
 800a096:	4658      	mov	r0, fp
 800a098:	d107      	bne.n	800a0aa <_dtoa_r+0xac2>
 800a09a:	f000 f9cb 	bl	800a434 <__multadd>
 800a09e:	4607      	mov	r7, r0
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	9b07      	ldr	r3, [sp, #28]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	9307      	str	r3, [sp, #28]
 800a0a8:	e774      	b.n	8009f94 <_dtoa_r+0x9ac>
 800a0aa:	f000 f9c3 	bl	800a434 <__multadd>
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	220a      	movs	r2, #10
 800a0b6:	4658      	mov	r0, fp
 800a0b8:	f000 f9bc 	bl	800a434 <__multadd>
 800a0bc:	4605      	mov	r5, r0
 800a0be:	e7f0      	b.n	800a0a2 <_dtoa_r+0xaba>
 800a0c0:	9b00      	ldr	r3, [sp, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	bfcc      	ite	gt
 800a0c6:	461e      	movgt	r6, r3
 800a0c8:	2601      	movle	r6, #1
 800a0ca:	4456      	add	r6, sl
 800a0cc:	2700      	movs	r7, #0
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	4658      	mov	r0, fp
 800a0d4:	f000 fba4 	bl	800a820 <__lshift>
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4681      	mov	r9, r0
 800a0dc:	f000 fc0c 	bl	800a8f8 <__mcmp>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	dcb0      	bgt.n	800a046 <_dtoa_r+0xa5e>
 800a0e4:	d102      	bne.n	800a0ec <_dtoa_r+0xb04>
 800a0e6:	f018 0f01 	tst.w	r8, #1
 800a0ea:	d1ac      	bne.n	800a046 <_dtoa_r+0xa5e>
 800a0ec:	4633      	mov	r3, r6
 800a0ee:	461e      	mov	r6, r3
 800a0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0f4:	2a30      	cmp	r2, #48	@ 0x30
 800a0f6:	d0fa      	beq.n	800a0ee <_dtoa_r+0xb06>
 800a0f8:	e5c2      	b.n	8009c80 <_dtoa_r+0x698>
 800a0fa:	459a      	cmp	sl, r3
 800a0fc:	d1a4      	bne.n	800a048 <_dtoa_r+0xa60>
 800a0fe:	9b04      	ldr	r3, [sp, #16]
 800a100:	3301      	adds	r3, #1
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	2331      	movs	r3, #49	@ 0x31
 800a106:	f88a 3000 	strb.w	r3, [sl]
 800a10a:	e5b9      	b.n	8009c80 <_dtoa_r+0x698>
 800a10c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a10e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a16c <_dtoa_r+0xb84>
 800a112:	b11b      	cbz	r3, 800a11c <_dtoa_r+0xb34>
 800a114:	f10a 0308 	add.w	r3, sl, #8
 800a118:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	4650      	mov	r0, sl
 800a11e:	b019      	add	sp, #100	@ 0x64
 800a120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a126:	2b01      	cmp	r3, #1
 800a128:	f77f ae37 	ble.w	8009d9a <_dtoa_r+0x7b2>
 800a12c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a12e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a130:	2001      	movs	r0, #1
 800a132:	e655      	b.n	8009de0 <_dtoa_r+0x7f8>
 800a134:	9b00      	ldr	r3, [sp, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	f77f aed6 	ble.w	8009ee8 <_dtoa_r+0x900>
 800a13c:	4656      	mov	r6, sl
 800a13e:	4621      	mov	r1, r4
 800a140:	4648      	mov	r0, r9
 800a142:	f7ff f9c9 	bl	80094d8 <quorem>
 800a146:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a14a:	f806 8b01 	strb.w	r8, [r6], #1
 800a14e:	9b00      	ldr	r3, [sp, #0]
 800a150:	eba6 020a 	sub.w	r2, r6, sl
 800a154:	4293      	cmp	r3, r2
 800a156:	ddb3      	ble.n	800a0c0 <_dtoa_r+0xad8>
 800a158:	4649      	mov	r1, r9
 800a15a:	2300      	movs	r3, #0
 800a15c:	220a      	movs	r2, #10
 800a15e:	4658      	mov	r0, fp
 800a160:	f000 f968 	bl	800a434 <__multadd>
 800a164:	4681      	mov	r9, r0
 800a166:	e7ea      	b.n	800a13e <_dtoa_r+0xb56>
 800a168:	0800d2fd 	.word	0x0800d2fd
 800a16c:	0800d281 	.word	0x0800d281

0800a170 <_free_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4605      	mov	r5, r0
 800a174:	2900      	cmp	r1, #0
 800a176:	d041      	beq.n	800a1fc <_free_r+0x8c>
 800a178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a17c:	1f0c      	subs	r4, r1, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	bfb8      	it	lt
 800a182:	18e4      	addlt	r4, r4, r3
 800a184:	f000 f8e8 	bl	800a358 <__malloc_lock>
 800a188:	4a1d      	ldr	r2, [pc, #116]	@ (800a200 <_free_r+0x90>)
 800a18a:	6813      	ldr	r3, [r2, #0]
 800a18c:	b933      	cbnz	r3, 800a19c <_free_r+0x2c>
 800a18e:	6063      	str	r3, [r4, #4]
 800a190:	6014      	str	r4, [r2, #0]
 800a192:	4628      	mov	r0, r5
 800a194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a198:	f000 b8e4 	b.w	800a364 <__malloc_unlock>
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	d908      	bls.n	800a1b2 <_free_r+0x42>
 800a1a0:	6820      	ldr	r0, [r4, #0]
 800a1a2:	1821      	adds	r1, r4, r0
 800a1a4:	428b      	cmp	r3, r1
 800a1a6:	bf01      	itttt	eq
 800a1a8:	6819      	ldreq	r1, [r3, #0]
 800a1aa:	685b      	ldreq	r3, [r3, #4]
 800a1ac:	1809      	addeq	r1, r1, r0
 800a1ae:	6021      	streq	r1, [r4, #0]
 800a1b0:	e7ed      	b.n	800a18e <_free_r+0x1e>
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	b10b      	cbz	r3, 800a1bc <_free_r+0x4c>
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	d9fa      	bls.n	800a1b2 <_free_r+0x42>
 800a1bc:	6811      	ldr	r1, [r2, #0]
 800a1be:	1850      	adds	r0, r2, r1
 800a1c0:	42a0      	cmp	r0, r4
 800a1c2:	d10b      	bne.n	800a1dc <_free_r+0x6c>
 800a1c4:	6820      	ldr	r0, [r4, #0]
 800a1c6:	4401      	add	r1, r0
 800a1c8:	1850      	adds	r0, r2, r1
 800a1ca:	4283      	cmp	r3, r0
 800a1cc:	6011      	str	r1, [r2, #0]
 800a1ce:	d1e0      	bne.n	800a192 <_free_r+0x22>
 800a1d0:	6818      	ldr	r0, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	6053      	str	r3, [r2, #4]
 800a1d6:	4408      	add	r0, r1
 800a1d8:	6010      	str	r0, [r2, #0]
 800a1da:	e7da      	b.n	800a192 <_free_r+0x22>
 800a1dc:	d902      	bls.n	800a1e4 <_free_r+0x74>
 800a1de:	230c      	movs	r3, #12
 800a1e0:	602b      	str	r3, [r5, #0]
 800a1e2:	e7d6      	b.n	800a192 <_free_r+0x22>
 800a1e4:	6820      	ldr	r0, [r4, #0]
 800a1e6:	1821      	adds	r1, r4, r0
 800a1e8:	428b      	cmp	r3, r1
 800a1ea:	bf04      	itt	eq
 800a1ec:	6819      	ldreq	r1, [r3, #0]
 800a1ee:	685b      	ldreq	r3, [r3, #4]
 800a1f0:	6063      	str	r3, [r4, #4]
 800a1f2:	bf04      	itt	eq
 800a1f4:	1809      	addeq	r1, r1, r0
 800a1f6:	6021      	streq	r1, [r4, #0]
 800a1f8:	6054      	str	r4, [r2, #4]
 800a1fa:	e7ca      	b.n	800a192 <_free_r+0x22>
 800a1fc:	bd38      	pop	{r3, r4, r5, pc}
 800a1fe:	bf00      	nop
 800a200:	20000bc0 	.word	0x20000bc0

0800a204 <malloc>:
 800a204:	4b02      	ldr	r3, [pc, #8]	@ (800a210 <malloc+0xc>)
 800a206:	4601      	mov	r1, r0
 800a208:	6818      	ldr	r0, [r3, #0]
 800a20a:	f000 b825 	b.w	800a258 <_malloc_r>
 800a20e:	bf00      	nop
 800a210:	20000018 	.word	0x20000018

0800a214 <sbrk_aligned>:
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	4e0f      	ldr	r6, [pc, #60]	@ (800a254 <sbrk_aligned+0x40>)
 800a218:	460c      	mov	r4, r1
 800a21a:	6831      	ldr	r1, [r6, #0]
 800a21c:	4605      	mov	r5, r0
 800a21e:	b911      	cbnz	r1, 800a226 <sbrk_aligned+0x12>
 800a220:	f001 fe0c 	bl	800be3c <_sbrk_r>
 800a224:	6030      	str	r0, [r6, #0]
 800a226:	4621      	mov	r1, r4
 800a228:	4628      	mov	r0, r5
 800a22a:	f001 fe07 	bl	800be3c <_sbrk_r>
 800a22e:	1c43      	adds	r3, r0, #1
 800a230:	d103      	bne.n	800a23a <sbrk_aligned+0x26>
 800a232:	f04f 34ff 	mov.w	r4, #4294967295
 800a236:	4620      	mov	r0, r4
 800a238:	bd70      	pop	{r4, r5, r6, pc}
 800a23a:	1cc4      	adds	r4, r0, #3
 800a23c:	f024 0403 	bic.w	r4, r4, #3
 800a240:	42a0      	cmp	r0, r4
 800a242:	d0f8      	beq.n	800a236 <sbrk_aligned+0x22>
 800a244:	1a21      	subs	r1, r4, r0
 800a246:	4628      	mov	r0, r5
 800a248:	f001 fdf8 	bl	800be3c <_sbrk_r>
 800a24c:	3001      	adds	r0, #1
 800a24e:	d1f2      	bne.n	800a236 <sbrk_aligned+0x22>
 800a250:	e7ef      	b.n	800a232 <sbrk_aligned+0x1e>
 800a252:	bf00      	nop
 800a254:	20000bbc 	.word	0x20000bbc

0800a258 <_malloc_r>:
 800a258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a25c:	1ccd      	adds	r5, r1, #3
 800a25e:	f025 0503 	bic.w	r5, r5, #3
 800a262:	3508      	adds	r5, #8
 800a264:	2d0c      	cmp	r5, #12
 800a266:	bf38      	it	cc
 800a268:	250c      	movcc	r5, #12
 800a26a:	2d00      	cmp	r5, #0
 800a26c:	4606      	mov	r6, r0
 800a26e:	db01      	blt.n	800a274 <_malloc_r+0x1c>
 800a270:	42a9      	cmp	r1, r5
 800a272:	d904      	bls.n	800a27e <_malloc_r+0x26>
 800a274:	230c      	movs	r3, #12
 800a276:	6033      	str	r3, [r6, #0]
 800a278:	2000      	movs	r0, #0
 800a27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a27e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a354 <_malloc_r+0xfc>
 800a282:	f000 f869 	bl	800a358 <__malloc_lock>
 800a286:	f8d8 3000 	ldr.w	r3, [r8]
 800a28a:	461c      	mov	r4, r3
 800a28c:	bb44      	cbnz	r4, 800a2e0 <_malloc_r+0x88>
 800a28e:	4629      	mov	r1, r5
 800a290:	4630      	mov	r0, r6
 800a292:	f7ff ffbf 	bl	800a214 <sbrk_aligned>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	4604      	mov	r4, r0
 800a29a:	d158      	bne.n	800a34e <_malloc_r+0xf6>
 800a29c:	f8d8 4000 	ldr.w	r4, [r8]
 800a2a0:	4627      	mov	r7, r4
 800a2a2:	2f00      	cmp	r7, #0
 800a2a4:	d143      	bne.n	800a32e <_malloc_r+0xd6>
 800a2a6:	2c00      	cmp	r4, #0
 800a2a8:	d04b      	beq.n	800a342 <_malloc_r+0xea>
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	eb04 0903 	add.w	r9, r4, r3
 800a2b4:	f001 fdc2 	bl	800be3c <_sbrk_r>
 800a2b8:	4581      	cmp	r9, r0
 800a2ba:	d142      	bne.n	800a342 <_malloc_r+0xea>
 800a2bc:	6821      	ldr	r1, [r4, #0]
 800a2be:	1a6d      	subs	r5, r5, r1
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f7ff ffa6 	bl	800a214 <sbrk_aligned>
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	d03a      	beq.n	800a342 <_malloc_r+0xea>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	442b      	add	r3, r5
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	bb62      	cbnz	r2, 800a334 <_malloc_r+0xdc>
 800a2da:	f8c8 7000 	str.w	r7, [r8]
 800a2de:	e00f      	b.n	800a300 <_malloc_r+0xa8>
 800a2e0:	6822      	ldr	r2, [r4, #0]
 800a2e2:	1b52      	subs	r2, r2, r5
 800a2e4:	d420      	bmi.n	800a328 <_malloc_r+0xd0>
 800a2e6:	2a0b      	cmp	r2, #11
 800a2e8:	d917      	bls.n	800a31a <_malloc_r+0xc2>
 800a2ea:	1961      	adds	r1, r4, r5
 800a2ec:	42a3      	cmp	r3, r4
 800a2ee:	6025      	str	r5, [r4, #0]
 800a2f0:	bf18      	it	ne
 800a2f2:	6059      	strne	r1, [r3, #4]
 800a2f4:	6863      	ldr	r3, [r4, #4]
 800a2f6:	bf08      	it	eq
 800a2f8:	f8c8 1000 	streq.w	r1, [r8]
 800a2fc:	5162      	str	r2, [r4, r5]
 800a2fe:	604b      	str	r3, [r1, #4]
 800a300:	4630      	mov	r0, r6
 800a302:	f000 f82f 	bl	800a364 <__malloc_unlock>
 800a306:	f104 000b 	add.w	r0, r4, #11
 800a30a:	1d23      	adds	r3, r4, #4
 800a30c:	f020 0007 	bic.w	r0, r0, #7
 800a310:	1ac2      	subs	r2, r0, r3
 800a312:	bf1c      	itt	ne
 800a314:	1a1b      	subne	r3, r3, r0
 800a316:	50a3      	strne	r3, [r4, r2]
 800a318:	e7af      	b.n	800a27a <_malloc_r+0x22>
 800a31a:	6862      	ldr	r2, [r4, #4]
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	bf0c      	ite	eq
 800a320:	f8c8 2000 	streq.w	r2, [r8]
 800a324:	605a      	strne	r2, [r3, #4]
 800a326:	e7eb      	b.n	800a300 <_malloc_r+0xa8>
 800a328:	4623      	mov	r3, r4
 800a32a:	6864      	ldr	r4, [r4, #4]
 800a32c:	e7ae      	b.n	800a28c <_malloc_r+0x34>
 800a32e:	463c      	mov	r4, r7
 800a330:	687f      	ldr	r7, [r7, #4]
 800a332:	e7b6      	b.n	800a2a2 <_malloc_r+0x4a>
 800a334:	461a      	mov	r2, r3
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	42a3      	cmp	r3, r4
 800a33a:	d1fb      	bne.n	800a334 <_malloc_r+0xdc>
 800a33c:	2300      	movs	r3, #0
 800a33e:	6053      	str	r3, [r2, #4]
 800a340:	e7de      	b.n	800a300 <_malloc_r+0xa8>
 800a342:	230c      	movs	r3, #12
 800a344:	6033      	str	r3, [r6, #0]
 800a346:	4630      	mov	r0, r6
 800a348:	f000 f80c 	bl	800a364 <__malloc_unlock>
 800a34c:	e794      	b.n	800a278 <_malloc_r+0x20>
 800a34e:	6005      	str	r5, [r0, #0]
 800a350:	e7d6      	b.n	800a300 <_malloc_r+0xa8>
 800a352:	bf00      	nop
 800a354:	20000bc0 	.word	0x20000bc0

0800a358 <__malloc_lock>:
 800a358:	4801      	ldr	r0, [pc, #4]	@ (800a360 <__malloc_lock+0x8>)
 800a35a:	f7ff b8b4 	b.w	80094c6 <__retarget_lock_acquire_recursive>
 800a35e:	bf00      	nop
 800a360:	20000bb8 	.word	0x20000bb8

0800a364 <__malloc_unlock>:
 800a364:	4801      	ldr	r0, [pc, #4]	@ (800a36c <__malloc_unlock+0x8>)
 800a366:	f7ff b8af 	b.w	80094c8 <__retarget_lock_release_recursive>
 800a36a:	bf00      	nop
 800a36c:	20000bb8 	.word	0x20000bb8

0800a370 <_Balloc>:
 800a370:	b570      	push	{r4, r5, r6, lr}
 800a372:	69c6      	ldr	r6, [r0, #28]
 800a374:	4604      	mov	r4, r0
 800a376:	460d      	mov	r5, r1
 800a378:	b976      	cbnz	r6, 800a398 <_Balloc+0x28>
 800a37a:	2010      	movs	r0, #16
 800a37c:	f7ff ff42 	bl	800a204 <malloc>
 800a380:	4602      	mov	r2, r0
 800a382:	61e0      	str	r0, [r4, #28]
 800a384:	b920      	cbnz	r0, 800a390 <_Balloc+0x20>
 800a386:	4b18      	ldr	r3, [pc, #96]	@ (800a3e8 <_Balloc+0x78>)
 800a388:	4818      	ldr	r0, [pc, #96]	@ (800a3ec <_Balloc+0x7c>)
 800a38a:	216b      	movs	r1, #107	@ 0x6b
 800a38c:	f001 fd7c 	bl	800be88 <__assert_func>
 800a390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a394:	6006      	str	r6, [r0, #0]
 800a396:	60c6      	str	r6, [r0, #12]
 800a398:	69e6      	ldr	r6, [r4, #28]
 800a39a:	68f3      	ldr	r3, [r6, #12]
 800a39c:	b183      	cbz	r3, 800a3c0 <_Balloc+0x50>
 800a39e:	69e3      	ldr	r3, [r4, #28]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3a6:	b9b8      	cbnz	r0, 800a3d8 <_Balloc+0x68>
 800a3a8:	2101      	movs	r1, #1
 800a3aa:	fa01 f605 	lsl.w	r6, r1, r5
 800a3ae:	1d72      	adds	r2, r6, #5
 800a3b0:	0092      	lsls	r2, r2, #2
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f001 fd86 	bl	800bec4 <_calloc_r>
 800a3b8:	b160      	cbz	r0, 800a3d4 <_Balloc+0x64>
 800a3ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3be:	e00e      	b.n	800a3de <_Balloc+0x6e>
 800a3c0:	2221      	movs	r2, #33	@ 0x21
 800a3c2:	2104      	movs	r1, #4
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f001 fd7d 	bl	800bec4 <_calloc_r>
 800a3ca:	69e3      	ldr	r3, [r4, #28]
 800a3cc:	60f0      	str	r0, [r6, #12]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1e4      	bne.n	800a39e <_Balloc+0x2e>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	bd70      	pop	{r4, r5, r6, pc}
 800a3d8:	6802      	ldr	r2, [r0, #0]
 800a3da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3e4:	e7f7      	b.n	800a3d6 <_Balloc+0x66>
 800a3e6:	bf00      	nop
 800a3e8:	0800d28e 	.word	0x0800d28e
 800a3ec:	0800d30e 	.word	0x0800d30e

0800a3f0 <_Bfree>:
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	69c6      	ldr	r6, [r0, #28]
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	b976      	cbnz	r6, 800a418 <_Bfree+0x28>
 800a3fa:	2010      	movs	r0, #16
 800a3fc:	f7ff ff02 	bl	800a204 <malloc>
 800a400:	4602      	mov	r2, r0
 800a402:	61e8      	str	r0, [r5, #28]
 800a404:	b920      	cbnz	r0, 800a410 <_Bfree+0x20>
 800a406:	4b09      	ldr	r3, [pc, #36]	@ (800a42c <_Bfree+0x3c>)
 800a408:	4809      	ldr	r0, [pc, #36]	@ (800a430 <_Bfree+0x40>)
 800a40a:	218f      	movs	r1, #143	@ 0x8f
 800a40c:	f001 fd3c 	bl	800be88 <__assert_func>
 800a410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a414:	6006      	str	r6, [r0, #0]
 800a416:	60c6      	str	r6, [r0, #12]
 800a418:	b13c      	cbz	r4, 800a42a <_Bfree+0x3a>
 800a41a:	69eb      	ldr	r3, [r5, #28]
 800a41c:	6862      	ldr	r2, [r4, #4]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a424:	6021      	str	r1, [r4, #0]
 800a426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a42a:	bd70      	pop	{r4, r5, r6, pc}
 800a42c:	0800d28e 	.word	0x0800d28e
 800a430:	0800d30e 	.word	0x0800d30e

0800a434 <__multadd>:
 800a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a438:	690d      	ldr	r5, [r1, #16]
 800a43a:	4607      	mov	r7, r0
 800a43c:	460c      	mov	r4, r1
 800a43e:	461e      	mov	r6, r3
 800a440:	f101 0c14 	add.w	ip, r1, #20
 800a444:	2000      	movs	r0, #0
 800a446:	f8dc 3000 	ldr.w	r3, [ip]
 800a44a:	b299      	uxth	r1, r3
 800a44c:	fb02 6101 	mla	r1, r2, r1, r6
 800a450:	0c1e      	lsrs	r6, r3, #16
 800a452:	0c0b      	lsrs	r3, r1, #16
 800a454:	fb02 3306 	mla	r3, r2, r6, r3
 800a458:	b289      	uxth	r1, r1
 800a45a:	3001      	adds	r0, #1
 800a45c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a460:	4285      	cmp	r5, r0
 800a462:	f84c 1b04 	str.w	r1, [ip], #4
 800a466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a46a:	dcec      	bgt.n	800a446 <__multadd+0x12>
 800a46c:	b30e      	cbz	r6, 800a4b2 <__multadd+0x7e>
 800a46e:	68a3      	ldr	r3, [r4, #8]
 800a470:	42ab      	cmp	r3, r5
 800a472:	dc19      	bgt.n	800a4a8 <__multadd+0x74>
 800a474:	6861      	ldr	r1, [r4, #4]
 800a476:	4638      	mov	r0, r7
 800a478:	3101      	adds	r1, #1
 800a47a:	f7ff ff79 	bl	800a370 <_Balloc>
 800a47e:	4680      	mov	r8, r0
 800a480:	b928      	cbnz	r0, 800a48e <__multadd+0x5a>
 800a482:	4602      	mov	r2, r0
 800a484:	4b0c      	ldr	r3, [pc, #48]	@ (800a4b8 <__multadd+0x84>)
 800a486:	480d      	ldr	r0, [pc, #52]	@ (800a4bc <__multadd+0x88>)
 800a488:	21ba      	movs	r1, #186	@ 0xba
 800a48a:	f001 fcfd 	bl	800be88 <__assert_func>
 800a48e:	6922      	ldr	r2, [r4, #16]
 800a490:	3202      	adds	r2, #2
 800a492:	f104 010c 	add.w	r1, r4, #12
 800a496:	0092      	lsls	r2, r2, #2
 800a498:	300c      	adds	r0, #12
 800a49a:	f001 fcdf 	bl	800be5c <memcpy>
 800a49e:	4621      	mov	r1, r4
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f7ff ffa5 	bl	800a3f0 <_Bfree>
 800a4a6:	4644      	mov	r4, r8
 800a4a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4ac:	3501      	adds	r5, #1
 800a4ae:	615e      	str	r6, [r3, #20]
 800a4b0:	6125      	str	r5, [r4, #16]
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b8:	0800d2fd 	.word	0x0800d2fd
 800a4bc:	0800d30e 	.word	0x0800d30e

0800a4c0 <__s2b>:
 800a4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	4615      	mov	r5, r2
 800a4c8:	461f      	mov	r7, r3
 800a4ca:	2209      	movs	r2, #9
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	db09      	blt.n	800a4f0 <__s2b+0x30>
 800a4dc:	4630      	mov	r0, r6
 800a4de:	f7ff ff47 	bl	800a370 <_Balloc>
 800a4e2:	b940      	cbnz	r0, 800a4f6 <__s2b+0x36>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	4b19      	ldr	r3, [pc, #100]	@ (800a54c <__s2b+0x8c>)
 800a4e8:	4819      	ldr	r0, [pc, #100]	@ (800a550 <__s2b+0x90>)
 800a4ea:	21d3      	movs	r1, #211	@ 0xd3
 800a4ec:	f001 fccc 	bl	800be88 <__assert_func>
 800a4f0:	0052      	lsls	r2, r2, #1
 800a4f2:	3101      	adds	r1, #1
 800a4f4:	e7f0      	b.n	800a4d8 <__s2b+0x18>
 800a4f6:	9b08      	ldr	r3, [sp, #32]
 800a4f8:	6143      	str	r3, [r0, #20]
 800a4fa:	2d09      	cmp	r5, #9
 800a4fc:	f04f 0301 	mov.w	r3, #1
 800a500:	6103      	str	r3, [r0, #16]
 800a502:	dd16      	ble.n	800a532 <__s2b+0x72>
 800a504:	f104 0909 	add.w	r9, r4, #9
 800a508:	46c8      	mov	r8, r9
 800a50a:	442c      	add	r4, r5
 800a50c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a510:	4601      	mov	r1, r0
 800a512:	3b30      	subs	r3, #48	@ 0x30
 800a514:	220a      	movs	r2, #10
 800a516:	4630      	mov	r0, r6
 800a518:	f7ff ff8c 	bl	800a434 <__multadd>
 800a51c:	45a0      	cmp	r8, r4
 800a51e:	d1f5      	bne.n	800a50c <__s2b+0x4c>
 800a520:	f1a5 0408 	sub.w	r4, r5, #8
 800a524:	444c      	add	r4, r9
 800a526:	1b2d      	subs	r5, r5, r4
 800a528:	1963      	adds	r3, r4, r5
 800a52a:	42bb      	cmp	r3, r7
 800a52c:	db04      	blt.n	800a538 <__s2b+0x78>
 800a52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a532:	340a      	adds	r4, #10
 800a534:	2509      	movs	r5, #9
 800a536:	e7f6      	b.n	800a526 <__s2b+0x66>
 800a538:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a53c:	4601      	mov	r1, r0
 800a53e:	3b30      	subs	r3, #48	@ 0x30
 800a540:	220a      	movs	r2, #10
 800a542:	4630      	mov	r0, r6
 800a544:	f7ff ff76 	bl	800a434 <__multadd>
 800a548:	e7ee      	b.n	800a528 <__s2b+0x68>
 800a54a:	bf00      	nop
 800a54c:	0800d2fd 	.word	0x0800d2fd
 800a550:	0800d30e 	.word	0x0800d30e

0800a554 <__hi0bits>:
 800a554:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a558:	4603      	mov	r3, r0
 800a55a:	bf36      	itet	cc
 800a55c:	0403      	lslcc	r3, r0, #16
 800a55e:	2000      	movcs	r0, #0
 800a560:	2010      	movcc	r0, #16
 800a562:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a566:	bf3c      	itt	cc
 800a568:	021b      	lslcc	r3, r3, #8
 800a56a:	3008      	addcc	r0, #8
 800a56c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a570:	bf3c      	itt	cc
 800a572:	011b      	lslcc	r3, r3, #4
 800a574:	3004      	addcc	r0, #4
 800a576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a57a:	bf3c      	itt	cc
 800a57c:	009b      	lslcc	r3, r3, #2
 800a57e:	3002      	addcc	r0, #2
 800a580:	2b00      	cmp	r3, #0
 800a582:	db05      	blt.n	800a590 <__hi0bits+0x3c>
 800a584:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a588:	f100 0001 	add.w	r0, r0, #1
 800a58c:	bf08      	it	eq
 800a58e:	2020      	moveq	r0, #32
 800a590:	4770      	bx	lr

0800a592 <__lo0bits>:
 800a592:	6803      	ldr	r3, [r0, #0]
 800a594:	4602      	mov	r2, r0
 800a596:	f013 0007 	ands.w	r0, r3, #7
 800a59a:	d00b      	beq.n	800a5b4 <__lo0bits+0x22>
 800a59c:	07d9      	lsls	r1, r3, #31
 800a59e:	d421      	bmi.n	800a5e4 <__lo0bits+0x52>
 800a5a0:	0798      	lsls	r0, r3, #30
 800a5a2:	bf49      	itett	mi
 800a5a4:	085b      	lsrmi	r3, r3, #1
 800a5a6:	089b      	lsrpl	r3, r3, #2
 800a5a8:	2001      	movmi	r0, #1
 800a5aa:	6013      	strmi	r3, [r2, #0]
 800a5ac:	bf5c      	itt	pl
 800a5ae:	6013      	strpl	r3, [r2, #0]
 800a5b0:	2002      	movpl	r0, #2
 800a5b2:	4770      	bx	lr
 800a5b4:	b299      	uxth	r1, r3
 800a5b6:	b909      	cbnz	r1, 800a5bc <__lo0bits+0x2a>
 800a5b8:	0c1b      	lsrs	r3, r3, #16
 800a5ba:	2010      	movs	r0, #16
 800a5bc:	b2d9      	uxtb	r1, r3
 800a5be:	b909      	cbnz	r1, 800a5c4 <__lo0bits+0x32>
 800a5c0:	3008      	adds	r0, #8
 800a5c2:	0a1b      	lsrs	r3, r3, #8
 800a5c4:	0719      	lsls	r1, r3, #28
 800a5c6:	bf04      	itt	eq
 800a5c8:	091b      	lsreq	r3, r3, #4
 800a5ca:	3004      	addeq	r0, #4
 800a5cc:	0799      	lsls	r1, r3, #30
 800a5ce:	bf04      	itt	eq
 800a5d0:	089b      	lsreq	r3, r3, #2
 800a5d2:	3002      	addeq	r0, #2
 800a5d4:	07d9      	lsls	r1, r3, #31
 800a5d6:	d403      	bmi.n	800a5e0 <__lo0bits+0x4e>
 800a5d8:	085b      	lsrs	r3, r3, #1
 800a5da:	f100 0001 	add.w	r0, r0, #1
 800a5de:	d003      	beq.n	800a5e8 <__lo0bits+0x56>
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	4770      	bx	lr
 800a5e4:	2000      	movs	r0, #0
 800a5e6:	4770      	bx	lr
 800a5e8:	2020      	movs	r0, #32
 800a5ea:	4770      	bx	lr

0800a5ec <__i2b>:
 800a5ec:	b510      	push	{r4, lr}
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	f7ff febd 	bl	800a370 <_Balloc>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	b928      	cbnz	r0, 800a606 <__i2b+0x1a>
 800a5fa:	4b05      	ldr	r3, [pc, #20]	@ (800a610 <__i2b+0x24>)
 800a5fc:	4805      	ldr	r0, [pc, #20]	@ (800a614 <__i2b+0x28>)
 800a5fe:	f240 1145 	movw	r1, #325	@ 0x145
 800a602:	f001 fc41 	bl	800be88 <__assert_func>
 800a606:	2301      	movs	r3, #1
 800a608:	6144      	str	r4, [r0, #20]
 800a60a:	6103      	str	r3, [r0, #16]
 800a60c:	bd10      	pop	{r4, pc}
 800a60e:	bf00      	nop
 800a610:	0800d2fd 	.word	0x0800d2fd
 800a614:	0800d30e 	.word	0x0800d30e

0800a618 <__multiply>:
 800a618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61c:	4614      	mov	r4, r2
 800a61e:	690a      	ldr	r2, [r1, #16]
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	429a      	cmp	r2, r3
 800a624:	bfa8      	it	ge
 800a626:	4623      	movge	r3, r4
 800a628:	460f      	mov	r7, r1
 800a62a:	bfa4      	itt	ge
 800a62c:	460c      	movge	r4, r1
 800a62e:	461f      	movge	r7, r3
 800a630:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a634:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a638:	68a3      	ldr	r3, [r4, #8]
 800a63a:	6861      	ldr	r1, [r4, #4]
 800a63c:	eb0a 0609 	add.w	r6, sl, r9
 800a640:	42b3      	cmp	r3, r6
 800a642:	b085      	sub	sp, #20
 800a644:	bfb8      	it	lt
 800a646:	3101      	addlt	r1, #1
 800a648:	f7ff fe92 	bl	800a370 <_Balloc>
 800a64c:	b930      	cbnz	r0, 800a65c <__multiply+0x44>
 800a64e:	4602      	mov	r2, r0
 800a650:	4b44      	ldr	r3, [pc, #272]	@ (800a764 <__multiply+0x14c>)
 800a652:	4845      	ldr	r0, [pc, #276]	@ (800a768 <__multiply+0x150>)
 800a654:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a658:	f001 fc16 	bl	800be88 <__assert_func>
 800a65c:	f100 0514 	add.w	r5, r0, #20
 800a660:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a664:	462b      	mov	r3, r5
 800a666:	2200      	movs	r2, #0
 800a668:	4543      	cmp	r3, r8
 800a66a:	d321      	bcc.n	800a6b0 <__multiply+0x98>
 800a66c:	f107 0114 	add.w	r1, r7, #20
 800a670:	f104 0214 	add.w	r2, r4, #20
 800a674:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a678:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a67c:	9302      	str	r3, [sp, #8]
 800a67e:	1b13      	subs	r3, r2, r4
 800a680:	3b15      	subs	r3, #21
 800a682:	f023 0303 	bic.w	r3, r3, #3
 800a686:	3304      	adds	r3, #4
 800a688:	f104 0715 	add.w	r7, r4, #21
 800a68c:	42ba      	cmp	r2, r7
 800a68e:	bf38      	it	cc
 800a690:	2304      	movcc	r3, #4
 800a692:	9301      	str	r3, [sp, #4]
 800a694:	9b02      	ldr	r3, [sp, #8]
 800a696:	9103      	str	r1, [sp, #12]
 800a698:	428b      	cmp	r3, r1
 800a69a:	d80c      	bhi.n	800a6b6 <__multiply+0x9e>
 800a69c:	2e00      	cmp	r6, #0
 800a69e:	dd03      	ble.n	800a6a8 <__multiply+0x90>
 800a6a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d05b      	beq.n	800a760 <__multiply+0x148>
 800a6a8:	6106      	str	r6, [r0, #16]
 800a6aa:	b005      	add	sp, #20
 800a6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b0:	f843 2b04 	str.w	r2, [r3], #4
 800a6b4:	e7d8      	b.n	800a668 <__multiply+0x50>
 800a6b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a6ba:	f1ba 0f00 	cmp.w	sl, #0
 800a6be:	d024      	beq.n	800a70a <__multiply+0xf2>
 800a6c0:	f104 0e14 	add.w	lr, r4, #20
 800a6c4:	46a9      	mov	r9, r5
 800a6c6:	f04f 0c00 	mov.w	ip, #0
 800a6ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6ce:	f8d9 3000 	ldr.w	r3, [r9]
 800a6d2:	fa1f fb87 	uxth.w	fp, r7
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a6dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a6e0:	f8d9 7000 	ldr.w	r7, [r9]
 800a6e4:	4463      	add	r3, ip
 800a6e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a6ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800a6ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a6f8:	4572      	cmp	r2, lr
 800a6fa:	f849 3b04 	str.w	r3, [r9], #4
 800a6fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a702:	d8e2      	bhi.n	800a6ca <__multiply+0xb2>
 800a704:	9b01      	ldr	r3, [sp, #4]
 800a706:	f845 c003 	str.w	ip, [r5, r3]
 800a70a:	9b03      	ldr	r3, [sp, #12]
 800a70c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a710:	3104      	adds	r1, #4
 800a712:	f1b9 0f00 	cmp.w	r9, #0
 800a716:	d021      	beq.n	800a75c <__multiply+0x144>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	f104 0c14 	add.w	ip, r4, #20
 800a71e:	46ae      	mov	lr, r5
 800a720:	f04f 0a00 	mov.w	sl, #0
 800a724:	f8bc b000 	ldrh.w	fp, [ip]
 800a728:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a72c:	fb09 770b 	mla	r7, r9, fp, r7
 800a730:	4457      	add	r7, sl
 800a732:	b29b      	uxth	r3, r3
 800a734:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a738:	f84e 3b04 	str.w	r3, [lr], #4
 800a73c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a740:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a744:	f8be 3000 	ldrh.w	r3, [lr]
 800a748:	fb09 330a 	mla	r3, r9, sl, r3
 800a74c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a750:	4562      	cmp	r2, ip
 800a752:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a756:	d8e5      	bhi.n	800a724 <__multiply+0x10c>
 800a758:	9f01      	ldr	r7, [sp, #4]
 800a75a:	51eb      	str	r3, [r5, r7]
 800a75c:	3504      	adds	r5, #4
 800a75e:	e799      	b.n	800a694 <__multiply+0x7c>
 800a760:	3e01      	subs	r6, #1
 800a762:	e79b      	b.n	800a69c <__multiply+0x84>
 800a764:	0800d2fd 	.word	0x0800d2fd
 800a768:	0800d30e 	.word	0x0800d30e

0800a76c <__pow5mult>:
 800a76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a770:	4615      	mov	r5, r2
 800a772:	f012 0203 	ands.w	r2, r2, #3
 800a776:	4607      	mov	r7, r0
 800a778:	460e      	mov	r6, r1
 800a77a:	d007      	beq.n	800a78c <__pow5mult+0x20>
 800a77c:	4c25      	ldr	r4, [pc, #148]	@ (800a814 <__pow5mult+0xa8>)
 800a77e:	3a01      	subs	r2, #1
 800a780:	2300      	movs	r3, #0
 800a782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a786:	f7ff fe55 	bl	800a434 <__multadd>
 800a78a:	4606      	mov	r6, r0
 800a78c:	10ad      	asrs	r5, r5, #2
 800a78e:	d03d      	beq.n	800a80c <__pow5mult+0xa0>
 800a790:	69fc      	ldr	r4, [r7, #28]
 800a792:	b97c      	cbnz	r4, 800a7b4 <__pow5mult+0x48>
 800a794:	2010      	movs	r0, #16
 800a796:	f7ff fd35 	bl	800a204 <malloc>
 800a79a:	4602      	mov	r2, r0
 800a79c:	61f8      	str	r0, [r7, #28]
 800a79e:	b928      	cbnz	r0, 800a7ac <__pow5mult+0x40>
 800a7a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a818 <__pow5mult+0xac>)
 800a7a2:	481e      	ldr	r0, [pc, #120]	@ (800a81c <__pow5mult+0xb0>)
 800a7a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a7a8:	f001 fb6e 	bl	800be88 <__assert_func>
 800a7ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7b0:	6004      	str	r4, [r0, #0]
 800a7b2:	60c4      	str	r4, [r0, #12]
 800a7b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a7b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7bc:	b94c      	cbnz	r4, 800a7d2 <__pow5mult+0x66>
 800a7be:	f240 2171 	movw	r1, #625	@ 0x271
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	f7ff ff12 	bl	800a5ec <__i2b>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	6003      	str	r3, [r0, #0]
 800a7d2:	f04f 0900 	mov.w	r9, #0
 800a7d6:	07eb      	lsls	r3, r5, #31
 800a7d8:	d50a      	bpl.n	800a7f0 <__pow5mult+0x84>
 800a7da:	4631      	mov	r1, r6
 800a7dc:	4622      	mov	r2, r4
 800a7de:	4638      	mov	r0, r7
 800a7e0:	f7ff ff1a 	bl	800a618 <__multiply>
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	4680      	mov	r8, r0
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f7ff fe01 	bl	800a3f0 <_Bfree>
 800a7ee:	4646      	mov	r6, r8
 800a7f0:	106d      	asrs	r5, r5, #1
 800a7f2:	d00b      	beq.n	800a80c <__pow5mult+0xa0>
 800a7f4:	6820      	ldr	r0, [r4, #0]
 800a7f6:	b938      	cbnz	r0, 800a808 <__pow5mult+0x9c>
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f7ff ff0b 	bl	800a618 <__multiply>
 800a802:	6020      	str	r0, [r4, #0]
 800a804:	f8c0 9000 	str.w	r9, [r0]
 800a808:	4604      	mov	r4, r0
 800a80a:	e7e4      	b.n	800a7d6 <__pow5mult+0x6a>
 800a80c:	4630      	mov	r0, r6
 800a80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a812:	bf00      	nop
 800a814:	0800d368 	.word	0x0800d368
 800a818:	0800d28e 	.word	0x0800d28e
 800a81c:	0800d30e 	.word	0x0800d30e

0800a820 <__lshift>:
 800a820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a824:	460c      	mov	r4, r1
 800a826:	6849      	ldr	r1, [r1, #4]
 800a828:	6923      	ldr	r3, [r4, #16]
 800a82a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a82e:	68a3      	ldr	r3, [r4, #8]
 800a830:	4607      	mov	r7, r0
 800a832:	4691      	mov	r9, r2
 800a834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a838:	f108 0601 	add.w	r6, r8, #1
 800a83c:	42b3      	cmp	r3, r6
 800a83e:	db0b      	blt.n	800a858 <__lshift+0x38>
 800a840:	4638      	mov	r0, r7
 800a842:	f7ff fd95 	bl	800a370 <_Balloc>
 800a846:	4605      	mov	r5, r0
 800a848:	b948      	cbnz	r0, 800a85e <__lshift+0x3e>
 800a84a:	4602      	mov	r2, r0
 800a84c:	4b28      	ldr	r3, [pc, #160]	@ (800a8f0 <__lshift+0xd0>)
 800a84e:	4829      	ldr	r0, [pc, #164]	@ (800a8f4 <__lshift+0xd4>)
 800a850:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a854:	f001 fb18 	bl	800be88 <__assert_func>
 800a858:	3101      	adds	r1, #1
 800a85a:	005b      	lsls	r3, r3, #1
 800a85c:	e7ee      	b.n	800a83c <__lshift+0x1c>
 800a85e:	2300      	movs	r3, #0
 800a860:	f100 0114 	add.w	r1, r0, #20
 800a864:	f100 0210 	add.w	r2, r0, #16
 800a868:	4618      	mov	r0, r3
 800a86a:	4553      	cmp	r3, sl
 800a86c:	db33      	blt.n	800a8d6 <__lshift+0xb6>
 800a86e:	6920      	ldr	r0, [r4, #16]
 800a870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a874:	f104 0314 	add.w	r3, r4, #20
 800a878:	f019 091f 	ands.w	r9, r9, #31
 800a87c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a880:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a884:	d02b      	beq.n	800a8de <__lshift+0xbe>
 800a886:	f1c9 0e20 	rsb	lr, r9, #32
 800a88a:	468a      	mov	sl, r1
 800a88c:	2200      	movs	r2, #0
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	fa00 f009 	lsl.w	r0, r0, r9
 800a894:	4310      	orrs	r0, r2
 800a896:	f84a 0b04 	str.w	r0, [sl], #4
 800a89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a89e:	459c      	cmp	ip, r3
 800a8a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8a4:	d8f3      	bhi.n	800a88e <__lshift+0x6e>
 800a8a6:	ebac 0304 	sub.w	r3, ip, r4
 800a8aa:	3b15      	subs	r3, #21
 800a8ac:	f023 0303 	bic.w	r3, r3, #3
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	f104 0015 	add.w	r0, r4, #21
 800a8b6:	4584      	cmp	ip, r0
 800a8b8:	bf38      	it	cc
 800a8ba:	2304      	movcc	r3, #4
 800a8bc:	50ca      	str	r2, [r1, r3]
 800a8be:	b10a      	cbz	r2, 800a8c4 <__lshift+0xa4>
 800a8c0:	f108 0602 	add.w	r6, r8, #2
 800a8c4:	3e01      	subs	r6, #1
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	612e      	str	r6, [r5, #16]
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	f7ff fd90 	bl	800a3f0 <_Bfree>
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8da:	3301      	adds	r3, #1
 800a8dc:	e7c5      	b.n	800a86a <__lshift+0x4a>
 800a8de:	3904      	subs	r1, #4
 800a8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8e8:	459c      	cmp	ip, r3
 800a8ea:	d8f9      	bhi.n	800a8e0 <__lshift+0xc0>
 800a8ec:	e7ea      	b.n	800a8c4 <__lshift+0xa4>
 800a8ee:	bf00      	nop
 800a8f0:	0800d2fd 	.word	0x0800d2fd
 800a8f4:	0800d30e 	.word	0x0800d30e

0800a8f8 <__mcmp>:
 800a8f8:	690a      	ldr	r2, [r1, #16]
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	6900      	ldr	r0, [r0, #16]
 800a8fe:	1a80      	subs	r0, r0, r2
 800a900:	b530      	push	{r4, r5, lr}
 800a902:	d10e      	bne.n	800a922 <__mcmp+0x2a>
 800a904:	3314      	adds	r3, #20
 800a906:	3114      	adds	r1, #20
 800a908:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a90c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a910:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a914:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a918:	4295      	cmp	r5, r2
 800a91a:	d003      	beq.n	800a924 <__mcmp+0x2c>
 800a91c:	d205      	bcs.n	800a92a <__mcmp+0x32>
 800a91e:	f04f 30ff 	mov.w	r0, #4294967295
 800a922:	bd30      	pop	{r4, r5, pc}
 800a924:	42a3      	cmp	r3, r4
 800a926:	d3f3      	bcc.n	800a910 <__mcmp+0x18>
 800a928:	e7fb      	b.n	800a922 <__mcmp+0x2a>
 800a92a:	2001      	movs	r0, #1
 800a92c:	e7f9      	b.n	800a922 <__mcmp+0x2a>
	...

0800a930 <__mdiff>:
 800a930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	4689      	mov	r9, r1
 800a936:	4606      	mov	r6, r0
 800a938:	4611      	mov	r1, r2
 800a93a:	4648      	mov	r0, r9
 800a93c:	4614      	mov	r4, r2
 800a93e:	f7ff ffdb 	bl	800a8f8 <__mcmp>
 800a942:	1e05      	subs	r5, r0, #0
 800a944:	d112      	bne.n	800a96c <__mdiff+0x3c>
 800a946:	4629      	mov	r1, r5
 800a948:	4630      	mov	r0, r6
 800a94a:	f7ff fd11 	bl	800a370 <_Balloc>
 800a94e:	4602      	mov	r2, r0
 800a950:	b928      	cbnz	r0, 800a95e <__mdiff+0x2e>
 800a952:	4b3f      	ldr	r3, [pc, #252]	@ (800aa50 <__mdiff+0x120>)
 800a954:	f240 2137 	movw	r1, #567	@ 0x237
 800a958:	483e      	ldr	r0, [pc, #248]	@ (800aa54 <__mdiff+0x124>)
 800a95a:	f001 fa95 	bl	800be88 <__assert_func>
 800a95e:	2301      	movs	r3, #1
 800a960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a964:	4610      	mov	r0, r2
 800a966:	b003      	add	sp, #12
 800a968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96c:	bfbc      	itt	lt
 800a96e:	464b      	movlt	r3, r9
 800a970:	46a1      	movlt	r9, r4
 800a972:	4630      	mov	r0, r6
 800a974:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a978:	bfba      	itte	lt
 800a97a:	461c      	movlt	r4, r3
 800a97c:	2501      	movlt	r5, #1
 800a97e:	2500      	movge	r5, #0
 800a980:	f7ff fcf6 	bl	800a370 <_Balloc>
 800a984:	4602      	mov	r2, r0
 800a986:	b918      	cbnz	r0, 800a990 <__mdiff+0x60>
 800a988:	4b31      	ldr	r3, [pc, #196]	@ (800aa50 <__mdiff+0x120>)
 800a98a:	f240 2145 	movw	r1, #581	@ 0x245
 800a98e:	e7e3      	b.n	800a958 <__mdiff+0x28>
 800a990:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a994:	6926      	ldr	r6, [r4, #16]
 800a996:	60c5      	str	r5, [r0, #12]
 800a998:	f109 0310 	add.w	r3, r9, #16
 800a99c:	f109 0514 	add.w	r5, r9, #20
 800a9a0:	f104 0e14 	add.w	lr, r4, #20
 800a9a4:	f100 0b14 	add.w	fp, r0, #20
 800a9a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a9ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a9b0:	9301      	str	r3, [sp, #4]
 800a9b2:	46d9      	mov	r9, fp
 800a9b4:	f04f 0c00 	mov.w	ip, #0
 800a9b8:	9b01      	ldr	r3, [sp, #4]
 800a9ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a9be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	fa1f f38a 	uxth.w	r3, sl
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	b283      	uxth	r3, r0
 800a9cc:	1acb      	subs	r3, r1, r3
 800a9ce:	0c00      	lsrs	r0, r0, #16
 800a9d0:	4463      	add	r3, ip
 800a9d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a9d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a9e0:	4576      	cmp	r6, lr
 800a9e2:	f849 3b04 	str.w	r3, [r9], #4
 800a9e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9ea:	d8e5      	bhi.n	800a9b8 <__mdiff+0x88>
 800a9ec:	1b33      	subs	r3, r6, r4
 800a9ee:	3b15      	subs	r3, #21
 800a9f0:	f023 0303 	bic.w	r3, r3, #3
 800a9f4:	3415      	adds	r4, #21
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	42a6      	cmp	r6, r4
 800a9fa:	bf38      	it	cc
 800a9fc:	2304      	movcc	r3, #4
 800a9fe:	441d      	add	r5, r3
 800aa00:	445b      	add	r3, fp
 800aa02:	461e      	mov	r6, r3
 800aa04:	462c      	mov	r4, r5
 800aa06:	4544      	cmp	r4, r8
 800aa08:	d30e      	bcc.n	800aa28 <__mdiff+0xf8>
 800aa0a:	f108 0103 	add.w	r1, r8, #3
 800aa0e:	1b49      	subs	r1, r1, r5
 800aa10:	f021 0103 	bic.w	r1, r1, #3
 800aa14:	3d03      	subs	r5, #3
 800aa16:	45a8      	cmp	r8, r5
 800aa18:	bf38      	it	cc
 800aa1a:	2100      	movcc	r1, #0
 800aa1c:	440b      	add	r3, r1
 800aa1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa22:	b191      	cbz	r1, 800aa4a <__mdiff+0x11a>
 800aa24:	6117      	str	r7, [r2, #16]
 800aa26:	e79d      	b.n	800a964 <__mdiff+0x34>
 800aa28:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa2c:	46e6      	mov	lr, ip
 800aa2e:	0c08      	lsrs	r0, r1, #16
 800aa30:	fa1c fc81 	uxtah	ip, ip, r1
 800aa34:	4471      	add	r1, lr
 800aa36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa3a:	b289      	uxth	r1, r1
 800aa3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa40:	f846 1b04 	str.w	r1, [r6], #4
 800aa44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa48:	e7dd      	b.n	800aa06 <__mdiff+0xd6>
 800aa4a:	3f01      	subs	r7, #1
 800aa4c:	e7e7      	b.n	800aa1e <__mdiff+0xee>
 800aa4e:	bf00      	nop
 800aa50:	0800d2fd 	.word	0x0800d2fd
 800aa54:	0800d30e 	.word	0x0800d30e

0800aa58 <__ulp>:
 800aa58:	b082      	sub	sp, #8
 800aa5a:	ed8d 0b00 	vstr	d0, [sp]
 800aa5e:	9a01      	ldr	r2, [sp, #4]
 800aa60:	4b0f      	ldr	r3, [pc, #60]	@ (800aaa0 <__ulp+0x48>)
 800aa62:	4013      	ands	r3, r2
 800aa64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dc08      	bgt.n	800aa7e <__ulp+0x26>
 800aa6c:	425b      	negs	r3, r3
 800aa6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aa72:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aa76:	da04      	bge.n	800aa82 <__ulp+0x2a>
 800aa78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aa7c:	4113      	asrs	r3, r2
 800aa7e:	2200      	movs	r2, #0
 800aa80:	e008      	b.n	800aa94 <__ulp+0x3c>
 800aa82:	f1a2 0314 	sub.w	r3, r2, #20
 800aa86:	2b1e      	cmp	r3, #30
 800aa88:	bfda      	itte	le
 800aa8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aa8e:	40da      	lsrle	r2, r3
 800aa90:	2201      	movgt	r2, #1
 800aa92:	2300      	movs	r3, #0
 800aa94:	4619      	mov	r1, r3
 800aa96:	4610      	mov	r0, r2
 800aa98:	ec41 0b10 	vmov	d0, r0, r1
 800aa9c:	b002      	add	sp, #8
 800aa9e:	4770      	bx	lr
 800aaa0:	7ff00000 	.word	0x7ff00000

0800aaa4 <__b2d>:
 800aaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa8:	6906      	ldr	r6, [r0, #16]
 800aaaa:	f100 0814 	add.w	r8, r0, #20
 800aaae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aab2:	1f37      	subs	r7, r6, #4
 800aab4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aab8:	4610      	mov	r0, r2
 800aaba:	f7ff fd4b 	bl	800a554 <__hi0bits>
 800aabe:	f1c0 0320 	rsb	r3, r0, #32
 800aac2:	280a      	cmp	r0, #10
 800aac4:	600b      	str	r3, [r1, #0]
 800aac6:	491b      	ldr	r1, [pc, #108]	@ (800ab34 <__b2d+0x90>)
 800aac8:	dc15      	bgt.n	800aaf6 <__b2d+0x52>
 800aaca:	f1c0 0c0b 	rsb	ip, r0, #11
 800aace:	fa22 f30c 	lsr.w	r3, r2, ip
 800aad2:	45b8      	cmp	r8, r7
 800aad4:	ea43 0501 	orr.w	r5, r3, r1
 800aad8:	bf34      	ite	cc
 800aada:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aade:	2300      	movcs	r3, #0
 800aae0:	3015      	adds	r0, #21
 800aae2:	fa02 f000 	lsl.w	r0, r2, r0
 800aae6:	fa23 f30c 	lsr.w	r3, r3, ip
 800aaea:	4303      	orrs	r3, r0
 800aaec:	461c      	mov	r4, r3
 800aaee:	ec45 4b10 	vmov	d0, r4, r5
 800aaf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf6:	45b8      	cmp	r8, r7
 800aaf8:	bf3a      	itte	cc
 800aafa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aafe:	f1a6 0708 	subcc.w	r7, r6, #8
 800ab02:	2300      	movcs	r3, #0
 800ab04:	380b      	subs	r0, #11
 800ab06:	d012      	beq.n	800ab2e <__b2d+0x8a>
 800ab08:	f1c0 0120 	rsb	r1, r0, #32
 800ab0c:	fa23 f401 	lsr.w	r4, r3, r1
 800ab10:	4082      	lsls	r2, r0
 800ab12:	4322      	orrs	r2, r4
 800ab14:	4547      	cmp	r7, r8
 800ab16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ab1a:	bf8c      	ite	hi
 800ab1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab20:	2200      	movls	r2, #0
 800ab22:	4083      	lsls	r3, r0
 800ab24:	40ca      	lsrs	r2, r1
 800ab26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	e7de      	b.n	800aaec <__b2d+0x48>
 800ab2e:	ea42 0501 	orr.w	r5, r2, r1
 800ab32:	e7db      	b.n	800aaec <__b2d+0x48>
 800ab34:	3ff00000 	.word	0x3ff00000

0800ab38 <__d2b>:
 800ab38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	2101      	movs	r1, #1
 800ab40:	ec59 8b10 	vmov	r8, r9, d0
 800ab44:	4616      	mov	r6, r2
 800ab46:	f7ff fc13 	bl	800a370 <_Balloc>
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	b930      	cbnz	r0, 800ab5c <__d2b+0x24>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	4b23      	ldr	r3, [pc, #140]	@ (800abe0 <__d2b+0xa8>)
 800ab52:	4824      	ldr	r0, [pc, #144]	@ (800abe4 <__d2b+0xac>)
 800ab54:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab58:	f001 f996 	bl	800be88 <__assert_func>
 800ab5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab64:	b10d      	cbz	r5, 800ab6a <__d2b+0x32>
 800ab66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	f1b8 0300 	subs.w	r3, r8, #0
 800ab70:	d023      	beq.n	800abba <__d2b+0x82>
 800ab72:	4668      	mov	r0, sp
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	f7ff fd0c 	bl	800a592 <__lo0bits>
 800ab7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab7e:	b1d0      	cbz	r0, 800abb6 <__d2b+0x7e>
 800ab80:	f1c0 0320 	rsb	r3, r0, #32
 800ab84:	fa02 f303 	lsl.w	r3, r2, r3
 800ab88:	430b      	orrs	r3, r1
 800ab8a:	40c2      	lsrs	r2, r0
 800ab8c:	6163      	str	r3, [r4, #20]
 800ab8e:	9201      	str	r2, [sp, #4]
 800ab90:	9b01      	ldr	r3, [sp, #4]
 800ab92:	61a3      	str	r3, [r4, #24]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	bf0c      	ite	eq
 800ab98:	2201      	moveq	r2, #1
 800ab9a:	2202      	movne	r2, #2
 800ab9c:	6122      	str	r2, [r4, #16]
 800ab9e:	b1a5      	cbz	r5, 800abca <__d2b+0x92>
 800aba0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aba4:	4405      	add	r5, r0
 800aba6:	603d      	str	r5, [r7, #0]
 800aba8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800abac:	6030      	str	r0, [r6, #0]
 800abae:	4620      	mov	r0, r4
 800abb0:	b003      	add	sp, #12
 800abb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abb6:	6161      	str	r1, [r4, #20]
 800abb8:	e7ea      	b.n	800ab90 <__d2b+0x58>
 800abba:	a801      	add	r0, sp, #4
 800abbc:	f7ff fce9 	bl	800a592 <__lo0bits>
 800abc0:	9b01      	ldr	r3, [sp, #4]
 800abc2:	6163      	str	r3, [r4, #20]
 800abc4:	3020      	adds	r0, #32
 800abc6:	2201      	movs	r2, #1
 800abc8:	e7e8      	b.n	800ab9c <__d2b+0x64>
 800abca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800abd2:	6038      	str	r0, [r7, #0]
 800abd4:	6918      	ldr	r0, [r3, #16]
 800abd6:	f7ff fcbd 	bl	800a554 <__hi0bits>
 800abda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abde:	e7e5      	b.n	800abac <__d2b+0x74>
 800abe0:	0800d2fd 	.word	0x0800d2fd
 800abe4:	0800d30e 	.word	0x0800d30e

0800abe8 <__ratio>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	b085      	sub	sp, #20
 800abee:	e9cd 1000 	strd	r1, r0, [sp]
 800abf2:	a902      	add	r1, sp, #8
 800abf4:	f7ff ff56 	bl	800aaa4 <__b2d>
 800abf8:	9800      	ldr	r0, [sp, #0]
 800abfa:	a903      	add	r1, sp, #12
 800abfc:	ec55 4b10 	vmov	r4, r5, d0
 800ac00:	f7ff ff50 	bl	800aaa4 <__b2d>
 800ac04:	9b01      	ldr	r3, [sp, #4]
 800ac06:	6919      	ldr	r1, [r3, #16]
 800ac08:	9b00      	ldr	r3, [sp, #0]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	1ac9      	subs	r1, r1, r3
 800ac0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ac12:	1a9b      	subs	r3, r3, r2
 800ac14:	ec5b ab10 	vmov	sl, fp, d0
 800ac18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	bfce      	itee	gt
 800ac20:	462a      	movgt	r2, r5
 800ac22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac26:	465a      	movle	r2, fp
 800ac28:	462f      	mov	r7, r5
 800ac2a:	46d9      	mov	r9, fp
 800ac2c:	bfcc      	ite	gt
 800ac2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ac36:	464b      	mov	r3, r9
 800ac38:	4652      	mov	r2, sl
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	4639      	mov	r1, r7
 800ac3e:	f7f5 fe05 	bl	800084c <__aeabi_ddiv>
 800ac42:	ec41 0b10 	vmov	d0, r0, r1
 800ac46:	b005      	add	sp, #20
 800ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac4c <__copybits>:
 800ac4c:	3901      	subs	r1, #1
 800ac4e:	b570      	push	{r4, r5, r6, lr}
 800ac50:	1149      	asrs	r1, r1, #5
 800ac52:	6914      	ldr	r4, [r2, #16]
 800ac54:	3101      	adds	r1, #1
 800ac56:	f102 0314 	add.w	r3, r2, #20
 800ac5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac62:	1f05      	subs	r5, r0, #4
 800ac64:	42a3      	cmp	r3, r4
 800ac66:	d30c      	bcc.n	800ac82 <__copybits+0x36>
 800ac68:	1aa3      	subs	r3, r4, r2
 800ac6a:	3b11      	subs	r3, #17
 800ac6c:	f023 0303 	bic.w	r3, r3, #3
 800ac70:	3211      	adds	r2, #17
 800ac72:	42a2      	cmp	r2, r4
 800ac74:	bf88      	it	hi
 800ac76:	2300      	movhi	r3, #0
 800ac78:	4418      	add	r0, r3
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	4288      	cmp	r0, r1
 800ac7e:	d305      	bcc.n	800ac8c <__copybits+0x40>
 800ac80:	bd70      	pop	{r4, r5, r6, pc}
 800ac82:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac86:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac8a:	e7eb      	b.n	800ac64 <__copybits+0x18>
 800ac8c:	f840 3b04 	str.w	r3, [r0], #4
 800ac90:	e7f4      	b.n	800ac7c <__copybits+0x30>

0800ac92 <__any_on>:
 800ac92:	f100 0214 	add.w	r2, r0, #20
 800ac96:	6900      	ldr	r0, [r0, #16]
 800ac98:	114b      	asrs	r3, r1, #5
 800ac9a:	4298      	cmp	r0, r3
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	db11      	blt.n	800acc4 <__any_on+0x32>
 800aca0:	dd0a      	ble.n	800acb8 <__any_on+0x26>
 800aca2:	f011 011f 	ands.w	r1, r1, #31
 800aca6:	d007      	beq.n	800acb8 <__any_on+0x26>
 800aca8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800acac:	fa24 f001 	lsr.w	r0, r4, r1
 800acb0:	fa00 f101 	lsl.w	r1, r0, r1
 800acb4:	428c      	cmp	r4, r1
 800acb6:	d10b      	bne.n	800acd0 <__any_on+0x3e>
 800acb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d803      	bhi.n	800acc8 <__any_on+0x36>
 800acc0:	2000      	movs	r0, #0
 800acc2:	bd10      	pop	{r4, pc}
 800acc4:	4603      	mov	r3, r0
 800acc6:	e7f7      	b.n	800acb8 <__any_on+0x26>
 800acc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800accc:	2900      	cmp	r1, #0
 800acce:	d0f5      	beq.n	800acbc <__any_on+0x2a>
 800acd0:	2001      	movs	r0, #1
 800acd2:	e7f6      	b.n	800acc2 <__any_on+0x30>

0800acd4 <sulp>:
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	4604      	mov	r4, r0
 800acd8:	460d      	mov	r5, r1
 800acda:	ec45 4b10 	vmov	d0, r4, r5
 800acde:	4616      	mov	r6, r2
 800ace0:	f7ff feba 	bl	800aa58 <__ulp>
 800ace4:	ec51 0b10 	vmov	r0, r1, d0
 800ace8:	b17e      	cbz	r6, 800ad0a <sulp+0x36>
 800acea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	dd09      	ble.n	800ad0a <sulp+0x36>
 800acf6:	051b      	lsls	r3, r3, #20
 800acf8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800acfc:	2400      	movs	r4, #0
 800acfe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ad02:	4622      	mov	r2, r4
 800ad04:	462b      	mov	r3, r5
 800ad06:	f7f5 fc77 	bl	80005f8 <__aeabi_dmul>
 800ad0a:	ec41 0b10 	vmov	d0, r0, r1
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}

0800ad10 <_strtod_l>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	b09f      	sub	sp, #124	@ 0x7c
 800ad16:	460c      	mov	r4, r1
 800ad18:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ad1e:	9005      	str	r0, [sp, #20]
 800ad20:	f04f 0a00 	mov.w	sl, #0
 800ad24:	f04f 0b00 	mov.w	fp, #0
 800ad28:	460a      	mov	r2, r1
 800ad2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad2c:	7811      	ldrb	r1, [r2, #0]
 800ad2e:	292b      	cmp	r1, #43	@ 0x2b
 800ad30:	d04a      	beq.n	800adc8 <_strtod_l+0xb8>
 800ad32:	d838      	bhi.n	800ada6 <_strtod_l+0x96>
 800ad34:	290d      	cmp	r1, #13
 800ad36:	d832      	bhi.n	800ad9e <_strtod_l+0x8e>
 800ad38:	2908      	cmp	r1, #8
 800ad3a:	d832      	bhi.n	800ada2 <_strtod_l+0x92>
 800ad3c:	2900      	cmp	r1, #0
 800ad3e:	d03b      	beq.n	800adb8 <_strtod_l+0xa8>
 800ad40:	2200      	movs	r2, #0
 800ad42:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ad44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ad46:	782a      	ldrb	r2, [r5, #0]
 800ad48:	2a30      	cmp	r2, #48	@ 0x30
 800ad4a:	f040 80b3 	bne.w	800aeb4 <_strtod_l+0x1a4>
 800ad4e:	786a      	ldrb	r2, [r5, #1]
 800ad50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad54:	2a58      	cmp	r2, #88	@ 0x58
 800ad56:	d16e      	bne.n	800ae36 <_strtod_l+0x126>
 800ad58:	9302      	str	r3, [sp, #8]
 800ad5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	4a8e      	ldr	r2, [pc, #568]	@ (800af9c <_strtod_l+0x28c>)
 800ad64:	9805      	ldr	r0, [sp, #20]
 800ad66:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ad68:	a919      	add	r1, sp, #100	@ 0x64
 800ad6a:	f001 f927 	bl	800bfbc <__gethex>
 800ad6e:	f010 060f 	ands.w	r6, r0, #15
 800ad72:	4604      	mov	r4, r0
 800ad74:	d005      	beq.n	800ad82 <_strtod_l+0x72>
 800ad76:	2e06      	cmp	r6, #6
 800ad78:	d128      	bne.n	800adcc <_strtod_l+0xbc>
 800ad7a:	3501      	adds	r5, #1
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ad80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f040 858e 	bne.w	800b8a6 <_strtod_l+0xb96>
 800ad8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad8c:	b1cb      	cbz	r3, 800adc2 <_strtod_l+0xb2>
 800ad8e:	4652      	mov	r2, sl
 800ad90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ad94:	ec43 2b10 	vmov	d0, r2, r3
 800ad98:	b01f      	add	sp, #124	@ 0x7c
 800ad9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9e:	2920      	cmp	r1, #32
 800ada0:	d1ce      	bne.n	800ad40 <_strtod_l+0x30>
 800ada2:	3201      	adds	r2, #1
 800ada4:	e7c1      	b.n	800ad2a <_strtod_l+0x1a>
 800ada6:	292d      	cmp	r1, #45	@ 0x2d
 800ada8:	d1ca      	bne.n	800ad40 <_strtod_l+0x30>
 800adaa:	2101      	movs	r1, #1
 800adac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800adae:	1c51      	adds	r1, r2, #1
 800adb0:	9119      	str	r1, [sp, #100]	@ 0x64
 800adb2:	7852      	ldrb	r2, [r2, #1]
 800adb4:	2a00      	cmp	r2, #0
 800adb6:	d1c5      	bne.n	800ad44 <_strtod_l+0x34>
 800adb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800adba:	9419      	str	r4, [sp, #100]	@ 0x64
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f040 8570 	bne.w	800b8a2 <_strtod_l+0xb92>
 800adc2:	4652      	mov	r2, sl
 800adc4:	465b      	mov	r3, fp
 800adc6:	e7e5      	b.n	800ad94 <_strtod_l+0x84>
 800adc8:	2100      	movs	r1, #0
 800adca:	e7ef      	b.n	800adac <_strtod_l+0x9c>
 800adcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800adce:	b13a      	cbz	r2, 800ade0 <_strtod_l+0xd0>
 800add0:	2135      	movs	r1, #53	@ 0x35
 800add2:	a81c      	add	r0, sp, #112	@ 0x70
 800add4:	f7ff ff3a 	bl	800ac4c <__copybits>
 800add8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adda:	9805      	ldr	r0, [sp, #20]
 800addc:	f7ff fb08 	bl	800a3f0 <_Bfree>
 800ade0:	3e01      	subs	r6, #1
 800ade2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ade4:	2e04      	cmp	r6, #4
 800ade6:	d806      	bhi.n	800adf6 <_strtod_l+0xe6>
 800ade8:	e8df f006 	tbb	[pc, r6]
 800adec:	201d0314 	.word	0x201d0314
 800adf0:	14          	.byte	0x14
 800adf1:	00          	.byte	0x00
 800adf2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800adf6:	05e1      	lsls	r1, r4, #23
 800adf8:	bf48      	it	mi
 800adfa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800adfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae02:	0d1b      	lsrs	r3, r3, #20
 800ae04:	051b      	lsls	r3, r3, #20
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1bb      	bne.n	800ad82 <_strtod_l+0x72>
 800ae0a:	f7fe fb31 	bl	8009470 <__errno>
 800ae0e:	2322      	movs	r3, #34	@ 0x22
 800ae10:	6003      	str	r3, [r0, #0]
 800ae12:	e7b6      	b.n	800ad82 <_strtod_l+0x72>
 800ae14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ae18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ae1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ae20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae24:	e7e7      	b.n	800adf6 <_strtod_l+0xe6>
 800ae26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800afa4 <_strtod_l+0x294>
 800ae2a:	e7e4      	b.n	800adf6 <_strtod_l+0xe6>
 800ae2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ae30:	f04f 3aff 	mov.w	sl, #4294967295
 800ae34:	e7df      	b.n	800adf6 <_strtod_l+0xe6>
 800ae36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae38:	1c5a      	adds	r2, r3, #1
 800ae3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae3c:	785b      	ldrb	r3, [r3, #1]
 800ae3e:	2b30      	cmp	r3, #48	@ 0x30
 800ae40:	d0f9      	beq.n	800ae36 <_strtod_l+0x126>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d09d      	beq.n	800ad82 <_strtod_l+0x72>
 800ae46:	2301      	movs	r3, #1
 800ae48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae4e:	2300      	movs	r3, #0
 800ae50:	9308      	str	r3, [sp, #32]
 800ae52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae54:	461f      	mov	r7, r3
 800ae56:	220a      	movs	r2, #10
 800ae58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ae5a:	7805      	ldrb	r5, [r0, #0]
 800ae5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ae60:	b2d9      	uxtb	r1, r3
 800ae62:	2909      	cmp	r1, #9
 800ae64:	d928      	bls.n	800aeb8 <_strtod_l+0x1a8>
 800ae66:	494e      	ldr	r1, [pc, #312]	@ (800afa0 <_strtod_l+0x290>)
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f000 ffd5 	bl	800be18 <strncmp>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d032      	beq.n	800aed8 <_strtod_l+0x1c8>
 800ae72:	2000      	movs	r0, #0
 800ae74:	462a      	mov	r2, r5
 800ae76:	4681      	mov	r9, r0
 800ae78:	463d      	mov	r5, r7
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2a65      	cmp	r2, #101	@ 0x65
 800ae7e:	d001      	beq.n	800ae84 <_strtod_l+0x174>
 800ae80:	2a45      	cmp	r2, #69	@ 0x45
 800ae82:	d114      	bne.n	800aeae <_strtod_l+0x19e>
 800ae84:	b91d      	cbnz	r5, 800ae8e <_strtod_l+0x17e>
 800ae86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae88:	4302      	orrs	r2, r0
 800ae8a:	d095      	beq.n	800adb8 <_strtod_l+0xa8>
 800ae8c:	2500      	movs	r5, #0
 800ae8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ae90:	1c62      	adds	r2, r4, #1
 800ae92:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae94:	7862      	ldrb	r2, [r4, #1]
 800ae96:	2a2b      	cmp	r2, #43	@ 0x2b
 800ae98:	d077      	beq.n	800af8a <_strtod_l+0x27a>
 800ae9a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ae9c:	d07b      	beq.n	800af96 <_strtod_l+0x286>
 800ae9e:	f04f 0c00 	mov.w	ip, #0
 800aea2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aea6:	2909      	cmp	r1, #9
 800aea8:	f240 8082 	bls.w	800afb0 <_strtod_l+0x2a0>
 800aeac:	9419      	str	r4, [sp, #100]	@ 0x64
 800aeae:	f04f 0800 	mov.w	r8, #0
 800aeb2:	e0a2      	b.n	800affa <_strtod_l+0x2ea>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e7c7      	b.n	800ae48 <_strtod_l+0x138>
 800aeb8:	2f08      	cmp	r7, #8
 800aeba:	bfd5      	itete	le
 800aebc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800aebe:	9908      	ldrgt	r1, [sp, #32]
 800aec0:	fb02 3301 	mlale	r3, r2, r1, r3
 800aec4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aec8:	f100 0001 	add.w	r0, r0, #1
 800aecc:	bfd4      	ite	le
 800aece:	930a      	strle	r3, [sp, #40]	@ 0x28
 800aed0:	9308      	strgt	r3, [sp, #32]
 800aed2:	3701      	adds	r7, #1
 800aed4:	9019      	str	r0, [sp, #100]	@ 0x64
 800aed6:	e7bf      	b.n	800ae58 <_strtod_l+0x148>
 800aed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeda:	1c5a      	adds	r2, r3, #1
 800aedc:	9219      	str	r2, [sp, #100]	@ 0x64
 800aede:	785a      	ldrb	r2, [r3, #1]
 800aee0:	b37f      	cbz	r7, 800af42 <_strtod_l+0x232>
 800aee2:	4681      	mov	r9, r0
 800aee4:	463d      	mov	r5, r7
 800aee6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aeea:	2b09      	cmp	r3, #9
 800aeec:	d912      	bls.n	800af14 <_strtod_l+0x204>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e7c4      	b.n	800ae7c <_strtod_l+0x16c>
 800aef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	9219      	str	r2, [sp, #100]	@ 0x64
 800aef8:	785a      	ldrb	r2, [r3, #1]
 800aefa:	3001      	adds	r0, #1
 800aefc:	2a30      	cmp	r2, #48	@ 0x30
 800aefe:	d0f8      	beq.n	800aef2 <_strtod_l+0x1e2>
 800af00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800af04:	2b08      	cmp	r3, #8
 800af06:	f200 84d3 	bhi.w	800b8b0 <_strtod_l+0xba0>
 800af0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800af0e:	4681      	mov	r9, r0
 800af10:	2000      	movs	r0, #0
 800af12:	4605      	mov	r5, r0
 800af14:	3a30      	subs	r2, #48	@ 0x30
 800af16:	f100 0301 	add.w	r3, r0, #1
 800af1a:	d02a      	beq.n	800af72 <_strtod_l+0x262>
 800af1c:	4499      	add	r9, r3
 800af1e:	eb00 0c05 	add.w	ip, r0, r5
 800af22:	462b      	mov	r3, r5
 800af24:	210a      	movs	r1, #10
 800af26:	4563      	cmp	r3, ip
 800af28:	d10d      	bne.n	800af46 <_strtod_l+0x236>
 800af2a:	1c69      	adds	r1, r5, #1
 800af2c:	4401      	add	r1, r0
 800af2e:	4428      	add	r0, r5
 800af30:	2808      	cmp	r0, #8
 800af32:	dc16      	bgt.n	800af62 <_strtod_l+0x252>
 800af34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af36:	230a      	movs	r3, #10
 800af38:	fb03 2300 	mla	r3, r3, r0, r2
 800af3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800af3e:	2300      	movs	r3, #0
 800af40:	e018      	b.n	800af74 <_strtod_l+0x264>
 800af42:	4638      	mov	r0, r7
 800af44:	e7da      	b.n	800aefc <_strtod_l+0x1ec>
 800af46:	2b08      	cmp	r3, #8
 800af48:	f103 0301 	add.w	r3, r3, #1
 800af4c:	dc03      	bgt.n	800af56 <_strtod_l+0x246>
 800af4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800af50:	434e      	muls	r6, r1
 800af52:	960a      	str	r6, [sp, #40]	@ 0x28
 800af54:	e7e7      	b.n	800af26 <_strtod_l+0x216>
 800af56:	2b10      	cmp	r3, #16
 800af58:	bfde      	ittt	le
 800af5a:	9e08      	ldrle	r6, [sp, #32]
 800af5c:	434e      	mulle	r6, r1
 800af5e:	9608      	strle	r6, [sp, #32]
 800af60:	e7e1      	b.n	800af26 <_strtod_l+0x216>
 800af62:	280f      	cmp	r0, #15
 800af64:	dceb      	bgt.n	800af3e <_strtod_l+0x22e>
 800af66:	9808      	ldr	r0, [sp, #32]
 800af68:	230a      	movs	r3, #10
 800af6a:	fb03 2300 	mla	r3, r3, r0, r2
 800af6e:	9308      	str	r3, [sp, #32]
 800af70:	e7e5      	b.n	800af3e <_strtod_l+0x22e>
 800af72:	4629      	mov	r1, r5
 800af74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af76:	1c50      	adds	r0, r2, #1
 800af78:	9019      	str	r0, [sp, #100]	@ 0x64
 800af7a:	7852      	ldrb	r2, [r2, #1]
 800af7c:	4618      	mov	r0, r3
 800af7e:	460d      	mov	r5, r1
 800af80:	e7b1      	b.n	800aee6 <_strtod_l+0x1d6>
 800af82:	f04f 0900 	mov.w	r9, #0
 800af86:	2301      	movs	r3, #1
 800af88:	e77d      	b.n	800ae86 <_strtod_l+0x176>
 800af8a:	f04f 0c00 	mov.w	ip, #0
 800af8e:	1ca2      	adds	r2, r4, #2
 800af90:	9219      	str	r2, [sp, #100]	@ 0x64
 800af92:	78a2      	ldrb	r2, [r4, #2]
 800af94:	e785      	b.n	800aea2 <_strtod_l+0x192>
 800af96:	f04f 0c01 	mov.w	ip, #1
 800af9a:	e7f8      	b.n	800af8e <_strtod_l+0x27e>
 800af9c:	0800d480 	.word	0x0800d480
 800afa0:	0800d468 	.word	0x0800d468
 800afa4:	7ff00000 	.word	0x7ff00000
 800afa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afaa:	1c51      	adds	r1, r2, #1
 800afac:	9119      	str	r1, [sp, #100]	@ 0x64
 800afae:	7852      	ldrb	r2, [r2, #1]
 800afb0:	2a30      	cmp	r2, #48	@ 0x30
 800afb2:	d0f9      	beq.n	800afa8 <_strtod_l+0x298>
 800afb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800afb8:	2908      	cmp	r1, #8
 800afba:	f63f af78 	bhi.w	800aeae <_strtod_l+0x19e>
 800afbe:	3a30      	subs	r2, #48	@ 0x30
 800afc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800afc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800afc6:	f04f 080a 	mov.w	r8, #10
 800afca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afcc:	1c56      	adds	r6, r2, #1
 800afce:	9619      	str	r6, [sp, #100]	@ 0x64
 800afd0:	7852      	ldrb	r2, [r2, #1]
 800afd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800afd6:	f1be 0f09 	cmp.w	lr, #9
 800afda:	d939      	bls.n	800b050 <_strtod_l+0x340>
 800afdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800afde:	1a76      	subs	r6, r6, r1
 800afe0:	2e08      	cmp	r6, #8
 800afe2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800afe6:	dc03      	bgt.n	800aff0 <_strtod_l+0x2e0>
 800afe8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800afea:	4588      	cmp	r8, r1
 800afec:	bfa8      	it	ge
 800afee:	4688      	movge	r8, r1
 800aff0:	f1bc 0f00 	cmp.w	ip, #0
 800aff4:	d001      	beq.n	800affa <_strtod_l+0x2ea>
 800aff6:	f1c8 0800 	rsb	r8, r8, #0
 800affa:	2d00      	cmp	r5, #0
 800affc:	d14e      	bne.n	800b09c <_strtod_l+0x38c>
 800affe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b000:	4308      	orrs	r0, r1
 800b002:	f47f aebe 	bne.w	800ad82 <_strtod_l+0x72>
 800b006:	2b00      	cmp	r3, #0
 800b008:	f47f aed6 	bne.w	800adb8 <_strtod_l+0xa8>
 800b00c:	2a69      	cmp	r2, #105	@ 0x69
 800b00e:	d028      	beq.n	800b062 <_strtod_l+0x352>
 800b010:	dc25      	bgt.n	800b05e <_strtod_l+0x34e>
 800b012:	2a49      	cmp	r2, #73	@ 0x49
 800b014:	d025      	beq.n	800b062 <_strtod_l+0x352>
 800b016:	2a4e      	cmp	r2, #78	@ 0x4e
 800b018:	f47f aece 	bne.w	800adb8 <_strtod_l+0xa8>
 800b01c:	499b      	ldr	r1, [pc, #620]	@ (800b28c <_strtod_l+0x57c>)
 800b01e:	a819      	add	r0, sp, #100	@ 0x64
 800b020:	f001 f9ee 	bl	800c400 <__match>
 800b024:	2800      	cmp	r0, #0
 800b026:	f43f aec7 	beq.w	800adb8 <_strtod_l+0xa8>
 800b02a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b28      	cmp	r3, #40	@ 0x28
 800b030:	d12e      	bne.n	800b090 <_strtod_l+0x380>
 800b032:	4997      	ldr	r1, [pc, #604]	@ (800b290 <_strtod_l+0x580>)
 800b034:	aa1c      	add	r2, sp, #112	@ 0x70
 800b036:	a819      	add	r0, sp, #100	@ 0x64
 800b038:	f001 f9f6 	bl	800c428 <__hexnan>
 800b03c:	2805      	cmp	r0, #5
 800b03e:	d127      	bne.n	800b090 <_strtod_l+0x380>
 800b040:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b042:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b046:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b04a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b04e:	e698      	b.n	800ad82 <_strtod_l+0x72>
 800b050:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b052:	fb08 2101 	mla	r1, r8, r1, r2
 800b056:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b05a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b05c:	e7b5      	b.n	800afca <_strtod_l+0x2ba>
 800b05e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b060:	e7da      	b.n	800b018 <_strtod_l+0x308>
 800b062:	498c      	ldr	r1, [pc, #560]	@ (800b294 <_strtod_l+0x584>)
 800b064:	a819      	add	r0, sp, #100	@ 0x64
 800b066:	f001 f9cb 	bl	800c400 <__match>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	f43f aea4 	beq.w	800adb8 <_strtod_l+0xa8>
 800b070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b072:	4989      	ldr	r1, [pc, #548]	@ (800b298 <_strtod_l+0x588>)
 800b074:	3b01      	subs	r3, #1
 800b076:	a819      	add	r0, sp, #100	@ 0x64
 800b078:	9319      	str	r3, [sp, #100]	@ 0x64
 800b07a:	f001 f9c1 	bl	800c400 <__match>
 800b07e:	b910      	cbnz	r0, 800b086 <_strtod_l+0x376>
 800b080:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b082:	3301      	adds	r3, #1
 800b084:	9319      	str	r3, [sp, #100]	@ 0x64
 800b086:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b2a8 <_strtod_l+0x598>
 800b08a:	f04f 0a00 	mov.w	sl, #0
 800b08e:	e678      	b.n	800ad82 <_strtod_l+0x72>
 800b090:	4882      	ldr	r0, [pc, #520]	@ (800b29c <_strtod_l+0x58c>)
 800b092:	f000 fef1 	bl	800be78 <nan>
 800b096:	ec5b ab10 	vmov	sl, fp, d0
 800b09a:	e672      	b.n	800ad82 <_strtod_l+0x72>
 800b09c:	eba8 0309 	sub.w	r3, r8, r9
 800b0a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b0a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0a4:	2f00      	cmp	r7, #0
 800b0a6:	bf08      	it	eq
 800b0a8:	462f      	moveq	r7, r5
 800b0aa:	2d10      	cmp	r5, #16
 800b0ac:	462c      	mov	r4, r5
 800b0ae:	bfa8      	it	ge
 800b0b0:	2410      	movge	r4, #16
 800b0b2:	f7f5 fa27 	bl	8000504 <__aeabi_ui2d>
 800b0b6:	2d09      	cmp	r5, #9
 800b0b8:	4682      	mov	sl, r0
 800b0ba:	468b      	mov	fp, r1
 800b0bc:	dc13      	bgt.n	800b0e6 <_strtod_l+0x3d6>
 800b0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f43f ae5e 	beq.w	800ad82 <_strtod_l+0x72>
 800b0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c8:	dd78      	ble.n	800b1bc <_strtod_l+0x4ac>
 800b0ca:	2b16      	cmp	r3, #22
 800b0cc:	dc5f      	bgt.n	800b18e <_strtod_l+0x47e>
 800b0ce:	4974      	ldr	r1, [pc, #464]	@ (800b2a0 <_strtod_l+0x590>)
 800b0d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d8:	4652      	mov	r2, sl
 800b0da:	465b      	mov	r3, fp
 800b0dc:	f7f5 fa8c 	bl	80005f8 <__aeabi_dmul>
 800b0e0:	4682      	mov	sl, r0
 800b0e2:	468b      	mov	fp, r1
 800b0e4:	e64d      	b.n	800ad82 <_strtod_l+0x72>
 800b0e6:	4b6e      	ldr	r3, [pc, #440]	@ (800b2a0 <_strtod_l+0x590>)
 800b0e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b0f0:	f7f5 fa82 	bl	80005f8 <__aeabi_dmul>
 800b0f4:	4682      	mov	sl, r0
 800b0f6:	9808      	ldr	r0, [sp, #32]
 800b0f8:	468b      	mov	fp, r1
 800b0fa:	f7f5 fa03 	bl	8000504 <__aeabi_ui2d>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	4650      	mov	r0, sl
 800b104:	4659      	mov	r1, fp
 800b106:	f7f5 f8c1 	bl	800028c <__adddf3>
 800b10a:	2d0f      	cmp	r5, #15
 800b10c:	4682      	mov	sl, r0
 800b10e:	468b      	mov	fp, r1
 800b110:	ddd5      	ble.n	800b0be <_strtod_l+0x3ae>
 800b112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b114:	1b2c      	subs	r4, r5, r4
 800b116:	441c      	add	r4, r3
 800b118:	2c00      	cmp	r4, #0
 800b11a:	f340 8096 	ble.w	800b24a <_strtod_l+0x53a>
 800b11e:	f014 030f 	ands.w	r3, r4, #15
 800b122:	d00a      	beq.n	800b13a <_strtod_l+0x42a>
 800b124:	495e      	ldr	r1, [pc, #376]	@ (800b2a0 <_strtod_l+0x590>)
 800b126:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b12a:	4652      	mov	r2, sl
 800b12c:	465b      	mov	r3, fp
 800b12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b132:	f7f5 fa61 	bl	80005f8 <__aeabi_dmul>
 800b136:	4682      	mov	sl, r0
 800b138:	468b      	mov	fp, r1
 800b13a:	f034 040f 	bics.w	r4, r4, #15
 800b13e:	d073      	beq.n	800b228 <_strtod_l+0x518>
 800b140:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b144:	dd48      	ble.n	800b1d8 <_strtod_l+0x4c8>
 800b146:	2400      	movs	r4, #0
 800b148:	46a0      	mov	r8, r4
 800b14a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b14c:	46a1      	mov	r9, r4
 800b14e:	9a05      	ldr	r2, [sp, #20]
 800b150:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b2a8 <_strtod_l+0x598>
 800b154:	2322      	movs	r3, #34	@ 0x22
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	f04f 0a00 	mov.w	sl, #0
 800b15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f43f ae0f 	beq.w	800ad82 <_strtod_l+0x72>
 800b164:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b166:	9805      	ldr	r0, [sp, #20]
 800b168:	f7ff f942 	bl	800a3f0 <_Bfree>
 800b16c:	9805      	ldr	r0, [sp, #20]
 800b16e:	4649      	mov	r1, r9
 800b170:	f7ff f93e 	bl	800a3f0 <_Bfree>
 800b174:	9805      	ldr	r0, [sp, #20]
 800b176:	4641      	mov	r1, r8
 800b178:	f7ff f93a 	bl	800a3f0 <_Bfree>
 800b17c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b17e:	9805      	ldr	r0, [sp, #20]
 800b180:	f7ff f936 	bl	800a3f0 <_Bfree>
 800b184:	9805      	ldr	r0, [sp, #20]
 800b186:	4621      	mov	r1, r4
 800b188:	f7ff f932 	bl	800a3f0 <_Bfree>
 800b18c:	e5f9      	b.n	800ad82 <_strtod_l+0x72>
 800b18e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b190:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b194:	4293      	cmp	r3, r2
 800b196:	dbbc      	blt.n	800b112 <_strtod_l+0x402>
 800b198:	4c41      	ldr	r4, [pc, #260]	@ (800b2a0 <_strtod_l+0x590>)
 800b19a:	f1c5 050f 	rsb	r5, r5, #15
 800b19e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b1a2:	4652      	mov	r2, sl
 800b1a4:	465b      	mov	r3, fp
 800b1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1aa:	f7f5 fa25 	bl	80005f8 <__aeabi_dmul>
 800b1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b0:	1b5d      	subs	r5, r3, r5
 800b1b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b1b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b1ba:	e78f      	b.n	800b0dc <_strtod_l+0x3cc>
 800b1bc:	3316      	adds	r3, #22
 800b1be:	dba8      	blt.n	800b112 <_strtod_l+0x402>
 800b1c0:	4b37      	ldr	r3, [pc, #220]	@ (800b2a0 <_strtod_l+0x590>)
 800b1c2:	eba9 0808 	sub.w	r8, r9, r8
 800b1c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b1ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	4659      	mov	r1, fp
 800b1d2:	f7f5 fb3b 	bl	800084c <__aeabi_ddiv>
 800b1d6:	e783      	b.n	800b0e0 <_strtod_l+0x3d0>
 800b1d8:	4b32      	ldr	r3, [pc, #200]	@ (800b2a4 <_strtod_l+0x594>)
 800b1da:	9308      	str	r3, [sp, #32]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	1124      	asrs	r4, r4, #4
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	4659      	mov	r1, fp
 800b1e4:	461e      	mov	r6, r3
 800b1e6:	2c01      	cmp	r4, #1
 800b1e8:	dc21      	bgt.n	800b22e <_strtod_l+0x51e>
 800b1ea:	b10b      	cbz	r3, 800b1f0 <_strtod_l+0x4e0>
 800b1ec:	4682      	mov	sl, r0
 800b1ee:	468b      	mov	fp, r1
 800b1f0:	492c      	ldr	r1, [pc, #176]	@ (800b2a4 <_strtod_l+0x594>)
 800b1f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b1f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b1fa:	4652      	mov	r2, sl
 800b1fc:	465b      	mov	r3, fp
 800b1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b202:	f7f5 f9f9 	bl	80005f8 <__aeabi_dmul>
 800b206:	4b28      	ldr	r3, [pc, #160]	@ (800b2a8 <_strtod_l+0x598>)
 800b208:	460a      	mov	r2, r1
 800b20a:	400b      	ands	r3, r1
 800b20c:	4927      	ldr	r1, [pc, #156]	@ (800b2ac <_strtod_l+0x59c>)
 800b20e:	428b      	cmp	r3, r1
 800b210:	4682      	mov	sl, r0
 800b212:	d898      	bhi.n	800b146 <_strtod_l+0x436>
 800b214:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b218:	428b      	cmp	r3, r1
 800b21a:	bf86      	itte	hi
 800b21c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b2b0 <_strtod_l+0x5a0>
 800b220:	f04f 3aff 	movhi.w	sl, #4294967295
 800b224:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b228:	2300      	movs	r3, #0
 800b22a:	9308      	str	r3, [sp, #32]
 800b22c:	e07a      	b.n	800b324 <_strtod_l+0x614>
 800b22e:	07e2      	lsls	r2, r4, #31
 800b230:	d505      	bpl.n	800b23e <_strtod_l+0x52e>
 800b232:	9b08      	ldr	r3, [sp, #32]
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	f7f5 f9de 	bl	80005f8 <__aeabi_dmul>
 800b23c:	2301      	movs	r3, #1
 800b23e:	9a08      	ldr	r2, [sp, #32]
 800b240:	3208      	adds	r2, #8
 800b242:	3601      	adds	r6, #1
 800b244:	1064      	asrs	r4, r4, #1
 800b246:	9208      	str	r2, [sp, #32]
 800b248:	e7cd      	b.n	800b1e6 <_strtod_l+0x4d6>
 800b24a:	d0ed      	beq.n	800b228 <_strtod_l+0x518>
 800b24c:	4264      	negs	r4, r4
 800b24e:	f014 020f 	ands.w	r2, r4, #15
 800b252:	d00a      	beq.n	800b26a <_strtod_l+0x55a>
 800b254:	4b12      	ldr	r3, [pc, #72]	@ (800b2a0 <_strtod_l+0x590>)
 800b256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b25a:	4650      	mov	r0, sl
 800b25c:	4659      	mov	r1, fp
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	f7f5 faf3 	bl	800084c <__aeabi_ddiv>
 800b266:	4682      	mov	sl, r0
 800b268:	468b      	mov	fp, r1
 800b26a:	1124      	asrs	r4, r4, #4
 800b26c:	d0dc      	beq.n	800b228 <_strtod_l+0x518>
 800b26e:	2c1f      	cmp	r4, #31
 800b270:	dd20      	ble.n	800b2b4 <_strtod_l+0x5a4>
 800b272:	2400      	movs	r4, #0
 800b274:	46a0      	mov	r8, r4
 800b276:	940a      	str	r4, [sp, #40]	@ 0x28
 800b278:	46a1      	mov	r9, r4
 800b27a:	9a05      	ldr	r2, [sp, #20]
 800b27c:	2322      	movs	r3, #34	@ 0x22
 800b27e:	f04f 0a00 	mov.w	sl, #0
 800b282:	f04f 0b00 	mov.w	fp, #0
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	e768      	b.n	800b15c <_strtod_l+0x44c>
 800b28a:	bf00      	nop
 800b28c:	0800d255 	.word	0x0800d255
 800b290:	0800d46c 	.word	0x0800d46c
 800b294:	0800d24d 	.word	0x0800d24d
 800b298:	0800d284 	.word	0x0800d284
 800b29c:	0800d615 	.word	0x0800d615
 800b2a0:	0800d3a0 	.word	0x0800d3a0
 800b2a4:	0800d378 	.word	0x0800d378
 800b2a8:	7ff00000 	.word	0x7ff00000
 800b2ac:	7ca00000 	.word	0x7ca00000
 800b2b0:	7fefffff 	.word	0x7fefffff
 800b2b4:	f014 0310 	ands.w	r3, r4, #16
 800b2b8:	bf18      	it	ne
 800b2ba:	236a      	movne	r3, #106	@ 0x6a
 800b2bc:	4ea9      	ldr	r6, [pc, #676]	@ (800b564 <_strtod_l+0x854>)
 800b2be:	9308      	str	r3, [sp, #32]
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	4659      	mov	r1, fp
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	07e2      	lsls	r2, r4, #31
 800b2c8:	d504      	bpl.n	800b2d4 <_strtod_l+0x5c4>
 800b2ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2ce:	f7f5 f993 	bl	80005f8 <__aeabi_dmul>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	1064      	asrs	r4, r4, #1
 800b2d6:	f106 0608 	add.w	r6, r6, #8
 800b2da:	d1f4      	bne.n	800b2c6 <_strtod_l+0x5b6>
 800b2dc:	b10b      	cbz	r3, 800b2e2 <_strtod_l+0x5d2>
 800b2de:	4682      	mov	sl, r0
 800b2e0:	468b      	mov	fp, r1
 800b2e2:	9b08      	ldr	r3, [sp, #32]
 800b2e4:	b1b3      	cbz	r3, 800b314 <_strtod_l+0x604>
 800b2e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b2ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	4659      	mov	r1, fp
 800b2f2:	dd0f      	ble.n	800b314 <_strtod_l+0x604>
 800b2f4:	2b1f      	cmp	r3, #31
 800b2f6:	dd55      	ble.n	800b3a4 <_strtod_l+0x694>
 800b2f8:	2b34      	cmp	r3, #52	@ 0x34
 800b2fa:	bfde      	ittt	le
 800b2fc:	f04f 33ff 	movle.w	r3, #4294967295
 800b300:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b304:	4093      	lslle	r3, r2
 800b306:	f04f 0a00 	mov.w	sl, #0
 800b30a:	bfcc      	ite	gt
 800b30c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b310:	ea03 0b01 	andle.w	fp, r3, r1
 800b314:	2200      	movs	r2, #0
 800b316:	2300      	movs	r3, #0
 800b318:	4650      	mov	r0, sl
 800b31a:	4659      	mov	r1, fp
 800b31c:	f7f5 fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b320:	2800      	cmp	r0, #0
 800b322:	d1a6      	bne.n	800b272 <_strtod_l+0x562>
 800b324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b32a:	9805      	ldr	r0, [sp, #20]
 800b32c:	462b      	mov	r3, r5
 800b32e:	463a      	mov	r2, r7
 800b330:	f7ff f8c6 	bl	800a4c0 <__s2b>
 800b334:	900a      	str	r0, [sp, #40]	@ 0x28
 800b336:	2800      	cmp	r0, #0
 800b338:	f43f af05 	beq.w	800b146 <_strtod_l+0x436>
 800b33c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b33e:	2a00      	cmp	r2, #0
 800b340:	eba9 0308 	sub.w	r3, r9, r8
 800b344:	bfa8      	it	ge
 800b346:	2300      	movge	r3, #0
 800b348:	9312      	str	r3, [sp, #72]	@ 0x48
 800b34a:	2400      	movs	r4, #0
 800b34c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b350:	9316      	str	r3, [sp, #88]	@ 0x58
 800b352:	46a0      	mov	r8, r4
 800b354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b356:	9805      	ldr	r0, [sp, #20]
 800b358:	6859      	ldr	r1, [r3, #4]
 800b35a:	f7ff f809 	bl	800a370 <_Balloc>
 800b35e:	4681      	mov	r9, r0
 800b360:	2800      	cmp	r0, #0
 800b362:	f43f aef4 	beq.w	800b14e <_strtod_l+0x43e>
 800b366:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b368:	691a      	ldr	r2, [r3, #16]
 800b36a:	3202      	adds	r2, #2
 800b36c:	f103 010c 	add.w	r1, r3, #12
 800b370:	0092      	lsls	r2, r2, #2
 800b372:	300c      	adds	r0, #12
 800b374:	f000 fd72 	bl	800be5c <memcpy>
 800b378:	ec4b ab10 	vmov	d0, sl, fp
 800b37c:	9805      	ldr	r0, [sp, #20]
 800b37e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b380:	a91b      	add	r1, sp, #108	@ 0x6c
 800b382:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b386:	f7ff fbd7 	bl	800ab38 <__d2b>
 800b38a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b38c:	2800      	cmp	r0, #0
 800b38e:	f43f aede 	beq.w	800b14e <_strtod_l+0x43e>
 800b392:	9805      	ldr	r0, [sp, #20]
 800b394:	2101      	movs	r1, #1
 800b396:	f7ff f929 	bl	800a5ec <__i2b>
 800b39a:	4680      	mov	r8, r0
 800b39c:	b948      	cbnz	r0, 800b3b2 <_strtod_l+0x6a2>
 800b39e:	f04f 0800 	mov.w	r8, #0
 800b3a2:	e6d4      	b.n	800b14e <_strtod_l+0x43e>
 800b3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ac:	ea03 0a0a 	and.w	sl, r3, sl
 800b3b0:	e7b0      	b.n	800b314 <_strtod_l+0x604>
 800b3b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b3b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b3b6:	2d00      	cmp	r5, #0
 800b3b8:	bfab      	itete	ge
 800b3ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b3bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b3be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b3c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b3c2:	bfac      	ite	ge
 800b3c4:	18ef      	addge	r7, r5, r3
 800b3c6:	1b5e      	sublt	r6, r3, r5
 800b3c8:	9b08      	ldr	r3, [sp, #32]
 800b3ca:	1aed      	subs	r5, r5, r3
 800b3cc:	4415      	add	r5, r2
 800b3ce:	4b66      	ldr	r3, [pc, #408]	@ (800b568 <_strtod_l+0x858>)
 800b3d0:	3d01      	subs	r5, #1
 800b3d2:	429d      	cmp	r5, r3
 800b3d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b3d8:	da50      	bge.n	800b47c <_strtod_l+0x76c>
 800b3da:	1b5b      	subs	r3, r3, r5
 800b3dc:	2b1f      	cmp	r3, #31
 800b3de:	eba2 0203 	sub.w	r2, r2, r3
 800b3e2:	f04f 0101 	mov.w	r1, #1
 800b3e6:	dc3d      	bgt.n	800b464 <_strtod_l+0x754>
 800b3e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3f2:	18bd      	adds	r5, r7, r2
 800b3f4:	9b08      	ldr	r3, [sp, #32]
 800b3f6:	42af      	cmp	r7, r5
 800b3f8:	4416      	add	r6, r2
 800b3fa:	441e      	add	r6, r3
 800b3fc:	463b      	mov	r3, r7
 800b3fe:	bfa8      	it	ge
 800b400:	462b      	movge	r3, r5
 800b402:	42b3      	cmp	r3, r6
 800b404:	bfa8      	it	ge
 800b406:	4633      	movge	r3, r6
 800b408:	2b00      	cmp	r3, #0
 800b40a:	bfc2      	ittt	gt
 800b40c:	1aed      	subgt	r5, r5, r3
 800b40e:	1af6      	subgt	r6, r6, r3
 800b410:	1aff      	subgt	r7, r7, r3
 800b412:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b414:	2b00      	cmp	r3, #0
 800b416:	dd16      	ble.n	800b446 <_strtod_l+0x736>
 800b418:	4641      	mov	r1, r8
 800b41a:	9805      	ldr	r0, [sp, #20]
 800b41c:	461a      	mov	r2, r3
 800b41e:	f7ff f9a5 	bl	800a76c <__pow5mult>
 800b422:	4680      	mov	r8, r0
 800b424:	2800      	cmp	r0, #0
 800b426:	d0ba      	beq.n	800b39e <_strtod_l+0x68e>
 800b428:	4601      	mov	r1, r0
 800b42a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b42c:	9805      	ldr	r0, [sp, #20]
 800b42e:	f7ff f8f3 	bl	800a618 <__multiply>
 800b432:	900e      	str	r0, [sp, #56]	@ 0x38
 800b434:	2800      	cmp	r0, #0
 800b436:	f43f ae8a 	beq.w	800b14e <_strtod_l+0x43e>
 800b43a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b43c:	9805      	ldr	r0, [sp, #20]
 800b43e:	f7fe ffd7 	bl	800a3f0 <_Bfree>
 800b442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b444:	931a      	str	r3, [sp, #104]	@ 0x68
 800b446:	2d00      	cmp	r5, #0
 800b448:	dc1d      	bgt.n	800b486 <_strtod_l+0x776>
 800b44a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	dd23      	ble.n	800b498 <_strtod_l+0x788>
 800b450:	4649      	mov	r1, r9
 800b452:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b454:	9805      	ldr	r0, [sp, #20]
 800b456:	f7ff f989 	bl	800a76c <__pow5mult>
 800b45a:	4681      	mov	r9, r0
 800b45c:	b9e0      	cbnz	r0, 800b498 <_strtod_l+0x788>
 800b45e:	f04f 0900 	mov.w	r9, #0
 800b462:	e674      	b.n	800b14e <_strtod_l+0x43e>
 800b464:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b468:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b46c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b470:	35e2      	adds	r5, #226	@ 0xe2
 800b472:	fa01 f305 	lsl.w	r3, r1, r5
 800b476:	9310      	str	r3, [sp, #64]	@ 0x40
 800b478:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b47a:	e7ba      	b.n	800b3f2 <_strtod_l+0x6e2>
 800b47c:	2300      	movs	r3, #0
 800b47e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b480:	2301      	movs	r3, #1
 800b482:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b484:	e7b5      	b.n	800b3f2 <_strtod_l+0x6e2>
 800b486:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b488:	9805      	ldr	r0, [sp, #20]
 800b48a:	462a      	mov	r2, r5
 800b48c:	f7ff f9c8 	bl	800a820 <__lshift>
 800b490:	901a      	str	r0, [sp, #104]	@ 0x68
 800b492:	2800      	cmp	r0, #0
 800b494:	d1d9      	bne.n	800b44a <_strtod_l+0x73a>
 800b496:	e65a      	b.n	800b14e <_strtod_l+0x43e>
 800b498:	2e00      	cmp	r6, #0
 800b49a:	dd07      	ble.n	800b4ac <_strtod_l+0x79c>
 800b49c:	4649      	mov	r1, r9
 800b49e:	9805      	ldr	r0, [sp, #20]
 800b4a0:	4632      	mov	r2, r6
 800b4a2:	f7ff f9bd 	bl	800a820 <__lshift>
 800b4a6:	4681      	mov	r9, r0
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d0d8      	beq.n	800b45e <_strtod_l+0x74e>
 800b4ac:	2f00      	cmp	r7, #0
 800b4ae:	dd08      	ble.n	800b4c2 <_strtod_l+0x7b2>
 800b4b0:	4641      	mov	r1, r8
 800b4b2:	9805      	ldr	r0, [sp, #20]
 800b4b4:	463a      	mov	r2, r7
 800b4b6:	f7ff f9b3 	bl	800a820 <__lshift>
 800b4ba:	4680      	mov	r8, r0
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	f43f ae46 	beq.w	800b14e <_strtod_l+0x43e>
 800b4c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4c4:	9805      	ldr	r0, [sp, #20]
 800b4c6:	464a      	mov	r2, r9
 800b4c8:	f7ff fa32 	bl	800a930 <__mdiff>
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	f43f ae3d 	beq.w	800b14e <_strtod_l+0x43e>
 800b4d4:	68c3      	ldr	r3, [r0, #12]
 800b4d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4d8:	2300      	movs	r3, #0
 800b4da:	60c3      	str	r3, [r0, #12]
 800b4dc:	4641      	mov	r1, r8
 800b4de:	f7ff fa0b 	bl	800a8f8 <__mcmp>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	da46      	bge.n	800b574 <_strtod_l+0x864>
 800b4e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4e8:	ea53 030a 	orrs.w	r3, r3, sl
 800b4ec:	d16c      	bne.n	800b5c8 <_strtod_l+0x8b8>
 800b4ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d168      	bne.n	800b5c8 <_strtod_l+0x8b8>
 800b4f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4fa:	0d1b      	lsrs	r3, r3, #20
 800b4fc:	051b      	lsls	r3, r3, #20
 800b4fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b502:	d961      	bls.n	800b5c8 <_strtod_l+0x8b8>
 800b504:	6963      	ldr	r3, [r4, #20]
 800b506:	b913      	cbnz	r3, 800b50e <_strtod_l+0x7fe>
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	dd5c      	ble.n	800b5c8 <_strtod_l+0x8b8>
 800b50e:	4621      	mov	r1, r4
 800b510:	2201      	movs	r2, #1
 800b512:	9805      	ldr	r0, [sp, #20]
 800b514:	f7ff f984 	bl	800a820 <__lshift>
 800b518:	4641      	mov	r1, r8
 800b51a:	4604      	mov	r4, r0
 800b51c:	f7ff f9ec 	bl	800a8f8 <__mcmp>
 800b520:	2800      	cmp	r0, #0
 800b522:	dd51      	ble.n	800b5c8 <_strtod_l+0x8b8>
 800b524:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b528:	9a08      	ldr	r2, [sp, #32]
 800b52a:	0d1b      	lsrs	r3, r3, #20
 800b52c:	051b      	lsls	r3, r3, #20
 800b52e:	2a00      	cmp	r2, #0
 800b530:	d06b      	beq.n	800b60a <_strtod_l+0x8fa>
 800b532:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b536:	d868      	bhi.n	800b60a <_strtod_l+0x8fa>
 800b538:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b53c:	f67f ae9d 	bls.w	800b27a <_strtod_l+0x56a>
 800b540:	4b0a      	ldr	r3, [pc, #40]	@ (800b56c <_strtod_l+0x85c>)
 800b542:	4650      	mov	r0, sl
 800b544:	4659      	mov	r1, fp
 800b546:	2200      	movs	r2, #0
 800b548:	f7f5 f856 	bl	80005f8 <__aeabi_dmul>
 800b54c:	4b08      	ldr	r3, [pc, #32]	@ (800b570 <_strtod_l+0x860>)
 800b54e:	400b      	ands	r3, r1
 800b550:	4682      	mov	sl, r0
 800b552:	468b      	mov	fp, r1
 800b554:	2b00      	cmp	r3, #0
 800b556:	f47f ae05 	bne.w	800b164 <_strtod_l+0x454>
 800b55a:	9a05      	ldr	r2, [sp, #20]
 800b55c:	2322      	movs	r3, #34	@ 0x22
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	e600      	b.n	800b164 <_strtod_l+0x454>
 800b562:	bf00      	nop
 800b564:	0800d498 	.word	0x0800d498
 800b568:	fffffc02 	.word	0xfffffc02
 800b56c:	39500000 	.word	0x39500000
 800b570:	7ff00000 	.word	0x7ff00000
 800b574:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b578:	d165      	bne.n	800b646 <_strtod_l+0x936>
 800b57a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b57c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b580:	b35a      	cbz	r2, 800b5da <_strtod_l+0x8ca>
 800b582:	4a9f      	ldr	r2, [pc, #636]	@ (800b800 <_strtod_l+0xaf0>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d12b      	bne.n	800b5e0 <_strtod_l+0x8d0>
 800b588:	9b08      	ldr	r3, [sp, #32]
 800b58a:	4651      	mov	r1, sl
 800b58c:	b303      	cbz	r3, 800b5d0 <_strtod_l+0x8c0>
 800b58e:	4b9d      	ldr	r3, [pc, #628]	@ (800b804 <_strtod_l+0xaf4>)
 800b590:	465a      	mov	r2, fp
 800b592:	4013      	ands	r3, r2
 800b594:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b598:	f04f 32ff 	mov.w	r2, #4294967295
 800b59c:	d81b      	bhi.n	800b5d6 <_strtod_l+0x8c6>
 800b59e:	0d1b      	lsrs	r3, r3, #20
 800b5a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a8:	4299      	cmp	r1, r3
 800b5aa:	d119      	bne.n	800b5e0 <_strtod_l+0x8d0>
 800b5ac:	4b96      	ldr	r3, [pc, #600]	@ (800b808 <_strtod_l+0xaf8>)
 800b5ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d102      	bne.n	800b5ba <_strtod_l+0x8aa>
 800b5b4:	3101      	adds	r1, #1
 800b5b6:	f43f adca 	beq.w	800b14e <_strtod_l+0x43e>
 800b5ba:	4b92      	ldr	r3, [pc, #584]	@ (800b804 <_strtod_l+0xaf4>)
 800b5bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5be:	401a      	ands	r2, r3
 800b5c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b5c4:	f04f 0a00 	mov.w	sl, #0
 800b5c8:	9b08      	ldr	r3, [sp, #32]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1b8      	bne.n	800b540 <_strtod_l+0x830>
 800b5ce:	e5c9      	b.n	800b164 <_strtod_l+0x454>
 800b5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d4:	e7e8      	b.n	800b5a8 <_strtod_l+0x898>
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	e7e6      	b.n	800b5a8 <_strtod_l+0x898>
 800b5da:	ea53 030a 	orrs.w	r3, r3, sl
 800b5de:	d0a1      	beq.n	800b524 <_strtod_l+0x814>
 800b5e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5e2:	b1db      	cbz	r3, 800b61c <_strtod_l+0x90c>
 800b5e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5e6:	4213      	tst	r3, r2
 800b5e8:	d0ee      	beq.n	800b5c8 <_strtod_l+0x8b8>
 800b5ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ec:	9a08      	ldr	r2, [sp, #32]
 800b5ee:	4650      	mov	r0, sl
 800b5f0:	4659      	mov	r1, fp
 800b5f2:	b1bb      	cbz	r3, 800b624 <_strtod_l+0x914>
 800b5f4:	f7ff fb6e 	bl	800acd4 <sulp>
 800b5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5fc:	ec53 2b10 	vmov	r2, r3, d0
 800b600:	f7f4 fe44 	bl	800028c <__adddf3>
 800b604:	4682      	mov	sl, r0
 800b606:	468b      	mov	fp, r1
 800b608:	e7de      	b.n	800b5c8 <_strtod_l+0x8b8>
 800b60a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b60e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b612:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b616:	f04f 3aff 	mov.w	sl, #4294967295
 800b61a:	e7d5      	b.n	800b5c8 <_strtod_l+0x8b8>
 800b61c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b61e:	ea13 0f0a 	tst.w	r3, sl
 800b622:	e7e1      	b.n	800b5e8 <_strtod_l+0x8d8>
 800b624:	f7ff fb56 	bl	800acd4 <sulp>
 800b628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b62c:	ec53 2b10 	vmov	r2, r3, d0
 800b630:	f7f4 fe2a 	bl	8000288 <__aeabi_dsub>
 800b634:	2200      	movs	r2, #0
 800b636:	2300      	movs	r3, #0
 800b638:	4682      	mov	sl, r0
 800b63a:	468b      	mov	fp, r1
 800b63c:	f7f5 fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 800b640:	2800      	cmp	r0, #0
 800b642:	d0c1      	beq.n	800b5c8 <_strtod_l+0x8b8>
 800b644:	e619      	b.n	800b27a <_strtod_l+0x56a>
 800b646:	4641      	mov	r1, r8
 800b648:	4620      	mov	r0, r4
 800b64a:	f7ff facd 	bl	800abe8 <__ratio>
 800b64e:	ec57 6b10 	vmov	r6, r7, d0
 800b652:	2200      	movs	r2, #0
 800b654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b658:	4630      	mov	r0, r6
 800b65a:	4639      	mov	r1, r7
 800b65c:	f7f5 fa48 	bl	8000af0 <__aeabi_dcmple>
 800b660:	2800      	cmp	r0, #0
 800b662:	d06f      	beq.n	800b744 <_strtod_l+0xa34>
 800b664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b666:	2b00      	cmp	r3, #0
 800b668:	d17a      	bne.n	800b760 <_strtod_l+0xa50>
 800b66a:	f1ba 0f00 	cmp.w	sl, #0
 800b66e:	d158      	bne.n	800b722 <_strtod_l+0xa12>
 800b670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b676:	2b00      	cmp	r3, #0
 800b678:	d15a      	bne.n	800b730 <_strtod_l+0xa20>
 800b67a:	4b64      	ldr	r3, [pc, #400]	@ (800b80c <_strtod_l+0xafc>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	4630      	mov	r0, r6
 800b680:	4639      	mov	r1, r7
 800b682:	f7f5 fa2b 	bl	8000adc <__aeabi_dcmplt>
 800b686:	2800      	cmp	r0, #0
 800b688:	d159      	bne.n	800b73e <_strtod_l+0xa2e>
 800b68a:	4630      	mov	r0, r6
 800b68c:	4639      	mov	r1, r7
 800b68e:	4b60      	ldr	r3, [pc, #384]	@ (800b810 <_strtod_l+0xb00>)
 800b690:	2200      	movs	r2, #0
 800b692:	f7f4 ffb1 	bl	80005f8 <__aeabi_dmul>
 800b696:	4606      	mov	r6, r0
 800b698:	460f      	mov	r7, r1
 800b69a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b69e:	9606      	str	r6, [sp, #24]
 800b6a0:	9307      	str	r3, [sp, #28]
 800b6a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6a6:	4d57      	ldr	r5, [pc, #348]	@ (800b804 <_strtod_l+0xaf4>)
 800b6a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6ae:	401d      	ands	r5, r3
 800b6b0:	4b58      	ldr	r3, [pc, #352]	@ (800b814 <_strtod_l+0xb04>)
 800b6b2:	429d      	cmp	r5, r3
 800b6b4:	f040 80b2 	bne.w	800b81c <_strtod_l+0xb0c>
 800b6b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b6be:	ec4b ab10 	vmov	d0, sl, fp
 800b6c2:	f7ff f9c9 	bl	800aa58 <__ulp>
 800b6c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6ca:	ec51 0b10 	vmov	r0, r1, d0
 800b6ce:	f7f4 ff93 	bl	80005f8 <__aeabi_dmul>
 800b6d2:	4652      	mov	r2, sl
 800b6d4:	465b      	mov	r3, fp
 800b6d6:	f7f4 fdd9 	bl	800028c <__adddf3>
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4949      	ldr	r1, [pc, #292]	@ (800b804 <_strtod_l+0xaf4>)
 800b6de:	4a4e      	ldr	r2, [pc, #312]	@ (800b818 <_strtod_l+0xb08>)
 800b6e0:	4019      	ands	r1, r3
 800b6e2:	4291      	cmp	r1, r2
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	d942      	bls.n	800b76e <_strtod_l+0xa5e>
 800b6e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6ea:	4b47      	ldr	r3, [pc, #284]	@ (800b808 <_strtod_l+0xaf8>)
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d103      	bne.n	800b6f8 <_strtod_l+0x9e8>
 800b6f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	f43f ad2b 	beq.w	800b14e <_strtod_l+0x43e>
 800b6f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b808 <_strtod_l+0xaf8>
 800b6fc:	f04f 3aff 	mov.w	sl, #4294967295
 800b700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b702:	9805      	ldr	r0, [sp, #20]
 800b704:	f7fe fe74 	bl	800a3f0 <_Bfree>
 800b708:	9805      	ldr	r0, [sp, #20]
 800b70a:	4649      	mov	r1, r9
 800b70c:	f7fe fe70 	bl	800a3f0 <_Bfree>
 800b710:	9805      	ldr	r0, [sp, #20]
 800b712:	4641      	mov	r1, r8
 800b714:	f7fe fe6c 	bl	800a3f0 <_Bfree>
 800b718:	9805      	ldr	r0, [sp, #20]
 800b71a:	4621      	mov	r1, r4
 800b71c:	f7fe fe68 	bl	800a3f0 <_Bfree>
 800b720:	e618      	b.n	800b354 <_strtod_l+0x644>
 800b722:	f1ba 0f01 	cmp.w	sl, #1
 800b726:	d103      	bne.n	800b730 <_strtod_l+0xa20>
 800b728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f43f ada5 	beq.w	800b27a <_strtod_l+0x56a>
 800b730:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b7e0 <_strtod_l+0xad0>
 800b734:	4f35      	ldr	r7, [pc, #212]	@ (800b80c <_strtod_l+0xafc>)
 800b736:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b73a:	2600      	movs	r6, #0
 800b73c:	e7b1      	b.n	800b6a2 <_strtod_l+0x992>
 800b73e:	4f34      	ldr	r7, [pc, #208]	@ (800b810 <_strtod_l+0xb00>)
 800b740:	2600      	movs	r6, #0
 800b742:	e7aa      	b.n	800b69a <_strtod_l+0x98a>
 800b744:	4b32      	ldr	r3, [pc, #200]	@ (800b810 <_strtod_l+0xb00>)
 800b746:	4630      	mov	r0, r6
 800b748:	4639      	mov	r1, r7
 800b74a:	2200      	movs	r2, #0
 800b74c:	f7f4 ff54 	bl	80005f8 <__aeabi_dmul>
 800b750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b752:	4606      	mov	r6, r0
 800b754:	460f      	mov	r7, r1
 800b756:	2b00      	cmp	r3, #0
 800b758:	d09f      	beq.n	800b69a <_strtod_l+0x98a>
 800b75a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b75e:	e7a0      	b.n	800b6a2 <_strtod_l+0x992>
 800b760:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b7e8 <_strtod_l+0xad8>
 800b764:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b768:	ec57 6b17 	vmov	r6, r7, d7
 800b76c:	e799      	b.n	800b6a2 <_strtod_l+0x992>
 800b76e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b772:	9b08      	ldr	r3, [sp, #32]
 800b774:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1c1      	bne.n	800b700 <_strtod_l+0x9f0>
 800b77c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b780:	0d1b      	lsrs	r3, r3, #20
 800b782:	051b      	lsls	r3, r3, #20
 800b784:	429d      	cmp	r5, r3
 800b786:	d1bb      	bne.n	800b700 <_strtod_l+0x9f0>
 800b788:	4630      	mov	r0, r6
 800b78a:	4639      	mov	r1, r7
 800b78c:	f7f5 fa94 	bl	8000cb8 <__aeabi_d2lz>
 800b790:	f7f4 ff04 	bl	800059c <__aeabi_l2d>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	4630      	mov	r0, r6
 800b79a:	4639      	mov	r1, r7
 800b79c:	f7f4 fd74 	bl	8000288 <__aeabi_dsub>
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b7a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ae:	ea46 060a 	orr.w	r6, r6, sl
 800b7b2:	431e      	orrs	r6, r3
 800b7b4:	d06f      	beq.n	800b896 <_strtod_l+0xb86>
 800b7b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b7f0 <_strtod_l+0xae0>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	f7f5 f98e 	bl	8000adc <__aeabi_dcmplt>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	f47f accf 	bne.w	800b164 <_strtod_l+0x454>
 800b7c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b7f8 <_strtod_l+0xae8>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7d0:	f7f5 f9a2 	bl	8000b18 <__aeabi_dcmpgt>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d093      	beq.n	800b700 <_strtod_l+0x9f0>
 800b7d8:	e4c4      	b.n	800b164 <_strtod_l+0x454>
 800b7da:	bf00      	nop
 800b7dc:	f3af 8000 	nop.w
 800b7e0:	00000000 	.word	0x00000000
 800b7e4:	bff00000 	.word	0xbff00000
 800b7e8:	00000000 	.word	0x00000000
 800b7ec:	3ff00000 	.word	0x3ff00000
 800b7f0:	94a03595 	.word	0x94a03595
 800b7f4:	3fdfffff 	.word	0x3fdfffff
 800b7f8:	35afe535 	.word	0x35afe535
 800b7fc:	3fe00000 	.word	0x3fe00000
 800b800:	000fffff 	.word	0x000fffff
 800b804:	7ff00000 	.word	0x7ff00000
 800b808:	7fefffff 	.word	0x7fefffff
 800b80c:	3ff00000 	.word	0x3ff00000
 800b810:	3fe00000 	.word	0x3fe00000
 800b814:	7fe00000 	.word	0x7fe00000
 800b818:	7c9fffff 	.word	0x7c9fffff
 800b81c:	9b08      	ldr	r3, [sp, #32]
 800b81e:	b323      	cbz	r3, 800b86a <_strtod_l+0xb5a>
 800b820:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b824:	d821      	bhi.n	800b86a <_strtod_l+0xb5a>
 800b826:	a328      	add	r3, pc, #160	@ (adr r3, 800b8c8 <_strtod_l+0xbb8>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f5 f95e 	bl	8000af0 <__aeabi_dcmple>
 800b834:	b1a0      	cbz	r0, 800b860 <_strtod_l+0xb50>
 800b836:	4639      	mov	r1, r7
 800b838:	4630      	mov	r0, r6
 800b83a:	f7f5 f9b5 	bl	8000ba8 <__aeabi_d2uiz>
 800b83e:	2801      	cmp	r0, #1
 800b840:	bf38      	it	cc
 800b842:	2001      	movcc	r0, #1
 800b844:	f7f4 fe5e 	bl	8000504 <__aeabi_ui2d>
 800b848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b84a:	4606      	mov	r6, r0
 800b84c:	460f      	mov	r7, r1
 800b84e:	b9fb      	cbnz	r3, 800b890 <_strtod_l+0xb80>
 800b850:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b854:	9014      	str	r0, [sp, #80]	@ 0x50
 800b856:	9315      	str	r3, [sp, #84]	@ 0x54
 800b858:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b85c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b862:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b866:	1b5b      	subs	r3, r3, r5
 800b868:	9311      	str	r3, [sp, #68]	@ 0x44
 800b86a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b86e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b872:	f7ff f8f1 	bl	800aa58 <__ulp>
 800b876:	4650      	mov	r0, sl
 800b878:	ec53 2b10 	vmov	r2, r3, d0
 800b87c:	4659      	mov	r1, fp
 800b87e:	f7f4 febb 	bl	80005f8 <__aeabi_dmul>
 800b882:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b886:	f7f4 fd01 	bl	800028c <__adddf3>
 800b88a:	4682      	mov	sl, r0
 800b88c:	468b      	mov	fp, r1
 800b88e:	e770      	b.n	800b772 <_strtod_l+0xa62>
 800b890:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b894:	e7e0      	b.n	800b858 <_strtod_l+0xb48>
 800b896:	a30e      	add	r3, pc, #56	@ (adr r3, 800b8d0 <_strtod_l+0xbc0>)
 800b898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89c:	f7f5 f91e 	bl	8000adc <__aeabi_dcmplt>
 800b8a0:	e798      	b.n	800b7d4 <_strtod_l+0xac4>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	f7ff ba6d 	b.w	800ad8a <_strtod_l+0x7a>
 800b8b0:	2a65      	cmp	r2, #101	@ 0x65
 800b8b2:	f43f ab66 	beq.w	800af82 <_strtod_l+0x272>
 800b8b6:	2a45      	cmp	r2, #69	@ 0x45
 800b8b8:	f43f ab63 	beq.w	800af82 <_strtod_l+0x272>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	f7ff bb9e 	b.w	800affe <_strtod_l+0x2ee>
 800b8c2:	bf00      	nop
 800b8c4:	f3af 8000 	nop.w
 800b8c8:	ffc00000 	.word	0xffc00000
 800b8cc:	41dfffff 	.word	0x41dfffff
 800b8d0:	94a03595 	.word	0x94a03595
 800b8d4:	3fcfffff 	.word	0x3fcfffff

0800b8d8 <_strtod_r>:
 800b8d8:	4b01      	ldr	r3, [pc, #4]	@ (800b8e0 <_strtod_r+0x8>)
 800b8da:	f7ff ba19 	b.w	800ad10 <_strtod_l>
 800b8de:	bf00      	nop
 800b8e0:	20000068 	.word	0x20000068

0800b8e4 <_strtol_l.constprop.0>:
 800b8e4:	2b24      	cmp	r3, #36	@ 0x24
 800b8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ea:	4686      	mov	lr, r0
 800b8ec:	4690      	mov	r8, r2
 800b8ee:	d801      	bhi.n	800b8f4 <_strtol_l.constprop.0+0x10>
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d106      	bne.n	800b902 <_strtol_l.constprop.0+0x1e>
 800b8f4:	f7fd fdbc 	bl	8009470 <__errno>
 800b8f8:	2316      	movs	r3, #22
 800b8fa:	6003      	str	r3, [r0, #0]
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b902:	4834      	ldr	r0, [pc, #208]	@ (800b9d4 <_strtol_l.constprop.0+0xf0>)
 800b904:	460d      	mov	r5, r1
 800b906:	462a      	mov	r2, r5
 800b908:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b90c:	5d06      	ldrb	r6, [r0, r4]
 800b90e:	f016 0608 	ands.w	r6, r6, #8
 800b912:	d1f8      	bne.n	800b906 <_strtol_l.constprop.0+0x22>
 800b914:	2c2d      	cmp	r4, #45	@ 0x2d
 800b916:	d12d      	bne.n	800b974 <_strtol_l.constprop.0+0x90>
 800b918:	782c      	ldrb	r4, [r5, #0]
 800b91a:	2601      	movs	r6, #1
 800b91c:	1c95      	adds	r5, r2, #2
 800b91e:	f033 0210 	bics.w	r2, r3, #16
 800b922:	d109      	bne.n	800b938 <_strtol_l.constprop.0+0x54>
 800b924:	2c30      	cmp	r4, #48	@ 0x30
 800b926:	d12a      	bne.n	800b97e <_strtol_l.constprop.0+0x9a>
 800b928:	782a      	ldrb	r2, [r5, #0]
 800b92a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b92e:	2a58      	cmp	r2, #88	@ 0x58
 800b930:	d125      	bne.n	800b97e <_strtol_l.constprop.0+0x9a>
 800b932:	786c      	ldrb	r4, [r5, #1]
 800b934:	2310      	movs	r3, #16
 800b936:	3502      	adds	r5, #2
 800b938:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b93c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b940:	2200      	movs	r2, #0
 800b942:	fbbc f9f3 	udiv	r9, ip, r3
 800b946:	4610      	mov	r0, r2
 800b948:	fb03 ca19 	mls	sl, r3, r9, ip
 800b94c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b950:	2f09      	cmp	r7, #9
 800b952:	d81b      	bhi.n	800b98c <_strtol_l.constprop.0+0xa8>
 800b954:	463c      	mov	r4, r7
 800b956:	42a3      	cmp	r3, r4
 800b958:	dd27      	ble.n	800b9aa <_strtol_l.constprop.0+0xc6>
 800b95a:	1c57      	adds	r7, r2, #1
 800b95c:	d007      	beq.n	800b96e <_strtol_l.constprop.0+0x8a>
 800b95e:	4581      	cmp	r9, r0
 800b960:	d320      	bcc.n	800b9a4 <_strtol_l.constprop.0+0xc0>
 800b962:	d101      	bne.n	800b968 <_strtol_l.constprop.0+0x84>
 800b964:	45a2      	cmp	sl, r4
 800b966:	db1d      	blt.n	800b9a4 <_strtol_l.constprop.0+0xc0>
 800b968:	fb00 4003 	mla	r0, r0, r3, r4
 800b96c:	2201      	movs	r2, #1
 800b96e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b972:	e7eb      	b.n	800b94c <_strtol_l.constprop.0+0x68>
 800b974:	2c2b      	cmp	r4, #43	@ 0x2b
 800b976:	bf04      	itt	eq
 800b978:	782c      	ldrbeq	r4, [r5, #0]
 800b97a:	1c95      	addeq	r5, r2, #2
 800b97c:	e7cf      	b.n	800b91e <_strtol_l.constprop.0+0x3a>
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1da      	bne.n	800b938 <_strtol_l.constprop.0+0x54>
 800b982:	2c30      	cmp	r4, #48	@ 0x30
 800b984:	bf0c      	ite	eq
 800b986:	2308      	moveq	r3, #8
 800b988:	230a      	movne	r3, #10
 800b98a:	e7d5      	b.n	800b938 <_strtol_l.constprop.0+0x54>
 800b98c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b990:	2f19      	cmp	r7, #25
 800b992:	d801      	bhi.n	800b998 <_strtol_l.constprop.0+0xb4>
 800b994:	3c37      	subs	r4, #55	@ 0x37
 800b996:	e7de      	b.n	800b956 <_strtol_l.constprop.0+0x72>
 800b998:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b99c:	2f19      	cmp	r7, #25
 800b99e:	d804      	bhi.n	800b9aa <_strtol_l.constprop.0+0xc6>
 800b9a0:	3c57      	subs	r4, #87	@ 0x57
 800b9a2:	e7d8      	b.n	800b956 <_strtol_l.constprop.0+0x72>
 800b9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a8:	e7e1      	b.n	800b96e <_strtol_l.constprop.0+0x8a>
 800b9aa:	1c53      	adds	r3, r2, #1
 800b9ac:	d108      	bne.n	800b9c0 <_strtol_l.constprop.0+0xdc>
 800b9ae:	2322      	movs	r3, #34	@ 0x22
 800b9b0:	f8ce 3000 	str.w	r3, [lr]
 800b9b4:	4660      	mov	r0, ip
 800b9b6:	f1b8 0f00 	cmp.w	r8, #0
 800b9ba:	d0a0      	beq.n	800b8fe <_strtol_l.constprop.0+0x1a>
 800b9bc:	1e69      	subs	r1, r5, #1
 800b9be:	e006      	b.n	800b9ce <_strtol_l.constprop.0+0xea>
 800b9c0:	b106      	cbz	r6, 800b9c4 <_strtol_l.constprop.0+0xe0>
 800b9c2:	4240      	negs	r0, r0
 800b9c4:	f1b8 0f00 	cmp.w	r8, #0
 800b9c8:	d099      	beq.n	800b8fe <_strtol_l.constprop.0+0x1a>
 800b9ca:	2a00      	cmp	r2, #0
 800b9cc:	d1f6      	bne.n	800b9bc <_strtol_l.constprop.0+0xd8>
 800b9ce:	f8c8 1000 	str.w	r1, [r8]
 800b9d2:	e794      	b.n	800b8fe <_strtol_l.constprop.0+0x1a>
 800b9d4:	0800d4c1 	.word	0x0800d4c1

0800b9d8 <_strtol_r>:
 800b9d8:	f7ff bf84 	b.w	800b8e4 <_strtol_l.constprop.0>

0800b9dc <__ssputs_r>:
 800b9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e0:	688e      	ldr	r6, [r1, #8]
 800b9e2:	461f      	mov	r7, r3
 800b9e4:	42be      	cmp	r6, r7
 800b9e6:	680b      	ldr	r3, [r1, #0]
 800b9e8:	4682      	mov	sl, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	4690      	mov	r8, r2
 800b9ee:	d82d      	bhi.n	800ba4c <__ssputs_r+0x70>
 800b9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b9f8:	d026      	beq.n	800ba48 <__ssputs_r+0x6c>
 800b9fa:	6965      	ldr	r5, [r4, #20]
 800b9fc:	6909      	ldr	r1, [r1, #16]
 800b9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba02:	eba3 0901 	sub.w	r9, r3, r1
 800ba06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba0a:	1c7b      	adds	r3, r7, #1
 800ba0c:	444b      	add	r3, r9
 800ba0e:	106d      	asrs	r5, r5, #1
 800ba10:	429d      	cmp	r5, r3
 800ba12:	bf38      	it	cc
 800ba14:	461d      	movcc	r5, r3
 800ba16:	0553      	lsls	r3, r2, #21
 800ba18:	d527      	bpl.n	800ba6a <__ssputs_r+0x8e>
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	f7fe fc1c 	bl	800a258 <_malloc_r>
 800ba20:	4606      	mov	r6, r0
 800ba22:	b360      	cbz	r0, 800ba7e <__ssputs_r+0xa2>
 800ba24:	6921      	ldr	r1, [r4, #16]
 800ba26:	464a      	mov	r2, r9
 800ba28:	f000 fa18 	bl	800be5c <memcpy>
 800ba2c:	89a3      	ldrh	r3, [r4, #12]
 800ba2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba36:	81a3      	strh	r3, [r4, #12]
 800ba38:	6126      	str	r6, [r4, #16]
 800ba3a:	6165      	str	r5, [r4, #20]
 800ba3c:	444e      	add	r6, r9
 800ba3e:	eba5 0509 	sub.w	r5, r5, r9
 800ba42:	6026      	str	r6, [r4, #0]
 800ba44:	60a5      	str	r5, [r4, #8]
 800ba46:	463e      	mov	r6, r7
 800ba48:	42be      	cmp	r6, r7
 800ba4a:	d900      	bls.n	800ba4e <__ssputs_r+0x72>
 800ba4c:	463e      	mov	r6, r7
 800ba4e:	6820      	ldr	r0, [r4, #0]
 800ba50:	4632      	mov	r2, r6
 800ba52:	4641      	mov	r1, r8
 800ba54:	f000 f9c6 	bl	800bde4 <memmove>
 800ba58:	68a3      	ldr	r3, [r4, #8]
 800ba5a:	1b9b      	subs	r3, r3, r6
 800ba5c:	60a3      	str	r3, [r4, #8]
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	4433      	add	r3, r6
 800ba62:	6023      	str	r3, [r4, #0]
 800ba64:	2000      	movs	r0, #0
 800ba66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba6a:	462a      	mov	r2, r5
 800ba6c:	f000 fd89 	bl	800c582 <_realloc_r>
 800ba70:	4606      	mov	r6, r0
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d1e0      	bne.n	800ba38 <__ssputs_r+0x5c>
 800ba76:	6921      	ldr	r1, [r4, #16]
 800ba78:	4650      	mov	r0, sl
 800ba7a:	f7fe fb79 	bl	800a170 <_free_r>
 800ba7e:	230c      	movs	r3, #12
 800ba80:	f8ca 3000 	str.w	r3, [sl]
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba8a:	81a3      	strh	r3, [r4, #12]
 800ba8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba90:	e7e9      	b.n	800ba66 <__ssputs_r+0x8a>
	...

0800ba94 <_svfiprintf_r>:
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	4698      	mov	r8, r3
 800ba9a:	898b      	ldrh	r3, [r1, #12]
 800ba9c:	061b      	lsls	r3, r3, #24
 800ba9e:	b09d      	sub	sp, #116	@ 0x74
 800baa0:	4607      	mov	r7, r0
 800baa2:	460d      	mov	r5, r1
 800baa4:	4614      	mov	r4, r2
 800baa6:	d510      	bpl.n	800baca <_svfiprintf_r+0x36>
 800baa8:	690b      	ldr	r3, [r1, #16]
 800baaa:	b973      	cbnz	r3, 800baca <_svfiprintf_r+0x36>
 800baac:	2140      	movs	r1, #64	@ 0x40
 800baae:	f7fe fbd3 	bl	800a258 <_malloc_r>
 800bab2:	6028      	str	r0, [r5, #0]
 800bab4:	6128      	str	r0, [r5, #16]
 800bab6:	b930      	cbnz	r0, 800bac6 <_svfiprintf_r+0x32>
 800bab8:	230c      	movs	r3, #12
 800baba:	603b      	str	r3, [r7, #0]
 800babc:	f04f 30ff 	mov.w	r0, #4294967295
 800bac0:	b01d      	add	sp, #116	@ 0x74
 800bac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac6:	2340      	movs	r3, #64	@ 0x40
 800bac8:	616b      	str	r3, [r5, #20]
 800baca:	2300      	movs	r3, #0
 800bacc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bace:	2320      	movs	r3, #32
 800bad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bad8:	2330      	movs	r3, #48	@ 0x30
 800bada:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc78 <_svfiprintf_r+0x1e4>
 800bade:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bae2:	f04f 0901 	mov.w	r9, #1
 800bae6:	4623      	mov	r3, r4
 800bae8:	469a      	mov	sl, r3
 800baea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baee:	b10a      	cbz	r2, 800baf4 <_svfiprintf_r+0x60>
 800baf0:	2a25      	cmp	r2, #37	@ 0x25
 800baf2:	d1f9      	bne.n	800bae8 <_svfiprintf_r+0x54>
 800baf4:	ebba 0b04 	subs.w	fp, sl, r4
 800baf8:	d00b      	beq.n	800bb12 <_svfiprintf_r+0x7e>
 800bafa:	465b      	mov	r3, fp
 800bafc:	4622      	mov	r2, r4
 800bafe:	4629      	mov	r1, r5
 800bb00:	4638      	mov	r0, r7
 800bb02:	f7ff ff6b 	bl	800b9dc <__ssputs_r>
 800bb06:	3001      	adds	r0, #1
 800bb08:	f000 80a7 	beq.w	800bc5a <_svfiprintf_r+0x1c6>
 800bb0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb0e:	445a      	add	r2, fp
 800bb10:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb12:	f89a 3000 	ldrb.w	r3, [sl]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f000 809f 	beq.w	800bc5a <_svfiprintf_r+0x1c6>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb26:	f10a 0a01 	add.w	sl, sl, #1
 800bb2a:	9304      	str	r3, [sp, #16]
 800bb2c:	9307      	str	r3, [sp, #28]
 800bb2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb32:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb34:	4654      	mov	r4, sl
 800bb36:	2205      	movs	r2, #5
 800bb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb3c:	484e      	ldr	r0, [pc, #312]	@ (800bc78 <_svfiprintf_r+0x1e4>)
 800bb3e:	f7f4 fb47 	bl	80001d0 <memchr>
 800bb42:	9a04      	ldr	r2, [sp, #16]
 800bb44:	b9d8      	cbnz	r0, 800bb7e <_svfiprintf_r+0xea>
 800bb46:	06d0      	lsls	r0, r2, #27
 800bb48:	bf44      	itt	mi
 800bb4a:	2320      	movmi	r3, #32
 800bb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb50:	0711      	lsls	r1, r2, #28
 800bb52:	bf44      	itt	mi
 800bb54:	232b      	movmi	r3, #43	@ 0x2b
 800bb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb60:	d015      	beq.n	800bb8e <_svfiprintf_r+0xfa>
 800bb62:	9a07      	ldr	r2, [sp, #28]
 800bb64:	4654      	mov	r4, sl
 800bb66:	2000      	movs	r0, #0
 800bb68:	f04f 0c0a 	mov.w	ip, #10
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb72:	3b30      	subs	r3, #48	@ 0x30
 800bb74:	2b09      	cmp	r3, #9
 800bb76:	d94b      	bls.n	800bc10 <_svfiprintf_r+0x17c>
 800bb78:	b1b0      	cbz	r0, 800bba8 <_svfiprintf_r+0x114>
 800bb7a:	9207      	str	r2, [sp, #28]
 800bb7c:	e014      	b.n	800bba8 <_svfiprintf_r+0x114>
 800bb7e:	eba0 0308 	sub.w	r3, r0, r8
 800bb82:	fa09 f303 	lsl.w	r3, r9, r3
 800bb86:	4313      	orrs	r3, r2
 800bb88:	9304      	str	r3, [sp, #16]
 800bb8a:	46a2      	mov	sl, r4
 800bb8c:	e7d2      	b.n	800bb34 <_svfiprintf_r+0xa0>
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	1d19      	adds	r1, r3, #4
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	9103      	str	r1, [sp, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	bfbb      	ittet	lt
 800bb9a:	425b      	neglt	r3, r3
 800bb9c:	f042 0202 	orrlt.w	r2, r2, #2
 800bba0:	9307      	strge	r3, [sp, #28]
 800bba2:	9307      	strlt	r3, [sp, #28]
 800bba4:	bfb8      	it	lt
 800bba6:	9204      	strlt	r2, [sp, #16]
 800bba8:	7823      	ldrb	r3, [r4, #0]
 800bbaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbac:	d10a      	bne.n	800bbc4 <_svfiprintf_r+0x130>
 800bbae:	7863      	ldrb	r3, [r4, #1]
 800bbb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbb2:	d132      	bne.n	800bc1a <_svfiprintf_r+0x186>
 800bbb4:	9b03      	ldr	r3, [sp, #12]
 800bbb6:	1d1a      	adds	r2, r3, #4
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	9203      	str	r2, [sp, #12]
 800bbbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbc0:	3402      	adds	r4, #2
 800bbc2:	9305      	str	r3, [sp, #20]
 800bbc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc88 <_svfiprintf_r+0x1f4>
 800bbc8:	7821      	ldrb	r1, [r4, #0]
 800bbca:	2203      	movs	r2, #3
 800bbcc:	4650      	mov	r0, sl
 800bbce:	f7f4 faff 	bl	80001d0 <memchr>
 800bbd2:	b138      	cbz	r0, 800bbe4 <_svfiprintf_r+0x150>
 800bbd4:	9b04      	ldr	r3, [sp, #16]
 800bbd6:	eba0 000a 	sub.w	r0, r0, sl
 800bbda:	2240      	movs	r2, #64	@ 0x40
 800bbdc:	4082      	lsls	r2, r0
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	3401      	adds	r4, #1
 800bbe2:	9304      	str	r3, [sp, #16]
 800bbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe8:	4824      	ldr	r0, [pc, #144]	@ (800bc7c <_svfiprintf_r+0x1e8>)
 800bbea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbee:	2206      	movs	r2, #6
 800bbf0:	f7f4 faee 	bl	80001d0 <memchr>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d036      	beq.n	800bc66 <_svfiprintf_r+0x1d2>
 800bbf8:	4b21      	ldr	r3, [pc, #132]	@ (800bc80 <_svfiprintf_r+0x1ec>)
 800bbfa:	bb1b      	cbnz	r3, 800bc44 <_svfiprintf_r+0x1b0>
 800bbfc:	9b03      	ldr	r3, [sp, #12]
 800bbfe:	3307      	adds	r3, #7
 800bc00:	f023 0307 	bic.w	r3, r3, #7
 800bc04:	3308      	adds	r3, #8
 800bc06:	9303      	str	r3, [sp, #12]
 800bc08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc0a:	4433      	add	r3, r6
 800bc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc0e:	e76a      	b.n	800bae6 <_svfiprintf_r+0x52>
 800bc10:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc14:	460c      	mov	r4, r1
 800bc16:	2001      	movs	r0, #1
 800bc18:	e7a8      	b.n	800bb6c <_svfiprintf_r+0xd8>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	3401      	adds	r4, #1
 800bc1e:	9305      	str	r3, [sp, #20]
 800bc20:	4619      	mov	r1, r3
 800bc22:	f04f 0c0a 	mov.w	ip, #10
 800bc26:	4620      	mov	r0, r4
 800bc28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc2c:	3a30      	subs	r2, #48	@ 0x30
 800bc2e:	2a09      	cmp	r2, #9
 800bc30:	d903      	bls.n	800bc3a <_svfiprintf_r+0x1a6>
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d0c6      	beq.n	800bbc4 <_svfiprintf_r+0x130>
 800bc36:	9105      	str	r1, [sp, #20]
 800bc38:	e7c4      	b.n	800bbc4 <_svfiprintf_r+0x130>
 800bc3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc3e:	4604      	mov	r4, r0
 800bc40:	2301      	movs	r3, #1
 800bc42:	e7f0      	b.n	800bc26 <_svfiprintf_r+0x192>
 800bc44:	ab03      	add	r3, sp, #12
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	462a      	mov	r2, r5
 800bc4a:	4b0e      	ldr	r3, [pc, #56]	@ (800bc84 <_svfiprintf_r+0x1f0>)
 800bc4c:	a904      	add	r1, sp, #16
 800bc4e:	4638      	mov	r0, r7
 800bc50:	f7fc fc96 	bl	8008580 <_printf_float>
 800bc54:	1c42      	adds	r2, r0, #1
 800bc56:	4606      	mov	r6, r0
 800bc58:	d1d6      	bne.n	800bc08 <_svfiprintf_r+0x174>
 800bc5a:	89ab      	ldrh	r3, [r5, #12]
 800bc5c:	065b      	lsls	r3, r3, #25
 800bc5e:	f53f af2d 	bmi.w	800babc <_svfiprintf_r+0x28>
 800bc62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc64:	e72c      	b.n	800bac0 <_svfiprintf_r+0x2c>
 800bc66:	ab03      	add	r3, sp, #12
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	462a      	mov	r2, r5
 800bc6c:	4b05      	ldr	r3, [pc, #20]	@ (800bc84 <_svfiprintf_r+0x1f0>)
 800bc6e:	a904      	add	r1, sp, #16
 800bc70:	4638      	mov	r0, r7
 800bc72:	f7fc ff1d 	bl	8008ab0 <_printf_i>
 800bc76:	e7ed      	b.n	800bc54 <_svfiprintf_r+0x1c0>
 800bc78:	0800d5c1 	.word	0x0800d5c1
 800bc7c:	0800d5cb 	.word	0x0800d5cb
 800bc80:	08008581 	.word	0x08008581
 800bc84:	0800b9dd 	.word	0x0800b9dd
 800bc88:	0800d5c7 	.word	0x0800d5c7

0800bc8c <__sflush_r>:
 800bc8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc94:	0716      	lsls	r6, r2, #28
 800bc96:	4605      	mov	r5, r0
 800bc98:	460c      	mov	r4, r1
 800bc9a:	d454      	bmi.n	800bd46 <__sflush_r+0xba>
 800bc9c:	684b      	ldr	r3, [r1, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	dc02      	bgt.n	800bca8 <__sflush_r+0x1c>
 800bca2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	dd48      	ble.n	800bd3a <__sflush_r+0xae>
 800bca8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcaa:	2e00      	cmp	r6, #0
 800bcac:	d045      	beq.n	800bd3a <__sflush_r+0xae>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcb4:	682f      	ldr	r7, [r5, #0]
 800bcb6:	6a21      	ldr	r1, [r4, #32]
 800bcb8:	602b      	str	r3, [r5, #0]
 800bcba:	d030      	beq.n	800bd1e <__sflush_r+0x92>
 800bcbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	0759      	lsls	r1, r3, #29
 800bcc2:	d505      	bpl.n	800bcd0 <__sflush_r+0x44>
 800bcc4:	6863      	ldr	r3, [r4, #4]
 800bcc6:	1ad2      	subs	r2, r2, r3
 800bcc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcca:	b10b      	cbz	r3, 800bcd0 <__sflush_r+0x44>
 800bccc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcce:	1ad2      	subs	r2, r2, r3
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcd4:	6a21      	ldr	r1, [r4, #32]
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	47b0      	blx	r6
 800bcda:	1c43      	adds	r3, r0, #1
 800bcdc:	89a3      	ldrh	r3, [r4, #12]
 800bcde:	d106      	bne.n	800bcee <__sflush_r+0x62>
 800bce0:	6829      	ldr	r1, [r5, #0]
 800bce2:	291d      	cmp	r1, #29
 800bce4:	d82b      	bhi.n	800bd3e <__sflush_r+0xb2>
 800bce6:	4a2a      	ldr	r2, [pc, #168]	@ (800bd90 <__sflush_r+0x104>)
 800bce8:	410a      	asrs	r2, r1
 800bcea:	07d6      	lsls	r6, r2, #31
 800bcec:	d427      	bmi.n	800bd3e <__sflush_r+0xb2>
 800bcee:	2200      	movs	r2, #0
 800bcf0:	6062      	str	r2, [r4, #4]
 800bcf2:	04d9      	lsls	r1, r3, #19
 800bcf4:	6922      	ldr	r2, [r4, #16]
 800bcf6:	6022      	str	r2, [r4, #0]
 800bcf8:	d504      	bpl.n	800bd04 <__sflush_r+0x78>
 800bcfa:	1c42      	adds	r2, r0, #1
 800bcfc:	d101      	bne.n	800bd02 <__sflush_r+0x76>
 800bcfe:	682b      	ldr	r3, [r5, #0]
 800bd00:	b903      	cbnz	r3, 800bd04 <__sflush_r+0x78>
 800bd02:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd06:	602f      	str	r7, [r5, #0]
 800bd08:	b1b9      	cbz	r1, 800bd3a <__sflush_r+0xae>
 800bd0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd0e:	4299      	cmp	r1, r3
 800bd10:	d002      	beq.n	800bd18 <__sflush_r+0x8c>
 800bd12:	4628      	mov	r0, r5
 800bd14:	f7fe fa2c 	bl	800a170 <_free_r>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd1c:	e00d      	b.n	800bd3a <__sflush_r+0xae>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	4628      	mov	r0, r5
 800bd22:	47b0      	blx	r6
 800bd24:	4602      	mov	r2, r0
 800bd26:	1c50      	adds	r0, r2, #1
 800bd28:	d1c9      	bne.n	800bcbe <__sflush_r+0x32>
 800bd2a:	682b      	ldr	r3, [r5, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d0c6      	beq.n	800bcbe <__sflush_r+0x32>
 800bd30:	2b1d      	cmp	r3, #29
 800bd32:	d001      	beq.n	800bd38 <__sflush_r+0xac>
 800bd34:	2b16      	cmp	r3, #22
 800bd36:	d11e      	bne.n	800bd76 <__sflush_r+0xea>
 800bd38:	602f      	str	r7, [r5, #0]
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	e022      	b.n	800bd84 <__sflush_r+0xf8>
 800bd3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd42:	b21b      	sxth	r3, r3
 800bd44:	e01b      	b.n	800bd7e <__sflush_r+0xf2>
 800bd46:	690f      	ldr	r7, [r1, #16]
 800bd48:	2f00      	cmp	r7, #0
 800bd4a:	d0f6      	beq.n	800bd3a <__sflush_r+0xae>
 800bd4c:	0793      	lsls	r3, r2, #30
 800bd4e:	680e      	ldr	r6, [r1, #0]
 800bd50:	bf08      	it	eq
 800bd52:	694b      	ldreq	r3, [r1, #20]
 800bd54:	600f      	str	r7, [r1, #0]
 800bd56:	bf18      	it	ne
 800bd58:	2300      	movne	r3, #0
 800bd5a:	eba6 0807 	sub.w	r8, r6, r7
 800bd5e:	608b      	str	r3, [r1, #8]
 800bd60:	f1b8 0f00 	cmp.w	r8, #0
 800bd64:	dde9      	ble.n	800bd3a <__sflush_r+0xae>
 800bd66:	6a21      	ldr	r1, [r4, #32]
 800bd68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd6a:	4643      	mov	r3, r8
 800bd6c:	463a      	mov	r2, r7
 800bd6e:	4628      	mov	r0, r5
 800bd70:	47b0      	blx	r6
 800bd72:	2800      	cmp	r0, #0
 800bd74:	dc08      	bgt.n	800bd88 <__sflush_r+0xfc>
 800bd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd7e:	81a3      	strh	r3, [r4, #12]
 800bd80:	f04f 30ff 	mov.w	r0, #4294967295
 800bd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd88:	4407      	add	r7, r0
 800bd8a:	eba8 0800 	sub.w	r8, r8, r0
 800bd8e:	e7e7      	b.n	800bd60 <__sflush_r+0xd4>
 800bd90:	dfbffffe 	.word	0xdfbffffe

0800bd94 <_fflush_r>:
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	690b      	ldr	r3, [r1, #16]
 800bd98:	4605      	mov	r5, r0
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	b913      	cbnz	r3, 800bda4 <_fflush_r+0x10>
 800bd9e:	2500      	movs	r5, #0
 800bda0:	4628      	mov	r0, r5
 800bda2:	bd38      	pop	{r3, r4, r5, pc}
 800bda4:	b118      	cbz	r0, 800bdae <_fflush_r+0x1a>
 800bda6:	6a03      	ldr	r3, [r0, #32]
 800bda8:	b90b      	cbnz	r3, 800bdae <_fflush_r+0x1a>
 800bdaa:	f7fd fa41 	bl	8009230 <__sinit>
 800bdae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d0f3      	beq.n	800bd9e <_fflush_r+0xa>
 800bdb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdb8:	07d0      	lsls	r0, r2, #31
 800bdba:	d404      	bmi.n	800bdc6 <_fflush_r+0x32>
 800bdbc:	0599      	lsls	r1, r3, #22
 800bdbe:	d402      	bmi.n	800bdc6 <_fflush_r+0x32>
 800bdc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdc2:	f7fd fb80 	bl	80094c6 <__retarget_lock_acquire_recursive>
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	4621      	mov	r1, r4
 800bdca:	f7ff ff5f 	bl	800bc8c <__sflush_r>
 800bdce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdd0:	07da      	lsls	r2, r3, #31
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	d4e4      	bmi.n	800bda0 <_fflush_r+0xc>
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	059b      	lsls	r3, r3, #22
 800bdda:	d4e1      	bmi.n	800bda0 <_fflush_r+0xc>
 800bddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdde:	f7fd fb73 	bl	80094c8 <__retarget_lock_release_recursive>
 800bde2:	e7dd      	b.n	800bda0 <_fflush_r+0xc>

0800bde4 <memmove>:
 800bde4:	4288      	cmp	r0, r1
 800bde6:	b510      	push	{r4, lr}
 800bde8:	eb01 0402 	add.w	r4, r1, r2
 800bdec:	d902      	bls.n	800bdf4 <memmove+0x10>
 800bdee:	4284      	cmp	r4, r0
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	d807      	bhi.n	800be04 <memmove+0x20>
 800bdf4:	1e43      	subs	r3, r0, #1
 800bdf6:	42a1      	cmp	r1, r4
 800bdf8:	d008      	beq.n	800be0c <memmove+0x28>
 800bdfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be02:	e7f8      	b.n	800bdf6 <memmove+0x12>
 800be04:	4402      	add	r2, r0
 800be06:	4601      	mov	r1, r0
 800be08:	428a      	cmp	r2, r1
 800be0a:	d100      	bne.n	800be0e <memmove+0x2a>
 800be0c:	bd10      	pop	{r4, pc}
 800be0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be16:	e7f7      	b.n	800be08 <memmove+0x24>

0800be18 <strncmp>:
 800be18:	b510      	push	{r4, lr}
 800be1a:	b16a      	cbz	r2, 800be38 <strncmp+0x20>
 800be1c:	3901      	subs	r1, #1
 800be1e:	1884      	adds	r4, r0, r2
 800be20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800be28:	429a      	cmp	r2, r3
 800be2a:	d103      	bne.n	800be34 <strncmp+0x1c>
 800be2c:	42a0      	cmp	r0, r4
 800be2e:	d001      	beq.n	800be34 <strncmp+0x1c>
 800be30:	2a00      	cmp	r2, #0
 800be32:	d1f5      	bne.n	800be20 <strncmp+0x8>
 800be34:	1ad0      	subs	r0, r2, r3
 800be36:	bd10      	pop	{r4, pc}
 800be38:	4610      	mov	r0, r2
 800be3a:	e7fc      	b.n	800be36 <strncmp+0x1e>

0800be3c <_sbrk_r>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	4d06      	ldr	r5, [pc, #24]	@ (800be58 <_sbrk_r+0x1c>)
 800be40:	2300      	movs	r3, #0
 800be42:	4604      	mov	r4, r0
 800be44:	4608      	mov	r0, r1
 800be46:	602b      	str	r3, [r5, #0]
 800be48:	f7f6 fce8 	bl	800281c <_sbrk>
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	d102      	bne.n	800be56 <_sbrk_r+0x1a>
 800be50:	682b      	ldr	r3, [r5, #0]
 800be52:	b103      	cbz	r3, 800be56 <_sbrk_r+0x1a>
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	20000bb4 	.word	0x20000bb4

0800be5c <memcpy>:
 800be5c:	440a      	add	r2, r1
 800be5e:	4291      	cmp	r1, r2
 800be60:	f100 33ff 	add.w	r3, r0, #4294967295
 800be64:	d100      	bne.n	800be68 <memcpy+0xc>
 800be66:	4770      	bx	lr
 800be68:	b510      	push	{r4, lr}
 800be6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be72:	4291      	cmp	r1, r2
 800be74:	d1f9      	bne.n	800be6a <memcpy+0xe>
 800be76:	bd10      	pop	{r4, pc}

0800be78 <nan>:
 800be78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be80 <nan+0x8>
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	00000000 	.word	0x00000000
 800be84:	7ff80000 	.word	0x7ff80000

0800be88 <__assert_func>:
 800be88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be8a:	4614      	mov	r4, r2
 800be8c:	461a      	mov	r2, r3
 800be8e:	4b09      	ldr	r3, [pc, #36]	@ (800beb4 <__assert_func+0x2c>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4605      	mov	r5, r0
 800be94:	68d8      	ldr	r0, [r3, #12]
 800be96:	b954      	cbnz	r4, 800beae <__assert_func+0x26>
 800be98:	4b07      	ldr	r3, [pc, #28]	@ (800beb8 <__assert_func+0x30>)
 800be9a:	461c      	mov	r4, r3
 800be9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bea0:	9100      	str	r1, [sp, #0]
 800bea2:	462b      	mov	r3, r5
 800bea4:	4905      	ldr	r1, [pc, #20]	@ (800bebc <__assert_func+0x34>)
 800bea6:	f000 fba7 	bl	800c5f8 <fiprintf>
 800beaa:	f000 fbb7 	bl	800c61c <abort>
 800beae:	4b04      	ldr	r3, [pc, #16]	@ (800bec0 <__assert_func+0x38>)
 800beb0:	e7f4      	b.n	800be9c <__assert_func+0x14>
 800beb2:	bf00      	nop
 800beb4:	20000018 	.word	0x20000018
 800beb8:	0800d615 	.word	0x0800d615
 800bebc:	0800d5e7 	.word	0x0800d5e7
 800bec0:	0800d5da 	.word	0x0800d5da

0800bec4 <_calloc_r>:
 800bec4:	b570      	push	{r4, r5, r6, lr}
 800bec6:	fba1 5402 	umull	r5, r4, r1, r2
 800beca:	b93c      	cbnz	r4, 800bedc <_calloc_r+0x18>
 800becc:	4629      	mov	r1, r5
 800bece:	f7fe f9c3 	bl	800a258 <_malloc_r>
 800bed2:	4606      	mov	r6, r0
 800bed4:	b928      	cbnz	r0, 800bee2 <_calloc_r+0x1e>
 800bed6:	2600      	movs	r6, #0
 800bed8:	4630      	mov	r0, r6
 800beda:	bd70      	pop	{r4, r5, r6, pc}
 800bedc:	220c      	movs	r2, #12
 800bede:	6002      	str	r2, [r0, #0]
 800bee0:	e7f9      	b.n	800bed6 <_calloc_r+0x12>
 800bee2:	462a      	mov	r2, r5
 800bee4:	4621      	mov	r1, r4
 800bee6:	f7fd fa70 	bl	80093ca <memset>
 800beea:	e7f5      	b.n	800bed8 <_calloc_r+0x14>

0800beec <rshift>:
 800beec:	6903      	ldr	r3, [r0, #16]
 800beee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bef6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800befa:	f100 0414 	add.w	r4, r0, #20
 800befe:	dd45      	ble.n	800bf8c <rshift+0xa0>
 800bf00:	f011 011f 	ands.w	r1, r1, #31
 800bf04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf0c:	d10c      	bne.n	800bf28 <rshift+0x3c>
 800bf0e:	f100 0710 	add.w	r7, r0, #16
 800bf12:	4629      	mov	r1, r5
 800bf14:	42b1      	cmp	r1, r6
 800bf16:	d334      	bcc.n	800bf82 <rshift+0x96>
 800bf18:	1a9b      	subs	r3, r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	1eea      	subs	r2, r5, #3
 800bf1e:	4296      	cmp	r6, r2
 800bf20:	bf38      	it	cc
 800bf22:	2300      	movcc	r3, #0
 800bf24:	4423      	add	r3, r4
 800bf26:	e015      	b.n	800bf54 <rshift+0x68>
 800bf28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bf2c:	f1c1 0820 	rsb	r8, r1, #32
 800bf30:	40cf      	lsrs	r7, r1
 800bf32:	f105 0e04 	add.w	lr, r5, #4
 800bf36:	46a1      	mov	r9, r4
 800bf38:	4576      	cmp	r6, lr
 800bf3a:	46f4      	mov	ip, lr
 800bf3c:	d815      	bhi.n	800bf6a <rshift+0x7e>
 800bf3e:	1a9a      	subs	r2, r3, r2
 800bf40:	0092      	lsls	r2, r2, #2
 800bf42:	3a04      	subs	r2, #4
 800bf44:	3501      	adds	r5, #1
 800bf46:	42ae      	cmp	r6, r5
 800bf48:	bf38      	it	cc
 800bf4a:	2200      	movcc	r2, #0
 800bf4c:	18a3      	adds	r3, r4, r2
 800bf4e:	50a7      	str	r7, [r4, r2]
 800bf50:	b107      	cbz	r7, 800bf54 <rshift+0x68>
 800bf52:	3304      	adds	r3, #4
 800bf54:	1b1a      	subs	r2, r3, r4
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bf5c:	bf08      	it	eq
 800bf5e:	2300      	moveq	r3, #0
 800bf60:	6102      	str	r2, [r0, #16]
 800bf62:	bf08      	it	eq
 800bf64:	6143      	streq	r3, [r0, #20]
 800bf66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf6a:	f8dc c000 	ldr.w	ip, [ip]
 800bf6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf72:	ea4c 0707 	orr.w	r7, ip, r7
 800bf76:	f849 7b04 	str.w	r7, [r9], #4
 800bf7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf7e:	40cf      	lsrs	r7, r1
 800bf80:	e7da      	b.n	800bf38 <rshift+0x4c>
 800bf82:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf86:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf8a:	e7c3      	b.n	800bf14 <rshift+0x28>
 800bf8c:	4623      	mov	r3, r4
 800bf8e:	e7e1      	b.n	800bf54 <rshift+0x68>

0800bf90 <__hexdig_fun>:
 800bf90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bf94:	2b09      	cmp	r3, #9
 800bf96:	d802      	bhi.n	800bf9e <__hexdig_fun+0xe>
 800bf98:	3820      	subs	r0, #32
 800bf9a:	b2c0      	uxtb	r0, r0
 800bf9c:	4770      	bx	lr
 800bf9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bfa2:	2b05      	cmp	r3, #5
 800bfa4:	d801      	bhi.n	800bfaa <__hexdig_fun+0x1a>
 800bfa6:	3847      	subs	r0, #71	@ 0x47
 800bfa8:	e7f7      	b.n	800bf9a <__hexdig_fun+0xa>
 800bfaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bfae:	2b05      	cmp	r3, #5
 800bfb0:	d801      	bhi.n	800bfb6 <__hexdig_fun+0x26>
 800bfb2:	3827      	subs	r0, #39	@ 0x27
 800bfb4:	e7f1      	b.n	800bf9a <__hexdig_fun+0xa>
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	4770      	bx	lr
	...

0800bfbc <__gethex>:
 800bfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc0:	b085      	sub	sp, #20
 800bfc2:	468a      	mov	sl, r1
 800bfc4:	9302      	str	r3, [sp, #8]
 800bfc6:	680b      	ldr	r3, [r1, #0]
 800bfc8:	9001      	str	r0, [sp, #4]
 800bfca:	4690      	mov	r8, r2
 800bfcc:	1c9c      	adds	r4, r3, #2
 800bfce:	46a1      	mov	r9, r4
 800bfd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bfd4:	2830      	cmp	r0, #48	@ 0x30
 800bfd6:	d0fa      	beq.n	800bfce <__gethex+0x12>
 800bfd8:	eba9 0303 	sub.w	r3, r9, r3
 800bfdc:	f1a3 0b02 	sub.w	fp, r3, #2
 800bfe0:	f7ff ffd6 	bl	800bf90 <__hexdig_fun>
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d168      	bne.n	800c0bc <__gethex+0x100>
 800bfea:	49a0      	ldr	r1, [pc, #640]	@ (800c26c <__gethex+0x2b0>)
 800bfec:	2201      	movs	r2, #1
 800bfee:	4648      	mov	r0, r9
 800bff0:	f7ff ff12 	bl	800be18 <strncmp>
 800bff4:	4607      	mov	r7, r0
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d167      	bne.n	800c0ca <__gethex+0x10e>
 800bffa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bffe:	4626      	mov	r6, r4
 800c000:	f7ff ffc6 	bl	800bf90 <__hexdig_fun>
 800c004:	2800      	cmp	r0, #0
 800c006:	d062      	beq.n	800c0ce <__gethex+0x112>
 800c008:	4623      	mov	r3, r4
 800c00a:	7818      	ldrb	r0, [r3, #0]
 800c00c:	2830      	cmp	r0, #48	@ 0x30
 800c00e:	4699      	mov	r9, r3
 800c010:	f103 0301 	add.w	r3, r3, #1
 800c014:	d0f9      	beq.n	800c00a <__gethex+0x4e>
 800c016:	f7ff ffbb 	bl	800bf90 <__hexdig_fun>
 800c01a:	fab0 f580 	clz	r5, r0
 800c01e:	096d      	lsrs	r5, r5, #5
 800c020:	f04f 0b01 	mov.w	fp, #1
 800c024:	464a      	mov	r2, r9
 800c026:	4616      	mov	r6, r2
 800c028:	3201      	adds	r2, #1
 800c02a:	7830      	ldrb	r0, [r6, #0]
 800c02c:	f7ff ffb0 	bl	800bf90 <__hexdig_fun>
 800c030:	2800      	cmp	r0, #0
 800c032:	d1f8      	bne.n	800c026 <__gethex+0x6a>
 800c034:	498d      	ldr	r1, [pc, #564]	@ (800c26c <__gethex+0x2b0>)
 800c036:	2201      	movs	r2, #1
 800c038:	4630      	mov	r0, r6
 800c03a:	f7ff feed 	bl	800be18 <strncmp>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d13f      	bne.n	800c0c2 <__gethex+0x106>
 800c042:	b944      	cbnz	r4, 800c056 <__gethex+0x9a>
 800c044:	1c74      	adds	r4, r6, #1
 800c046:	4622      	mov	r2, r4
 800c048:	4616      	mov	r6, r2
 800c04a:	3201      	adds	r2, #1
 800c04c:	7830      	ldrb	r0, [r6, #0]
 800c04e:	f7ff ff9f 	bl	800bf90 <__hexdig_fun>
 800c052:	2800      	cmp	r0, #0
 800c054:	d1f8      	bne.n	800c048 <__gethex+0x8c>
 800c056:	1ba4      	subs	r4, r4, r6
 800c058:	00a7      	lsls	r7, r4, #2
 800c05a:	7833      	ldrb	r3, [r6, #0]
 800c05c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c060:	2b50      	cmp	r3, #80	@ 0x50
 800c062:	d13e      	bne.n	800c0e2 <__gethex+0x126>
 800c064:	7873      	ldrb	r3, [r6, #1]
 800c066:	2b2b      	cmp	r3, #43	@ 0x2b
 800c068:	d033      	beq.n	800c0d2 <__gethex+0x116>
 800c06a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c06c:	d034      	beq.n	800c0d8 <__gethex+0x11c>
 800c06e:	1c71      	adds	r1, r6, #1
 800c070:	2400      	movs	r4, #0
 800c072:	7808      	ldrb	r0, [r1, #0]
 800c074:	f7ff ff8c 	bl	800bf90 <__hexdig_fun>
 800c078:	1e43      	subs	r3, r0, #1
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	2b18      	cmp	r3, #24
 800c07e:	d830      	bhi.n	800c0e2 <__gethex+0x126>
 800c080:	f1a0 0210 	sub.w	r2, r0, #16
 800c084:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c088:	f7ff ff82 	bl	800bf90 <__hexdig_fun>
 800c08c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c090:	fa5f fc8c 	uxtb.w	ip, ip
 800c094:	f1bc 0f18 	cmp.w	ip, #24
 800c098:	f04f 030a 	mov.w	r3, #10
 800c09c:	d91e      	bls.n	800c0dc <__gethex+0x120>
 800c09e:	b104      	cbz	r4, 800c0a2 <__gethex+0xe6>
 800c0a0:	4252      	negs	r2, r2
 800c0a2:	4417      	add	r7, r2
 800c0a4:	f8ca 1000 	str.w	r1, [sl]
 800c0a8:	b1ed      	cbz	r5, 800c0e6 <__gethex+0x12a>
 800c0aa:	f1bb 0f00 	cmp.w	fp, #0
 800c0ae:	bf0c      	ite	eq
 800c0b0:	2506      	moveq	r5, #6
 800c0b2:	2500      	movne	r5, #0
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	b005      	add	sp, #20
 800c0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0bc:	2500      	movs	r5, #0
 800c0be:	462c      	mov	r4, r5
 800c0c0:	e7b0      	b.n	800c024 <__gethex+0x68>
 800c0c2:	2c00      	cmp	r4, #0
 800c0c4:	d1c7      	bne.n	800c056 <__gethex+0x9a>
 800c0c6:	4627      	mov	r7, r4
 800c0c8:	e7c7      	b.n	800c05a <__gethex+0x9e>
 800c0ca:	464e      	mov	r6, r9
 800c0cc:	462f      	mov	r7, r5
 800c0ce:	2501      	movs	r5, #1
 800c0d0:	e7c3      	b.n	800c05a <__gethex+0x9e>
 800c0d2:	2400      	movs	r4, #0
 800c0d4:	1cb1      	adds	r1, r6, #2
 800c0d6:	e7cc      	b.n	800c072 <__gethex+0xb6>
 800c0d8:	2401      	movs	r4, #1
 800c0da:	e7fb      	b.n	800c0d4 <__gethex+0x118>
 800c0dc:	fb03 0002 	mla	r0, r3, r2, r0
 800c0e0:	e7ce      	b.n	800c080 <__gethex+0xc4>
 800c0e2:	4631      	mov	r1, r6
 800c0e4:	e7de      	b.n	800c0a4 <__gethex+0xe8>
 800c0e6:	eba6 0309 	sub.w	r3, r6, r9
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	2b07      	cmp	r3, #7
 800c0f0:	dc0a      	bgt.n	800c108 <__gethex+0x14c>
 800c0f2:	9801      	ldr	r0, [sp, #4]
 800c0f4:	f7fe f93c 	bl	800a370 <_Balloc>
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	b940      	cbnz	r0, 800c10e <__gethex+0x152>
 800c0fc:	4b5c      	ldr	r3, [pc, #368]	@ (800c270 <__gethex+0x2b4>)
 800c0fe:	4602      	mov	r2, r0
 800c100:	21e4      	movs	r1, #228	@ 0xe4
 800c102:	485c      	ldr	r0, [pc, #368]	@ (800c274 <__gethex+0x2b8>)
 800c104:	f7ff fec0 	bl	800be88 <__assert_func>
 800c108:	3101      	adds	r1, #1
 800c10a:	105b      	asrs	r3, r3, #1
 800c10c:	e7ef      	b.n	800c0ee <__gethex+0x132>
 800c10e:	f100 0a14 	add.w	sl, r0, #20
 800c112:	2300      	movs	r3, #0
 800c114:	4655      	mov	r5, sl
 800c116:	469b      	mov	fp, r3
 800c118:	45b1      	cmp	r9, r6
 800c11a:	d337      	bcc.n	800c18c <__gethex+0x1d0>
 800c11c:	f845 bb04 	str.w	fp, [r5], #4
 800c120:	eba5 050a 	sub.w	r5, r5, sl
 800c124:	10ad      	asrs	r5, r5, #2
 800c126:	6125      	str	r5, [r4, #16]
 800c128:	4658      	mov	r0, fp
 800c12a:	f7fe fa13 	bl	800a554 <__hi0bits>
 800c12e:	016d      	lsls	r5, r5, #5
 800c130:	f8d8 6000 	ldr.w	r6, [r8]
 800c134:	1a2d      	subs	r5, r5, r0
 800c136:	42b5      	cmp	r5, r6
 800c138:	dd54      	ble.n	800c1e4 <__gethex+0x228>
 800c13a:	1bad      	subs	r5, r5, r6
 800c13c:	4629      	mov	r1, r5
 800c13e:	4620      	mov	r0, r4
 800c140:	f7fe fda7 	bl	800ac92 <__any_on>
 800c144:	4681      	mov	r9, r0
 800c146:	b178      	cbz	r0, 800c168 <__gethex+0x1ac>
 800c148:	1e6b      	subs	r3, r5, #1
 800c14a:	1159      	asrs	r1, r3, #5
 800c14c:	f003 021f 	and.w	r2, r3, #31
 800c150:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c154:	f04f 0901 	mov.w	r9, #1
 800c158:	fa09 f202 	lsl.w	r2, r9, r2
 800c15c:	420a      	tst	r2, r1
 800c15e:	d003      	beq.n	800c168 <__gethex+0x1ac>
 800c160:	454b      	cmp	r3, r9
 800c162:	dc36      	bgt.n	800c1d2 <__gethex+0x216>
 800c164:	f04f 0902 	mov.w	r9, #2
 800c168:	4629      	mov	r1, r5
 800c16a:	4620      	mov	r0, r4
 800c16c:	f7ff febe 	bl	800beec <rshift>
 800c170:	442f      	add	r7, r5
 800c172:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c176:	42bb      	cmp	r3, r7
 800c178:	da42      	bge.n	800c200 <__gethex+0x244>
 800c17a:	9801      	ldr	r0, [sp, #4]
 800c17c:	4621      	mov	r1, r4
 800c17e:	f7fe f937 	bl	800a3f0 <_Bfree>
 800c182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c184:	2300      	movs	r3, #0
 800c186:	6013      	str	r3, [r2, #0]
 800c188:	25a3      	movs	r5, #163	@ 0xa3
 800c18a:	e793      	b.n	800c0b4 <__gethex+0xf8>
 800c18c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c190:	2a2e      	cmp	r2, #46	@ 0x2e
 800c192:	d012      	beq.n	800c1ba <__gethex+0x1fe>
 800c194:	2b20      	cmp	r3, #32
 800c196:	d104      	bne.n	800c1a2 <__gethex+0x1e6>
 800c198:	f845 bb04 	str.w	fp, [r5], #4
 800c19c:	f04f 0b00 	mov.w	fp, #0
 800c1a0:	465b      	mov	r3, fp
 800c1a2:	7830      	ldrb	r0, [r6, #0]
 800c1a4:	9303      	str	r3, [sp, #12]
 800c1a6:	f7ff fef3 	bl	800bf90 <__hexdig_fun>
 800c1aa:	9b03      	ldr	r3, [sp, #12]
 800c1ac:	f000 000f 	and.w	r0, r0, #15
 800c1b0:	4098      	lsls	r0, r3
 800c1b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	e7ae      	b.n	800c118 <__gethex+0x15c>
 800c1ba:	45b1      	cmp	r9, r6
 800c1bc:	d8ea      	bhi.n	800c194 <__gethex+0x1d8>
 800c1be:	492b      	ldr	r1, [pc, #172]	@ (800c26c <__gethex+0x2b0>)
 800c1c0:	9303      	str	r3, [sp, #12]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f7ff fe27 	bl	800be18 <strncmp>
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d1e1      	bne.n	800c194 <__gethex+0x1d8>
 800c1d0:	e7a2      	b.n	800c118 <__gethex+0x15c>
 800c1d2:	1ea9      	subs	r1, r5, #2
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f7fe fd5c 	bl	800ac92 <__any_on>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d0c2      	beq.n	800c164 <__gethex+0x1a8>
 800c1de:	f04f 0903 	mov.w	r9, #3
 800c1e2:	e7c1      	b.n	800c168 <__gethex+0x1ac>
 800c1e4:	da09      	bge.n	800c1fa <__gethex+0x23e>
 800c1e6:	1b75      	subs	r5, r6, r5
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	9801      	ldr	r0, [sp, #4]
 800c1ec:	462a      	mov	r2, r5
 800c1ee:	f7fe fb17 	bl	800a820 <__lshift>
 800c1f2:	1b7f      	subs	r7, r7, r5
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	f100 0a14 	add.w	sl, r0, #20
 800c1fa:	f04f 0900 	mov.w	r9, #0
 800c1fe:	e7b8      	b.n	800c172 <__gethex+0x1b6>
 800c200:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c204:	42bd      	cmp	r5, r7
 800c206:	dd6f      	ble.n	800c2e8 <__gethex+0x32c>
 800c208:	1bed      	subs	r5, r5, r7
 800c20a:	42ae      	cmp	r6, r5
 800c20c:	dc34      	bgt.n	800c278 <__gethex+0x2bc>
 800c20e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c212:	2b02      	cmp	r3, #2
 800c214:	d022      	beq.n	800c25c <__gethex+0x2a0>
 800c216:	2b03      	cmp	r3, #3
 800c218:	d024      	beq.n	800c264 <__gethex+0x2a8>
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d115      	bne.n	800c24a <__gethex+0x28e>
 800c21e:	42ae      	cmp	r6, r5
 800c220:	d113      	bne.n	800c24a <__gethex+0x28e>
 800c222:	2e01      	cmp	r6, #1
 800c224:	d10b      	bne.n	800c23e <__gethex+0x282>
 800c226:	9a02      	ldr	r2, [sp, #8]
 800c228:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c22c:	6013      	str	r3, [r2, #0]
 800c22e:	2301      	movs	r3, #1
 800c230:	6123      	str	r3, [r4, #16]
 800c232:	f8ca 3000 	str.w	r3, [sl]
 800c236:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c238:	2562      	movs	r5, #98	@ 0x62
 800c23a:	601c      	str	r4, [r3, #0]
 800c23c:	e73a      	b.n	800c0b4 <__gethex+0xf8>
 800c23e:	1e71      	subs	r1, r6, #1
 800c240:	4620      	mov	r0, r4
 800c242:	f7fe fd26 	bl	800ac92 <__any_on>
 800c246:	2800      	cmp	r0, #0
 800c248:	d1ed      	bne.n	800c226 <__gethex+0x26a>
 800c24a:	9801      	ldr	r0, [sp, #4]
 800c24c:	4621      	mov	r1, r4
 800c24e:	f7fe f8cf 	bl	800a3f0 <_Bfree>
 800c252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c254:	2300      	movs	r3, #0
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	2550      	movs	r5, #80	@ 0x50
 800c25a:	e72b      	b.n	800c0b4 <__gethex+0xf8>
 800c25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1f3      	bne.n	800c24a <__gethex+0x28e>
 800c262:	e7e0      	b.n	800c226 <__gethex+0x26a>
 800c264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1dd      	bne.n	800c226 <__gethex+0x26a>
 800c26a:	e7ee      	b.n	800c24a <__gethex+0x28e>
 800c26c:	0800d468 	.word	0x0800d468
 800c270:	0800d2fd 	.word	0x0800d2fd
 800c274:	0800d616 	.word	0x0800d616
 800c278:	1e6f      	subs	r7, r5, #1
 800c27a:	f1b9 0f00 	cmp.w	r9, #0
 800c27e:	d130      	bne.n	800c2e2 <__gethex+0x326>
 800c280:	b127      	cbz	r7, 800c28c <__gethex+0x2d0>
 800c282:	4639      	mov	r1, r7
 800c284:	4620      	mov	r0, r4
 800c286:	f7fe fd04 	bl	800ac92 <__any_on>
 800c28a:	4681      	mov	r9, r0
 800c28c:	117a      	asrs	r2, r7, #5
 800c28e:	2301      	movs	r3, #1
 800c290:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c294:	f007 071f 	and.w	r7, r7, #31
 800c298:	40bb      	lsls	r3, r7
 800c29a:	4213      	tst	r3, r2
 800c29c:	4629      	mov	r1, r5
 800c29e:	4620      	mov	r0, r4
 800c2a0:	bf18      	it	ne
 800c2a2:	f049 0902 	orrne.w	r9, r9, #2
 800c2a6:	f7ff fe21 	bl	800beec <rshift>
 800c2aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c2ae:	1b76      	subs	r6, r6, r5
 800c2b0:	2502      	movs	r5, #2
 800c2b2:	f1b9 0f00 	cmp.w	r9, #0
 800c2b6:	d047      	beq.n	800c348 <__gethex+0x38c>
 800c2b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d015      	beq.n	800c2ec <__gethex+0x330>
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d017      	beq.n	800c2f4 <__gethex+0x338>
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d109      	bne.n	800c2dc <__gethex+0x320>
 800c2c8:	f019 0f02 	tst.w	r9, #2
 800c2cc:	d006      	beq.n	800c2dc <__gethex+0x320>
 800c2ce:	f8da 3000 	ldr.w	r3, [sl]
 800c2d2:	ea49 0903 	orr.w	r9, r9, r3
 800c2d6:	f019 0f01 	tst.w	r9, #1
 800c2da:	d10e      	bne.n	800c2fa <__gethex+0x33e>
 800c2dc:	f045 0510 	orr.w	r5, r5, #16
 800c2e0:	e032      	b.n	800c348 <__gethex+0x38c>
 800c2e2:	f04f 0901 	mov.w	r9, #1
 800c2e6:	e7d1      	b.n	800c28c <__gethex+0x2d0>
 800c2e8:	2501      	movs	r5, #1
 800c2ea:	e7e2      	b.n	800c2b2 <__gethex+0x2f6>
 800c2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ee:	f1c3 0301 	rsb	r3, r3, #1
 800c2f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c2f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d0f0      	beq.n	800c2dc <__gethex+0x320>
 800c2fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c2fe:	f104 0314 	add.w	r3, r4, #20
 800c302:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c306:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c30a:	f04f 0c00 	mov.w	ip, #0
 800c30e:	4618      	mov	r0, r3
 800c310:	f853 2b04 	ldr.w	r2, [r3], #4
 800c314:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c318:	d01b      	beq.n	800c352 <__gethex+0x396>
 800c31a:	3201      	adds	r2, #1
 800c31c:	6002      	str	r2, [r0, #0]
 800c31e:	2d02      	cmp	r5, #2
 800c320:	f104 0314 	add.w	r3, r4, #20
 800c324:	d13c      	bne.n	800c3a0 <__gethex+0x3e4>
 800c326:	f8d8 2000 	ldr.w	r2, [r8]
 800c32a:	3a01      	subs	r2, #1
 800c32c:	42b2      	cmp	r2, r6
 800c32e:	d109      	bne.n	800c344 <__gethex+0x388>
 800c330:	1171      	asrs	r1, r6, #5
 800c332:	2201      	movs	r2, #1
 800c334:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c338:	f006 061f 	and.w	r6, r6, #31
 800c33c:	fa02 f606 	lsl.w	r6, r2, r6
 800c340:	421e      	tst	r6, r3
 800c342:	d13a      	bne.n	800c3ba <__gethex+0x3fe>
 800c344:	f045 0520 	orr.w	r5, r5, #32
 800c348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c34a:	601c      	str	r4, [r3, #0]
 800c34c:	9b02      	ldr	r3, [sp, #8]
 800c34e:	601f      	str	r7, [r3, #0]
 800c350:	e6b0      	b.n	800c0b4 <__gethex+0xf8>
 800c352:	4299      	cmp	r1, r3
 800c354:	f843 cc04 	str.w	ip, [r3, #-4]
 800c358:	d8d9      	bhi.n	800c30e <__gethex+0x352>
 800c35a:	68a3      	ldr	r3, [r4, #8]
 800c35c:	459b      	cmp	fp, r3
 800c35e:	db17      	blt.n	800c390 <__gethex+0x3d4>
 800c360:	6861      	ldr	r1, [r4, #4]
 800c362:	9801      	ldr	r0, [sp, #4]
 800c364:	3101      	adds	r1, #1
 800c366:	f7fe f803 	bl	800a370 <_Balloc>
 800c36a:	4681      	mov	r9, r0
 800c36c:	b918      	cbnz	r0, 800c376 <__gethex+0x3ba>
 800c36e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3d8 <__gethex+0x41c>)
 800c370:	4602      	mov	r2, r0
 800c372:	2184      	movs	r1, #132	@ 0x84
 800c374:	e6c5      	b.n	800c102 <__gethex+0x146>
 800c376:	6922      	ldr	r2, [r4, #16]
 800c378:	3202      	adds	r2, #2
 800c37a:	f104 010c 	add.w	r1, r4, #12
 800c37e:	0092      	lsls	r2, r2, #2
 800c380:	300c      	adds	r0, #12
 800c382:	f7ff fd6b 	bl	800be5c <memcpy>
 800c386:	4621      	mov	r1, r4
 800c388:	9801      	ldr	r0, [sp, #4]
 800c38a:	f7fe f831 	bl	800a3f0 <_Bfree>
 800c38e:	464c      	mov	r4, r9
 800c390:	6923      	ldr	r3, [r4, #16]
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c398:	6122      	str	r2, [r4, #16]
 800c39a:	2201      	movs	r2, #1
 800c39c:	615a      	str	r2, [r3, #20]
 800c39e:	e7be      	b.n	800c31e <__gethex+0x362>
 800c3a0:	6922      	ldr	r2, [r4, #16]
 800c3a2:	455a      	cmp	r2, fp
 800c3a4:	dd0b      	ble.n	800c3be <__gethex+0x402>
 800c3a6:	2101      	movs	r1, #1
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f7ff fd9f 	bl	800beec <rshift>
 800c3ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c3b2:	3701      	adds	r7, #1
 800c3b4:	42bb      	cmp	r3, r7
 800c3b6:	f6ff aee0 	blt.w	800c17a <__gethex+0x1be>
 800c3ba:	2501      	movs	r5, #1
 800c3bc:	e7c2      	b.n	800c344 <__gethex+0x388>
 800c3be:	f016 061f 	ands.w	r6, r6, #31
 800c3c2:	d0fa      	beq.n	800c3ba <__gethex+0x3fe>
 800c3c4:	4453      	add	r3, sl
 800c3c6:	f1c6 0620 	rsb	r6, r6, #32
 800c3ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c3ce:	f7fe f8c1 	bl	800a554 <__hi0bits>
 800c3d2:	42b0      	cmp	r0, r6
 800c3d4:	dbe7      	blt.n	800c3a6 <__gethex+0x3ea>
 800c3d6:	e7f0      	b.n	800c3ba <__gethex+0x3fe>
 800c3d8:	0800d2fd 	.word	0x0800d2fd

0800c3dc <L_shift>:
 800c3dc:	f1c2 0208 	rsb	r2, r2, #8
 800c3e0:	0092      	lsls	r2, r2, #2
 800c3e2:	b570      	push	{r4, r5, r6, lr}
 800c3e4:	f1c2 0620 	rsb	r6, r2, #32
 800c3e8:	6843      	ldr	r3, [r0, #4]
 800c3ea:	6804      	ldr	r4, [r0, #0]
 800c3ec:	fa03 f506 	lsl.w	r5, r3, r6
 800c3f0:	432c      	orrs	r4, r5
 800c3f2:	40d3      	lsrs	r3, r2
 800c3f4:	6004      	str	r4, [r0, #0]
 800c3f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c3fa:	4288      	cmp	r0, r1
 800c3fc:	d3f4      	bcc.n	800c3e8 <L_shift+0xc>
 800c3fe:	bd70      	pop	{r4, r5, r6, pc}

0800c400 <__match>:
 800c400:	b530      	push	{r4, r5, lr}
 800c402:	6803      	ldr	r3, [r0, #0]
 800c404:	3301      	adds	r3, #1
 800c406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c40a:	b914      	cbnz	r4, 800c412 <__match+0x12>
 800c40c:	6003      	str	r3, [r0, #0]
 800c40e:	2001      	movs	r0, #1
 800c410:	bd30      	pop	{r4, r5, pc}
 800c412:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c416:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c41a:	2d19      	cmp	r5, #25
 800c41c:	bf98      	it	ls
 800c41e:	3220      	addls	r2, #32
 800c420:	42a2      	cmp	r2, r4
 800c422:	d0f0      	beq.n	800c406 <__match+0x6>
 800c424:	2000      	movs	r0, #0
 800c426:	e7f3      	b.n	800c410 <__match+0x10>

0800c428 <__hexnan>:
 800c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42c:	680b      	ldr	r3, [r1, #0]
 800c42e:	6801      	ldr	r1, [r0, #0]
 800c430:	115e      	asrs	r6, r3, #5
 800c432:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c436:	f013 031f 	ands.w	r3, r3, #31
 800c43a:	b087      	sub	sp, #28
 800c43c:	bf18      	it	ne
 800c43e:	3604      	addne	r6, #4
 800c440:	2500      	movs	r5, #0
 800c442:	1f37      	subs	r7, r6, #4
 800c444:	4682      	mov	sl, r0
 800c446:	4690      	mov	r8, r2
 800c448:	9301      	str	r3, [sp, #4]
 800c44a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c44e:	46b9      	mov	r9, r7
 800c450:	463c      	mov	r4, r7
 800c452:	9502      	str	r5, [sp, #8]
 800c454:	46ab      	mov	fp, r5
 800c456:	784a      	ldrb	r2, [r1, #1]
 800c458:	1c4b      	adds	r3, r1, #1
 800c45a:	9303      	str	r3, [sp, #12]
 800c45c:	b342      	cbz	r2, 800c4b0 <__hexnan+0x88>
 800c45e:	4610      	mov	r0, r2
 800c460:	9105      	str	r1, [sp, #20]
 800c462:	9204      	str	r2, [sp, #16]
 800c464:	f7ff fd94 	bl	800bf90 <__hexdig_fun>
 800c468:	2800      	cmp	r0, #0
 800c46a:	d151      	bne.n	800c510 <__hexnan+0xe8>
 800c46c:	9a04      	ldr	r2, [sp, #16]
 800c46e:	9905      	ldr	r1, [sp, #20]
 800c470:	2a20      	cmp	r2, #32
 800c472:	d818      	bhi.n	800c4a6 <__hexnan+0x7e>
 800c474:	9b02      	ldr	r3, [sp, #8]
 800c476:	459b      	cmp	fp, r3
 800c478:	dd13      	ble.n	800c4a2 <__hexnan+0x7a>
 800c47a:	454c      	cmp	r4, r9
 800c47c:	d206      	bcs.n	800c48c <__hexnan+0x64>
 800c47e:	2d07      	cmp	r5, #7
 800c480:	dc04      	bgt.n	800c48c <__hexnan+0x64>
 800c482:	462a      	mov	r2, r5
 800c484:	4649      	mov	r1, r9
 800c486:	4620      	mov	r0, r4
 800c488:	f7ff ffa8 	bl	800c3dc <L_shift>
 800c48c:	4544      	cmp	r4, r8
 800c48e:	d952      	bls.n	800c536 <__hexnan+0x10e>
 800c490:	2300      	movs	r3, #0
 800c492:	f1a4 0904 	sub.w	r9, r4, #4
 800c496:	f844 3c04 	str.w	r3, [r4, #-4]
 800c49a:	f8cd b008 	str.w	fp, [sp, #8]
 800c49e:	464c      	mov	r4, r9
 800c4a0:	461d      	mov	r5, r3
 800c4a2:	9903      	ldr	r1, [sp, #12]
 800c4a4:	e7d7      	b.n	800c456 <__hexnan+0x2e>
 800c4a6:	2a29      	cmp	r2, #41	@ 0x29
 800c4a8:	d157      	bne.n	800c55a <__hexnan+0x132>
 800c4aa:	3102      	adds	r1, #2
 800c4ac:	f8ca 1000 	str.w	r1, [sl]
 800c4b0:	f1bb 0f00 	cmp.w	fp, #0
 800c4b4:	d051      	beq.n	800c55a <__hexnan+0x132>
 800c4b6:	454c      	cmp	r4, r9
 800c4b8:	d206      	bcs.n	800c4c8 <__hexnan+0xa0>
 800c4ba:	2d07      	cmp	r5, #7
 800c4bc:	dc04      	bgt.n	800c4c8 <__hexnan+0xa0>
 800c4be:	462a      	mov	r2, r5
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f7ff ff8a 	bl	800c3dc <L_shift>
 800c4c8:	4544      	cmp	r4, r8
 800c4ca:	d936      	bls.n	800c53a <__hexnan+0x112>
 800c4cc:	f1a8 0204 	sub.w	r2, r8, #4
 800c4d0:	4623      	mov	r3, r4
 800c4d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c4d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c4da:	429f      	cmp	r7, r3
 800c4dc:	d2f9      	bcs.n	800c4d2 <__hexnan+0xaa>
 800c4de:	1b3b      	subs	r3, r7, r4
 800c4e0:	f023 0303 	bic.w	r3, r3, #3
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	3401      	adds	r4, #1
 800c4e8:	3e03      	subs	r6, #3
 800c4ea:	42b4      	cmp	r4, r6
 800c4ec:	bf88      	it	hi
 800c4ee:	2304      	movhi	r3, #4
 800c4f0:	4443      	add	r3, r8
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f843 2b04 	str.w	r2, [r3], #4
 800c4f8:	429f      	cmp	r7, r3
 800c4fa:	d2fb      	bcs.n	800c4f4 <__hexnan+0xcc>
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	b91b      	cbnz	r3, 800c508 <__hexnan+0xe0>
 800c500:	4547      	cmp	r7, r8
 800c502:	d128      	bne.n	800c556 <__hexnan+0x12e>
 800c504:	2301      	movs	r3, #1
 800c506:	603b      	str	r3, [r7, #0]
 800c508:	2005      	movs	r0, #5
 800c50a:	b007      	add	sp, #28
 800c50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c510:	3501      	adds	r5, #1
 800c512:	2d08      	cmp	r5, #8
 800c514:	f10b 0b01 	add.w	fp, fp, #1
 800c518:	dd06      	ble.n	800c528 <__hexnan+0x100>
 800c51a:	4544      	cmp	r4, r8
 800c51c:	d9c1      	bls.n	800c4a2 <__hexnan+0x7a>
 800c51e:	2300      	movs	r3, #0
 800c520:	f844 3c04 	str.w	r3, [r4, #-4]
 800c524:	2501      	movs	r5, #1
 800c526:	3c04      	subs	r4, #4
 800c528:	6822      	ldr	r2, [r4, #0]
 800c52a:	f000 000f 	and.w	r0, r0, #15
 800c52e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c532:	6020      	str	r0, [r4, #0]
 800c534:	e7b5      	b.n	800c4a2 <__hexnan+0x7a>
 800c536:	2508      	movs	r5, #8
 800c538:	e7b3      	b.n	800c4a2 <__hexnan+0x7a>
 800c53a:	9b01      	ldr	r3, [sp, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d0dd      	beq.n	800c4fc <__hexnan+0xd4>
 800c540:	f1c3 0320 	rsb	r3, r3, #32
 800c544:	f04f 32ff 	mov.w	r2, #4294967295
 800c548:	40da      	lsrs	r2, r3
 800c54a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c54e:	4013      	ands	r3, r2
 800c550:	f846 3c04 	str.w	r3, [r6, #-4]
 800c554:	e7d2      	b.n	800c4fc <__hexnan+0xd4>
 800c556:	3f04      	subs	r7, #4
 800c558:	e7d0      	b.n	800c4fc <__hexnan+0xd4>
 800c55a:	2004      	movs	r0, #4
 800c55c:	e7d5      	b.n	800c50a <__hexnan+0xe2>

0800c55e <__ascii_mbtowc>:
 800c55e:	b082      	sub	sp, #8
 800c560:	b901      	cbnz	r1, 800c564 <__ascii_mbtowc+0x6>
 800c562:	a901      	add	r1, sp, #4
 800c564:	b142      	cbz	r2, 800c578 <__ascii_mbtowc+0x1a>
 800c566:	b14b      	cbz	r3, 800c57c <__ascii_mbtowc+0x1e>
 800c568:	7813      	ldrb	r3, [r2, #0]
 800c56a:	600b      	str	r3, [r1, #0]
 800c56c:	7812      	ldrb	r2, [r2, #0]
 800c56e:	1e10      	subs	r0, r2, #0
 800c570:	bf18      	it	ne
 800c572:	2001      	movne	r0, #1
 800c574:	b002      	add	sp, #8
 800c576:	4770      	bx	lr
 800c578:	4610      	mov	r0, r2
 800c57a:	e7fb      	b.n	800c574 <__ascii_mbtowc+0x16>
 800c57c:	f06f 0001 	mvn.w	r0, #1
 800c580:	e7f8      	b.n	800c574 <__ascii_mbtowc+0x16>

0800c582 <_realloc_r>:
 800c582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c586:	4680      	mov	r8, r0
 800c588:	4615      	mov	r5, r2
 800c58a:	460c      	mov	r4, r1
 800c58c:	b921      	cbnz	r1, 800c598 <_realloc_r+0x16>
 800c58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c592:	4611      	mov	r1, r2
 800c594:	f7fd be60 	b.w	800a258 <_malloc_r>
 800c598:	b92a      	cbnz	r2, 800c5a6 <_realloc_r+0x24>
 800c59a:	f7fd fde9 	bl	800a170 <_free_r>
 800c59e:	2400      	movs	r4, #0
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5a6:	f000 f840 	bl	800c62a <_malloc_usable_size_r>
 800c5aa:	4285      	cmp	r5, r0
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	d802      	bhi.n	800c5b6 <_realloc_r+0x34>
 800c5b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c5b4:	d8f4      	bhi.n	800c5a0 <_realloc_r+0x1e>
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	4640      	mov	r0, r8
 800c5ba:	f7fd fe4d 	bl	800a258 <_malloc_r>
 800c5be:	4607      	mov	r7, r0
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d0ec      	beq.n	800c59e <_realloc_r+0x1c>
 800c5c4:	42b5      	cmp	r5, r6
 800c5c6:	462a      	mov	r2, r5
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	bf28      	it	cs
 800c5cc:	4632      	movcs	r2, r6
 800c5ce:	f7ff fc45 	bl	800be5c <memcpy>
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	4640      	mov	r0, r8
 800c5d6:	f7fd fdcb 	bl	800a170 <_free_r>
 800c5da:	463c      	mov	r4, r7
 800c5dc:	e7e0      	b.n	800c5a0 <_realloc_r+0x1e>

0800c5de <__ascii_wctomb>:
 800c5de:	4603      	mov	r3, r0
 800c5e0:	4608      	mov	r0, r1
 800c5e2:	b141      	cbz	r1, 800c5f6 <__ascii_wctomb+0x18>
 800c5e4:	2aff      	cmp	r2, #255	@ 0xff
 800c5e6:	d904      	bls.n	800c5f2 <__ascii_wctomb+0x14>
 800c5e8:	228a      	movs	r2, #138	@ 0x8a
 800c5ea:	601a      	str	r2, [r3, #0]
 800c5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f0:	4770      	bx	lr
 800c5f2:	700a      	strb	r2, [r1, #0]
 800c5f4:	2001      	movs	r0, #1
 800c5f6:	4770      	bx	lr

0800c5f8 <fiprintf>:
 800c5f8:	b40e      	push	{r1, r2, r3}
 800c5fa:	b503      	push	{r0, r1, lr}
 800c5fc:	4601      	mov	r1, r0
 800c5fe:	ab03      	add	r3, sp, #12
 800c600:	4805      	ldr	r0, [pc, #20]	@ (800c618 <fiprintf+0x20>)
 800c602:	f853 2b04 	ldr.w	r2, [r3], #4
 800c606:	6800      	ldr	r0, [r0, #0]
 800c608:	9301      	str	r3, [sp, #4]
 800c60a:	f000 f83f 	bl	800c68c <_vfiprintf_r>
 800c60e:	b002      	add	sp, #8
 800c610:	f85d eb04 	ldr.w	lr, [sp], #4
 800c614:	b003      	add	sp, #12
 800c616:	4770      	bx	lr
 800c618:	20000018 	.word	0x20000018

0800c61c <abort>:
 800c61c:	b508      	push	{r3, lr}
 800c61e:	2006      	movs	r0, #6
 800c620:	f000 fa08 	bl	800ca34 <raise>
 800c624:	2001      	movs	r0, #1
 800c626:	f7f6 f881 	bl	800272c <_exit>

0800c62a <_malloc_usable_size_r>:
 800c62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c62e:	1f18      	subs	r0, r3, #4
 800c630:	2b00      	cmp	r3, #0
 800c632:	bfbc      	itt	lt
 800c634:	580b      	ldrlt	r3, [r1, r0]
 800c636:	18c0      	addlt	r0, r0, r3
 800c638:	4770      	bx	lr

0800c63a <__sfputc_r>:
 800c63a:	6893      	ldr	r3, [r2, #8]
 800c63c:	3b01      	subs	r3, #1
 800c63e:	2b00      	cmp	r3, #0
 800c640:	b410      	push	{r4}
 800c642:	6093      	str	r3, [r2, #8]
 800c644:	da08      	bge.n	800c658 <__sfputc_r+0x1e>
 800c646:	6994      	ldr	r4, [r2, #24]
 800c648:	42a3      	cmp	r3, r4
 800c64a:	db01      	blt.n	800c650 <__sfputc_r+0x16>
 800c64c:	290a      	cmp	r1, #10
 800c64e:	d103      	bne.n	800c658 <__sfputc_r+0x1e>
 800c650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c654:	f000 b932 	b.w	800c8bc <__swbuf_r>
 800c658:	6813      	ldr	r3, [r2, #0]
 800c65a:	1c58      	adds	r0, r3, #1
 800c65c:	6010      	str	r0, [r2, #0]
 800c65e:	7019      	strb	r1, [r3, #0]
 800c660:	4608      	mov	r0, r1
 800c662:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <__sfputs_r>:
 800c668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66a:	4606      	mov	r6, r0
 800c66c:	460f      	mov	r7, r1
 800c66e:	4614      	mov	r4, r2
 800c670:	18d5      	adds	r5, r2, r3
 800c672:	42ac      	cmp	r4, r5
 800c674:	d101      	bne.n	800c67a <__sfputs_r+0x12>
 800c676:	2000      	movs	r0, #0
 800c678:	e007      	b.n	800c68a <__sfputs_r+0x22>
 800c67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c67e:	463a      	mov	r2, r7
 800c680:	4630      	mov	r0, r6
 800c682:	f7ff ffda 	bl	800c63a <__sfputc_r>
 800c686:	1c43      	adds	r3, r0, #1
 800c688:	d1f3      	bne.n	800c672 <__sfputs_r+0xa>
 800c68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c68c <_vfiprintf_r>:
 800c68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	460d      	mov	r5, r1
 800c692:	b09d      	sub	sp, #116	@ 0x74
 800c694:	4614      	mov	r4, r2
 800c696:	4698      	mov	r8, r3
 800c698:	4606      	mov	r6, r0
 800c69a:	b118      	cbz	r0, 800c6a4 <_vfiprintf_r+0x18>
 800c69c:	6a03      	ldr	r3, [r0, #32]
 800c69e:	b90b      	cbnz	r3, 800c6a4 <_vfiprintf_r+0x18>
 800c6a0:	f7fc fdc6 	bl	8009230 <__sinit>
 800c6a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6a6:	07d9      	lsls	r1, r3, #31
 800c6a8:	d405      	bmi.n	800c6b6 <_vfiprintf_r+0x2a>
 800c6aa:	89ab      	ldrh	r3, [r5, #12]
 800c6ac:	059a      	lsls	r2, r3, #22
 800c6ae:	d402      	bmi.n	800c6b6 <_vfiprintf_r+0x2a>
 800c6b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6b2:	f7fc ff08 	bl	80094c6 <__retarget_lock_acquire_recursive>
 800c6b6:	89ab      	ldrh	r3, [r5, #12]
 800c6b8:	071b      	lsls	r3, r3, #28
 800c6ba:	d501      	bpl.n	800c6c0 <_vfiprintf_r+0x34>
 800c6bc:	692b      	ldr	r3, [r5, #16]
 800c6be:	b99b      	cbnz	r3, 800c6e8 <_vfiprintf_r+0x5c>
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	f000 f938 	bl	800c938 <__swsetup_r>
 800c6c8:	b170      	cbz	r0, 800c6e8 <_vfiprintf_r+0x5c>
 800c6ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6cc:	07dc      	lsls	r4, r3, #31
 800c6ce:	d504      	bpl.n	800c6da <_vfiprintf_r+0x4e>
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d4:	b01d      	add	sp, #116	@ 0x74
 800c6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6da:	89ab      	ldrh	r3, [r5, #12]
 800c6dc:	0598      	lsls	r0, r3, #22
 800c6de:	d4f7      	bmi.n	800c6d0 <_vfiprintf_r+0x44>
 800c6e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6e2:	f7fc fef1 	bl	80094c8 <__retarget_lock_release_recursive>
 800c6e6:	e7f3      	b.n	800c6d0 <_vfiprintf_r+0x44>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6ec:	2320      	movs	r3, #32
 800c6ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6f6:	2330      	movs	r3, #48	@ 0x30
 800c6f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c8a8 <_vfiprintf_r+0x21c>
 800c6fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c700:	f04f 0901 	mov.w	r9, #1
 800c704:	4623      	mov	r3, r4
 800c706:	469a      	mov	sl, r3
 800c708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c70c:	b10a      	cbz	r2, 800c712 <_vfiprintf_r+0x86>
 800c70e:	2a25      	cmp	r2, #37	@ 0x25
 800c710:	d1f9      	bne.n	800c706 <_vfiprintf_r+0x7a>
 800c712:	ebba 0b04 	subs.w	fp, sl, r4
 800c716:	d00b      	beq.n	800c730 <_vfiprintf_r+0xa4>
 800c718:	465b      	mov	r3, fp
 800c71a:	4622      	mov	r2, r4
 800c71c:	4629      	mov	r1, r5
 800c71e:	4630      	mov	r0, r6
 800c720:	f7ff ffa2 	bl	800c668 <__sfputs_r>
 800c724:	3001      	adds	r0, #1
 800c726:	f000 80a7 	beq.w	800c878 <_vfiprintf_r+0x1ec>
 800c72a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c72c:	445a      	add	r2, fp
 800c72e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c730:	f89a 3000 	ldrb.w	r3, [sl]
 800c734:	2b00      	cmp	r3, #0
 800c736:	f000 809f 	beq.w	800c878 <_vfiprintf_r+0x1ec>
 800c73a:	2300      	movs	r3, #0
 800c73c:	f04f 32ff 	mov.w	r2, #4294967295
 800c740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c744:	f10a 0a01 	add.w	sl, sl, #1
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	9307      	str	r3, [sp, #28]
 800c74c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c750:	931a      	str	r3, [sp, #104]	@ 0x68
 800c752:	4654      	mov	r4, sl
 800c754:	2205      	movs	r2, #5
 800c756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75a:	4853      	ldr	r0, [pc, #332]	@ (800c8a8 <_vfiprintf_r+0x21c>)
 800c75c:	f7f3 fd38 	bl	80001d0 <memchr>
 800c760:	9a04      	ldr	r2, [sp, #16]
 800c762:	b9d8      	cbnz	r0, 800c79c <_vfiprintf_r+0x110>
 800c764:	06d1      	lsls	r1, r2, #27
 800c766:	bf44      	itt	mi
 800c768:	2320      	movmi	r3, #32
 800c76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c76e:	0713      	lsls	r3, r2, #28
 800c770:	bf44      	itt	mi
 800c772:	232b      	movmi	r3, #43	@ 0x2b
 800c774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c778:	f89a 3000 	ldrb.w	r3, [sl]
 800c77c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c77e:	d015      	beq.n	800c7ac <_vfiprintf_r+0x120>
 800c780:	9a07      	ldr	r2, [sp, #28]
 800c782:	4654      	mov	r4, sl
 800c784:	2000      	movs	r0, #0
 800c786:	f04f 0c0a 	mov.w	ip, #10
 800c78a:	4621      	mov	r1, r4
 800c78c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c790:	3b30      	subs	r3, #48	@ 0x30
 800c792:	2b09      	cmp	r3, #9
 800c794:	d94b      	bls.n	800c82e <_vfiprintf_r+0x1a2>
 800c796:	b1b0      	cbz	r0, 800c7c6 <_vfiprintf_r+0x13a>
 800c798:	9207      	str	r2, [sp, #28]
 800c79a:	e014      	b.n	800c7c6 <_vfiprintf_r+0x13a>
 800c79c:	eba0 0308 	sub.w	r3, r0, r8
 800c7a0:	fa09 f303 	lsl.w	r3, r9, r3
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	9304      	str	r3, [sp, #16]
 800c7a8:	46a2      	mov	sl, r4
 800c7aa:	e7d2      	b.n	800c752 <_vfiprintf_r+0xc6>
 800c7ac:	9b03      	ldr	r3, [sp, #12]
 800c7ae:	1d19      	adds	r1, r3, #4
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	9103      	str	r1, [sp, #12]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	bfbb      	ittet	lt
 800c7b8:	425b      	neglt	r3, r3
 800c7ba:	f042 0202 	orrlt.w	r2, r2, #2
 800c7be:	9307      	strge	r3, [sp, #28]
 800c7c0:	9307      	strlt	r3, [sp, #28]
 800c7c2:	bfb8      	it	lt
 800c7c4:	9204      	strlt	r2, [sp, #16]
 800c7c6:	7823      	ldrb	r3, [r4, #0]
 800c7c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7ca:	d10a      	bne.n	800c7e2 <_vfiprintf_r+0x156>
 800c7cc:	7863      	ldrb	r3, [r4, #1]
 800c7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7d0:	d132      	bne.n	800c838 <_vfiprintf_r+0x1ac>
 800c7d2:	9b03      	ldr	r3, [sp, #12]
 800c7d4:	1d1a      	adds	r2, r3, #4
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	9203      	str	r2, [sp, #12]
 800c7da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7de:	3402      	adds	r4, #2
 800c7e0:	9305      	str	r3, [sp, #20]
 800c7e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c8b8 <_vfiprintf_r+0x22c>
 800c7e6:	7821      	ldrb	r1, [r4, #0]
 800c7e8:	2203      	movs	r2, #3
 800c7ea:	4650      	mov	r0, sl
 800c7ec:	f7f3 fcf0 	bl	80001d0 <memchr>
 800c7f0:	b138      	cbz	r0, 800c802 <_vfiprintf_r+0x176>
 800c7f2:	9b04      	ldr	r3, [sp, #16]
 800c7f4:	eba0 000a 	sub.w	r0, r0, sl
 800c7f8:	2240      	movs	r2, #64	@ 0x40
 800c7fa:	4082      	lsls	r2, r0
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	3401      	adds	r4, #1
 800c800:	9304      	str	r3, [sp, #16]
 800c802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c806:	4829      	ldr	r0, [pc, #164]	@ (800c8ac <_vfiprintf_r+0x220>)
 800c808:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c80c:	2206      	movs	r2, #6
 800c80e:	f7f3 fcdf 	bl	80001d0 <memchr>
 800c812:	2800      	cmp	r0, #0
 800c814:	d03f      	beq.n	800c896 <_vfiprintf_r+0x20a>
 800c816:	4b26      	ldr	r3, [pc, #152]	@ (800c8b0 <_vfiprintf_r+0x224>)
 800c818:	bb1b      	cbnz	r3, 800c862 <_vfiprintf_r+0x1d6>
 800c81a:	9b03      	ldr	r3, [sp, #12]
 800c81c:	3307      	adds	r3, #7
 800c81e:	f023 0307 	bic.w	r3, r3, #7
 800c822:	3308      	adds	r3, #8
 800c824:	9303      	str	r3, [sp, #12]
 800c826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c828:	443b      	add	r3, r7
 800c82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c82c:	e76a      	b.n	800c704 <_vfiprintf_r+0x78>
 800c82e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c832:	460c      	mov	r4, r1
 800c834:	2001      	movs	r0, #1
 800c836:	e7a8      	b.n	800c78a <_vfiprintf_r+0xfe>
 800c838:	2300      	movs	r3, #0
 800c83a:	3401      	adds	r4, #1
 800c83c:	9305      	str	r3, [sp, #20]
 800c83e:	4619      	mov	r1, r3
 800c840:	f04f 0c0a 	mov.w	ip, #10
 800c844:	4620      	mov	r0, r4
 800c846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c84a:	3a30      	subs	r2, #48	@ 0x30
 800c84c:	2a09      	cmp	r2, #9
 800c84e:	d903      	bls.n	800c858 <_vfiprintf_r+0x1cc>
 800c850:	2b00      	cmp	r3, #0
 800c852:	d0c6      	beq.n	800c7e2 <_vfiprintf_r+0x156>
 800c854:	9105      	str	r1, [sp, #20]
 800c856:	e7c4      	b.n	800c7e2 <_vfiprintf_r+0x156>
 800c858:	fb0c 2101 	mla	r1, ip, r1, r2
 800c85c:	4604      	mov	r4, r0
 800c85e:	2301      	movs	r3, #1
 800c860:	e7f0      	b.n	800c844 <_vfiprintf_r+0x1b8>
 800c862:	ab03      	add	r3, sp, #12
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	462a      	mov	r2, r5
 800c868:	4b12      	ldr	r3, [pc, #72]	@ (800c8b4 <_vfiprintf_r+0x228>)
 800c86a:	a904      	add	r1, sp, #16
 800c86c:	4630      	mov	r0, r6
 800c86e:	f7fb fe87 	bl	8008580 <_printf_float>
 800c872:	4607      	mov	r7, r0
 800c874:	1c78      	adds	r0, r7, #1
 800c876:	d1d6      	bne.n	800c826 <_vfiprintf_r+0x19a>
 800c878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c87a:	07d9      	lsls	r1, r3, #31
 800c87c:	d405      	bmi.n	800c88a <_vfiprintf_r+0x1fe>
 800c87e:	89ab      	ldrh	r3, [r5, #12]
 800c880:	059a      	lsls	r2, r3, #22
 800c882:	d402      	bmi.n	800c88a <_vfiprintf_r+0x1fe>
 800c884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c886:	f7fc fe1f 	bl	80094c8 <__retarget_lock_release_recursive>
 800c88a:	89ab      	ldrh	r3, [r5, #12]
 800c88c:	065b      	lsls	r3, r3, #25
 800c88e:	f53f af1f 	bmi.w	800c6d0 <_vfiprintf_r+0x44>
 800c892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c894:	e71e      	b.n	800c6d4 <_vfiprintf_r+0x48>
 800c896:	ab03      	add	r3, sp, #12
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	462a      	mov	r2, r5
 800c89c:	4b05      	ldr	r3, [pc, #20]	@ (800c8b4 <_vfiprintf_r+0x228>)
 800c89e:	a904      	add	r1, sp, #16
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f7fc f905 	bl	8008ab0 <_printf_i>
 800c8a6:	e7e4      	b.n	800c872 <_vfiprintf_r+0x1e6>
 800c8a8:	0800d5c1 	.word	0x0800d5c1
 800c8ac:	0800d5cb 	.word	0x0800d5cb
 800c8b0:	08008581 	.word	0x08008581
 800c8b4:	0800c669 	.word	0x0800c669
 800c8b8:	0800d5c7 	.word	0x0800d5c7

0800c8bc <__swbuf_r>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	460e      	mov	r6, r1
 800c8c0:	4614      	mov	r4, r2
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	b118      	cbz	r0, 800c8ce <__swbuf_r+0x12>
 800c8c6:	6a03      	ldr	r3, [r0, #32]
 800c8c8:	b90b      	cbnz	r3, 800c8ce <__swbuf_r+0x12>
 800c8ca:	f7fc fcb1 	bl	8009230 <__sinit>
 800c8ce:	69a3      	ldr	r3, [r4, #24]
 800c8d0:	60a3      	str	r3, [r4, #8]
 800c8d2:	89a3      	ldrh	r3, [r4, #12]
 800c8d4:	071a      	lsls	r2, r3, #28
 800c8d6:	d501      	bpl.n	800c8dc <__swbuf_r+0x20>
 800c8d8:	6923      	ldr	r3, [r4, #16]
 800c8da:	b943      	cbnz	r3, 800c8ee <__swbuf_r+0x32>
 800c8dc:	4621      	mov	r1, r4
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f000 f82a 	bl	800c938 <__swsetup_r>
 800c8e4:	b118      	cbz	r0, 800c8ee <__swbuf_r+0x32>
 800c8e6:	f04f 37ff 	mov.w	r7, #4294967295
 800c8ea:	4638      	mov	r0, r7
 800c8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	6922      	ldr	r2, [r4, #16]
 800c8f2:	1a98      	subs	r0, r3, r2
 800c8f4:	6963      	ldr	r3, [r4, #20]
 800c8f6:	b2f6      	uxtb	r6, r6
 800c8f8:	4283      	cmp	r3, r0
 800c8fa:	4637      	mov	r7, r6
 800c8fc:	dc05      	bgt.n	800c90a <__swbuf_r+0x4e>
 800c8fe:	4621      	mov	r1, r4
 800c900:	4628      	mov	r0, r5
 800c902:	f7ff fa47 	bl	800bd94 <_fflush_r>
 800c906:	2800      	cmp	r0, #0
 800c908:	d1ed      	bne.n	800c8e6 <__swbuf_r+0x2a>
 800c90a:	68a3      	ldr	r3, [r4, #8]
 800c90c:	3b01      	subs	r3, #1
 800c90e:	60a3      	str	r3, [r4, #8]
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	6022      	str	r2, [r4, #0]
 800c916:	701e      	strb	r6, [r3, #0]
 800c918:	6962      	ldr	r2, [r4, #20]
 800c91a:	1c43      	adds	r3, r0, #1
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d004      	beq.n	800c92a <__swbuf_r+0x6e>
 800c920:	89a3      	ldrh	r3, [r4, #12]
 800c922:	07db      	lsls	r3, r3, #31
 800c924:	d5e1      	bpl.n	800c8ea <__swbuf_r+0x2e>
 800c926:	2e0a      	cmp	r6, #10
 800c928:	d1df      	bne.n	800c8ea <__swbuf_r+0x2e>
 800c92a:	4621      	mov	r1, r4
 800c92c:	4628      	mov	r0, r5
 800c92e:	f7ff fa31 	bl	800bd94 <_fflush_r>
 800c932:	2800      	cmp	r0, #0
 800c934:	d0d9      	beq.n	800c8ea <__swbuf_r+0x2e>
 800c936:	e7d6      	b.n	800c8e6 <__swbuf_r+0x2a>

0800c938 <__swsetup_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4b29      	ldr	r3, [pc, #164]	@ (800c9e0 <__swsetup_r+0xa8>)
 800c93c:	4605      	mov	r5, r0
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	460c      	mov	r4, r1
 800c942:	b118      	cbz	r0, 800c94c <__swsetup_r+0x14>
 800c944:	6a03      	ldr	r3, [r0, #32]
 800c946:	b90b      	cbnz	r3, 800c94c <__swsetup_r+0x14>
 800c948:	f7fc fc72 	bl	8009230 <__sinit>
 800c94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c950:	0719      	lsls	r1, r3, #28
 800c952:	d422      	bmi.n	800c99a <__swsetup_r+0x62>
 800c954:	06da      	lsls	r2, r3, #27
 800c956:	d407      	bmi.n	800c968 <__swsetup_r+0x30>
 800c958:	2209      	movs	r2, #9
 800c95a:	602a      	str	r2, [r5, #0]
 800c95c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c960:	81a3      	strh	r3, [r4, #12]
 800c962:	f04f 30ff 	mov.w	r0, #4294967295
 800c966:	e033      	b.n	800c9d0 <__swsetup_r+0x98>
 800c968:	0758      	lsls	r0, r3, #29
 800c96a:	d512      	bpl.n	800c992 <__swsetup_r+0x5a>
 800c96c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c96e:	b141      	cbz	r1, 800c982 <__swsetup_r+0x4a>
 800c970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c974:	4299      	cmp	r1, r3
 800c976:	d002      	beq.n	800c97e <__swsetup_r+0x46>
 800c978:	4628      	mov	r0, r5
 800c97a:	f7fd fbf9 	bl	800a170 <_free_r>
 800c97e:	2300      	movs	r3, #0
 800c980:	6363      	str	r3, [r4, #52]	@ 0x34
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c988:	81a3      	strh	r3, [r4, #12]
 800c98a:	2300      	movs	r3, #0
 800c98c:	6063      	str	r3, [r4, #4]
 800c98e:	6923      	ldr	r3, [r4, #16]
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	f043 0308 	orr.w	r3, r3, #8
 800c998:	81a3      	strh	r3, [r4, #12]
 800c99a:	6923      	ldr	r3, [r4, #16]
 800c99c:	b94b      	cbnz	r3, 800c9b2 <__swsetup_r+0x7a>
 800c99e:	89a3      	ldrh	r3, [r4, #12]
 800c9a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9a8:	d003      	beq.n	800c9b2 <__swsetup_r+0x7a>
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f000 f883 	bl	800cab8 <__smakebuf_r>
 800c9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b6:	f013 0201 	ands.w	r2, r3, #1
 800c9ba:	d00a      	beq.n	800c9d2 <__swsetup_r+0x9a>
 800c9bc:	2200      	movs	r2, #0
 800c9be:	60a2      	str	r2, [r4, #8]
 800c9c0:	6962      	ldr	r2, [r4, #20]
 800c9c2:	4252      	negs	r2, r2
 800c9c4:	61a2      	str	r2, [r4, #24]
 800c9c6:	6922      	ldr	r2, [r4, #16]
 800c9c8:	b942      	cbnz	r2, 800c9dc <__swsetup_r+0xa4>
 800c9ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c9ce:	d1c5      	bne.n	800c95c <__swsetup_r+0x24>
 800c9d0:	bd38      	pop	{r3, r4, r5, pc}
 800c9d2:	0799      	lsls	r1, r3, #30
 800c9d4:	bf58      	it	pl
 800c9d6:	6962      	ldrpl	r2, [r4, #20]
 800c9d8:	60a2      	str	r2, [r4, #8]
 800c9da:	e7f4      	b.n	800c9c6 <__swsetup_r+0x8e>
 800c9dc:	2000      	movs	r0, #0
 800c9de:	e7f7      	b.n	800c9d0 <__swsetup_r+0x98>
 800c9e0:	20000018 	.word	0x20000018

0800c9e4 <_raise_r>:
 800c9e4:	291f      	cmp	r1, #31
 800c9e6:	b538      	push	{r3, r4, r5, lr}
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	d904      	bls.n	800c9f8 <_raise_r+0x14>
 800c9ee:	2316      	movs	r3, #22
 800c9f0:	6003      	str	r3, [r0, #0]
 800c9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f6:	bd38      	pop	{r3, r4, r5, pc}
 800c9f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c9fa:	b112      	cbz	r2, 800ca02 <_raise_r+0x1e>
 800c9fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca00:	b94b      	cbnz	r3, 800ca16 <_raise_r+0x32>
 800ca02:	4628      	mov	r0, r5
 800ca04:	f000 f830 	bl	800ca68 <_getpid_r>
 800ca08:	4622      	mov	r2, r4
 800ca0a:	4601      	mov	r1, r0
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca12:	f000 b817 	b.w	800ca44 <_kill_r>
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d00a      	beq.n	800ca30 <_raise_r+0x4c>
 800ca1a:	1c59      	adds	r1, r3, #1
 800ca1c:	d103      	bne.n	800ca26 <_raise_r+0x42>
 800ca1e:	2316      	movs	r3, #22
 800ca20:	6003      	str	r3, [r0, #0]
 800ca22:	2001      	movs	r0, #1
 800ca24:	e7e7      	b.n	800c9f6 <_raise_r+0x12>
 800ca26:	2100      	movs	r1, #0
 800ca28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	4798      	blx	r3
 800ca30:	2000      	movs	r0, #0
 800ca32:	e7e0      	b.n	800c9f6 <_raise_r+0x12>

0800ca34 <raise>:
 800ca34:	4b02      	ldr	r3, [pc, #8]	@ (800ca40 <raise+0xc>)
 800ca36:	4601      	mov	r1, r0
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	f7ff bfd3 	b.w	800c9e4 <_raise_r>
 800ca3e:	bf00      	nop
 800ca40:	20000018 	.word	0x20000018

0800ca44 <_kill_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	4d07      	ldr	r5, [pc, #28]	@ (800ca64 <_kill_r+0x20>)
 800ca48:	2300      	movs	r3, #0
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	4608      	mov	r0, r1
 800ca4e:	4611      	mov	r1, r2
 800ca50:	602b      	str	r3, [r5, #0]
 800ca52:	f7f5 fe5b 	bl	800270c <_kill>
 800ca56:	1c43      	adds	r3, r0, #1
 800ca58:	d102      	bne.n	800ca60 <_kill_r+0x1c>
 800ca5a:	682b      	ldr	r3, [r5, #0]
 800ca5c:	b103      	cbz	r3, 800ca60 <_kill_r+0x1c>
 800ca5e:	6023      	str	r3, [r4, #0]
 800ca60:	bd38      	pop	{r3, r4, r5, pc}
 800ca62:	bf00      	nop
 800ca64:	20000bb4 	.word	0x20000bb4

0800ca68 <_getpid_r>:
 800ca68:	f7f5 be48 	b.w	80026fc <_getpid>

0800ca6c <__swhatbuf_r>:
 800ca6c:	b570      	push	{r4, r5, r6, lr}
 800ca6e:	460c      	mov	r4, r1
 800ca70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca74:	2900      	cmp	r1, #0
 800ca76:	b096      	sub	sp, #88	@ 0x58
 800ca78:	4615      	mov	r5, r2
 800ca7a:	461e      	mov	r6, r3
 800ca7c:	da0d      	bge.n	800ca9a <__swhatbuf_r+0x2e>
 800ca7e:	89a3      	ldrh	r3, [r4, #12]
 800ca80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca84:	f04f 0100 	mov.w	r1, #0
 800ca88:	bf14      	ite	ne
 800ca8a:	2340      	movne	r3, #64	@ 0x40
 800ca8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca90:	2000      	movs	r0, #0
 800ca92:	6031      	str	r1, [r6, #0]
 800ca94:	602b      	str	r3, [r5, #0]
 800ca96:	b016      	add	sp, #88	@ 0x58
 800ca98:	bd70      	pop	{r4, r5, r6, pc}
 800ca9a:	466a      	mov	r2, sp
 800ca9c:	f000 f848 	bl	800cb30 <_fstat_r>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	dbec      	blt.n	800ca7e <__swhatbuf_r+0x12>
 800caa4:	9901      	ldr	r1, [sp, #4]
 800caa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800caaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800caae:	4259      	negs	r1, r3
 800cab0:	4159      	adcs	r1, r3
 800cab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cab6:	e7eb      	b.n	800ca90 <__swhatbuf_r+0x24>

0800cab8 <__smakebuf_r>:
 800cab8:	898b      	ldrh	r3, [r1, #12]
 800caba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cabc:	079d      	lsls	r5, r3, #30
 800cabe:	4606      	mov	r6, r0
 800cac0:	460c      	mov	r4, r1
 800cac2:	d507      	bpl.n	800cad4 <__smakebuf_r+0x1c>
 800cac4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	6123      	str	r3, [r4, #16]
 800cacc:	2301      	movs	r3, #1
 800cace:	6163      	str	r3, [r4, #20]
 800cad0:	b003      	add	sp, #12
 800cad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cad4:	ab01      	add	r3, sp, #4
 800cad6:	466a      	mov	r2, sp
 800cad8:	f7ff ffc8 	bl	800ca6c <__swhatbuf_r>
 800cadc:	9f00      	ldr	r7, [sp, #0]
 800cade:	4605      	mov	r5, r0
 800cae0:	4639      	mov	r1, r7
 800cae2:	4630      	mov	r0, r6
 800cae4:	f7fd fbb8 	bl	800a258 <_malloc_r>
 800cae8:	b948      	cbnz	r0, 800cafe <__smakebuf_r+0x46>
 800caea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caee:	059a      	lsls	r2, r3, #22
 800caf0:	d4ee      	bmi.n	800cad0 <__smakebuf_r+0x18>
 800caf2:	f023 0303 	bic.w	r3, r3, #3
 800caf6:	f043 0302 	orr.w	r3, r3, #2
 800cafa:	81a3      	strh	r3, [r4, #12]
 800cafc:	e7e2      	b.n	800cac4 <__smakebuf_r+0xc>
 800cafe:	89a3      	ldrh	r3, [r4, #12]
 800cb00:	6020      	str	r0, [r4, #0]
 800cb02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb06:	81a3      	strh	r3, [r4, #12]
 800cb08:	9b01      	ldr	r3, [sp, #4]
 800cb0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb0e:	b15b      	cbz	r3, 800cb28 <__smakebuf_r+0x70>
 800cb10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb14:	4630      	mov	r0, r6
 800cb16:	f000 f81d 	bl	800cb54 <_isatty_r>
 800cb1a:	b128      	cbz	r0, 800cb28 <__smakebuf_r+0x70>
 800cb1c:	89a3      	ldrh	r3, [r4, #12]
 800cb1e:	f023 0303 	bic.w	r3, r3, #3
 800cb22:	f043 0301 	orr.w	r3, r3, #1
 800cb26:	81a3      	strh	r3, [r4, #12]
 800cb28:	89a3      	ldrh	r3, [r4, #12]
 800cb2a:	431d      	orrs	r5, r3
 800cb2c:	81a5      	strh	r5, [r4, #12]
 800cb2e:	e7cf      	b.n	800cad0 <__smakebuf_r+0x18>

0800cb30 <_fstat_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4d07      	ldr	r5, [pc, #28]	@ (800cb50 <_fstat_r+0x20>)
 800cb34:	2300      	movs	r3, #0
 800cb36:	4604      	mov	r4, r0
 800cb38:	4608      	mov	r0, r1
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	602b      	str	r3, [r5, #0]
 800cb3e:	f7f5 fe45 	bl	80027cc <_fstat>
 800cb42:	1c43      	adds	r3, r0, #1
 800cb44:	d102      	bne.n	800cb4c <_fstat_r+0x1c>
 800cb46:	682b      	ldr	r3, [r5, #0]
 800cb48:	b103      	cbz	r3, 800cb4c <_fstat_r+0x1c>
 800cb4a:	6023      	str	r3, [r4, #0]
 800cb4c:	bd38      	pop	{r3, r4, r5, pc}
 800cb4e:	bf00      	nop
 800cb50:	20000bb4 	.word	0x20000bb4

0800cb54 <_isatty_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4d06      	ldr	r5, [pc, #24]	@ (800cb70 <_isatty_r+0x1c>)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	602b      	str	r3, [r5, #0]
 800cb60:	f7f5 fe44 	bl	80027ec <_isatty>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_isatty_r+0x1a>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_isatty_r+0x1a>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	20000bb4 	.word	0x20000bb4
 800cb74:	00000000 	.word	0x00000000

0800cb78 <log10>:
 800cb78:	b538      	push	{r3, r4, r5, lr}
 800cb7a:	ed2d 8b02 	vpush	{d8}
 800cb7e:	ec55 4b10 	vmov	r4, r5, d0
 800cb82:	f000 f839 	bl	800cbf8 <__ieee754_log10>
 800cb86:	4622      	mov	r2, r4
 800cb88:	462b      	mov	r3, r5
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	eeb0 8a40 	vmov.f32	s16, s0
 800cb92:	eef0 8a60 	vmov.f32	s17, s1
 800cb96:	f7f3 ffc9 	bl	8000b2c <__aeabi_dcmpun>
 800cb9a:	b998      	cbnz	r0, 800cbc4 <log10+0x4c>
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2300      	movs	r3, #0
 800cba0:	4620      	mov	r0, r4
 800cba2:	4629      	mov	r1, r5
 800cba4:	f7f3 ffa4 	bl	8000af0 <__aeabi_dcmple>
 800cba8:	b160      	cbz	r0, 800cbc4 <log10+0x4c>
 800cbaa:	2200      	movs	r2, #0
 800cbac:	2300      	movs	r3, #0
 800cbae:	4620      	mov	r0, r4
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	f7f3 ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbb6:	b160      	cbz	r0, 800cbd2 <log10+0x5a>
 800cbb8:	f7fc fc5a 	bl	8009470 <__errno>
 800cbbc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800cbe8 <log10+0x70>
 800cbc0:	2322      	movs	r3, #34	@ 0x22
 800cbc2:	6003      	str	r3, [r0, #0]
 800cbc4:	eeb0 0a48 	vmov.f32	s0, s16
 800cbc8:	eef0 0a68 	vmov.f32	s1, s17
 800cbcc:	ecbd 8b02 	vpop	{d8}
 800cbd0:	bd38      	pop	{r3, r4, r5, pc}
 800cbd2:	f7fc fc4d 	bl	8009470 <__errno>
 800cbd6:	ecbd 8b02 	vpop	{d8}
 800cbda:	2321      	movs	r3, #33	@ 0x21
 800cbdc:	6003      	str	r3, [r0, #0]
 800cbde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbe2:	4803      	ldr	r0, [pc, #12]	@ (800cbf0 <log10+0x78>)
 800cbe4:	f7ff b948 	b.w	800be78 <nan>
 800cbe8:	00000000 	.word	0x00000000
 800cbec:	fff00000 	.word	0xfff00000
 800cbf0:	0800d615 	.word	0x0800d615
 800cbf4:	00000000 	.word	0x00000000

0800cbf8 <__ieee754_log10>:
 800cbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbfc:	ec55 4b10 	vmov	r4, r5, d0
 800cc00:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800cc04:	ed2d 8b02 	vpush	{d8}
 800cc08:	462b      	mov	r3, r5
 800cc0a:	da2e      	bge.n	800cc6a <__ieee754_log10+0x72>
 800cc0c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cc10:	4322      	orrs	r2, r4
 800cc12:	d10b      	bne.n	800cc2c <__ieee754_log10+0x34>
 800cc14:	493a      	ldr	r1, [pc, #232]	@ (800cd00 <__ieee754_log10+0x108>)
 800cc16:	2200      	movs	r2, #0
 800cc18:	2300      	movs	r3, #0
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	f7f3 fe16 	bl	800084c <__aeabi_ddiv>
 800cc20:	ecbd 8b02 	vpop	{d8}
 800cc24:	ec41 0b10 	vmov	d0, r0, r1
 800cc28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc2c:	2d00      	cmp	r5, #0
 800cc2e:	da07      	bge.n	800cc40 <__ieee754_log10+0x48>
 800cc30:	4622      	mov	r2, r4
 800cc32:	4620      	mov	r0, r4
 800cc34:	4629      	mov	r1, r5
 800cc36:	f7f3 fb27 	bl	8000288 <__aeabi_dsub>
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	e7ed      	b.n	800cc1c <__ieee754_log10+0x24>
 800cc40:	4b30      	ldr	r3, [pc, #192]	@ (800cd04 <__ieee754_log10+0x10c>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	4620      	mov	r0, r4
 800cc46:	4629      	mov	r1, r5
 800cc48:	f7f3 fcd6 	bl	80005f8 <__aeabi_dmul>
 800cc4c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800cc50:	4604      	mov	r4, r0
 800cc52:	460d      	mov	r5, r1
 800cc54:	460b      	mov	r3, r1
 800cc56:	492c      	ldr	r1, [pc, #176]	@ (800cd08 <__ieee754_log10+0x110>)
 800cc58:	428b      	cmp	r3, r1
 800cc5a:	dd08      	ble.n	800cc6e <__ieee754_log10+0x76>
 800cc5c:	4622      	mov	r2, r4
 800cc5e:	462b      	mov	r3, r5
 800cc60:	4620      	mov	r0, r4
 800cc62:	4629      	mov	r1, r5
 800cc64:	f7f3 fb12 	bl	800028c <__adddf3>
 800cc68:	e7da      	b.n	800cc20 <__ieee754_log10+0x28>
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	e7f3      	b.n	800cc56 <__ieee754_log10+0x5e>
 800cc6e:	1518      	asrs	r0, r3, #20
 800cc70:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800cc74:	4410      	add	r0, r2
 800cc76:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800cc7a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800cc7e:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800cc82:	f7f3 fc4f 	bl	8000524 <__aeabi_i2d>
 800cc86:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800cc8a:	3303      	adds	r3, #3
 800cc8c:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800cc90:	a315      	add	r3, pc, #84	@ (adr r3, 800cce8 <__ieee754_log10+0xf0>)
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	ec45 4b18 	vmov	d8, r4, r5
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	460f      	mov	r7, r1
 800cc9e:	f7f3 fcab 	bl	80005f8 <__aeabi_dmul>
 800cca2:	eeb0 0a48 	vmov.f32	s0, s16
 800cca6:	eef0 0a68 	vmov.f32	s1, s17
 800ccaa:	4604      	mov	r4, r0
 800ccac:	460d      	mov	r5, r1
 800ccae:	f000 f82f 	bl	800cd10 <__ieee754_log>
 800ccb2:	a30f      	add	r3, pc, #60	@ (adr r3, 800ccf0 <__ieee754_log10+0xf8>)
 800ccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb8:	ec51 0b10 	vmov	r0, r1, d0
 800ccbc:	f7f3 fc9c 	bl	80005f8 <__aeabi_dmul>
 800ccc0:	4622      	mov	r2, r4
 800ccc2:	462b      	mov	r3, r5
 800ccc4:	f7f3 fae2 	bl	800028c <__adddf3>
 800ccc8:	a30b      	add	r3, pc, #44	@ (adr r3, 800ccf8 <__ieee754_log10+0x100>)
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	4604      	mov	r4, r0
 800ccd0:	460d      	mov	r5, r1
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	4639      	mov	r1, r7
 800ccd6:	f7f3 fc8f 	bl	80005f8 <__aeabi_dmul>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	460b      	mov	r3, r1
 800ccde:	4620      	mov	r0, r4
 800cce0:	4629      	mov	r1, r5
 800cce2:	e7bf      	b.n	800cc64 <__ieee754_log10+0x6c>
 800cce4:	f3af 8000 	nop.w
 800cce8:	11f12b36 	.word	0x11f12b36
 800ccec:	3d59fef3 	.word	0x3d59fef3
 800ccf0:	1526e50e 	.word	0x1526e50e
 800ccf4:	3fdbcb7b 	.word	0x3fdbcb7b
 800ccf8:	509f6000 	.word	0x509f6000
 800ccfc:	3fd34413 	.word	0x3fd34413
 800cd00:	c3500000 	.word	0xc3500000
 800cd04:	43500000 	.word	0x43500000
 800cd08:	7fefffff 	.word	0x7fefffff
 800cd0c:	00000000 	.word	0x00000000

0800cd10 <__ieee754_log>:
 800cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd14:	ec51 0b10 	vmov	r0, r1, d0
 800cd18:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800cd1c:	b087      	sub	sp, #28
 800cd1e:	460d      	mov	r5, r1
 800cd20:	da26      	bge.n	800cd70 <__ieee754_log+0x60>
 800cd22:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cd26:	4303      	orrs	r3, r0
 800cd28:	4602      	mov	r2, r0
 800cd2a:	d10a      	bne.n	800cd42 <__ieee754_log+0x32>
 800cd2c:	49ce      	ldr	r1, [pc, #824]	@ (800d068 <__ieee754_log+0x358>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	2300      	movs	r3, #0
 800cd32:	2000      	movs	r0, #0
 800cd34:	f7f3 fd8a 	bl	800084c <__aeabi_ddiv>
 800cd38:	ec41 0b10 	vmov	d0, r0, r1
 800cd3c:	b007      	add	sp, #28
 800cd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd42:	2900      	cmp	r1, #0
 800cd44:	da05      	bge.n	800cd52 <__ieee754_log+0x42>
 800cd46:	460b      	mov	r3, r1
 800cd48:	f7f3 fa9e 	bl	8000288 <__aeabi_dsub>
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	2300      	movs	r3, #0
 800cd50:	e7f0      	b.n	800cd34 <__ieee754_log+0x24>
 800cd52:	4bc6      	ldr	r3, [pc, #792]	@ (800d06c <__ieee754_log+0x35c>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	f7f3 fc4f 	bl	80005f8 <__aeabi_dmul>
 800cd5a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800cd5e:	460d      	mov	r5, r1
 800cd60:	4ac3      	ldr	r2, [pc, #780]	@ (800d070 <__ieee754_log+0x360>)
 800cd62:	4295      	cmp	r5, r2
 800cd64:	dd06      	ble.n	800cd74 <__ieee754_log+0x64>
 800cd66:	4602      	mov	r2, r0
 800cd68:	460b      	mov	r3, r1
 800cd6a:	f7f3 fa8f 	bl	800028c <__adddf3>
 800cd6e:	e7e3      	b.n	800cd38 <__ieee754_log+0x28>
 800cd70:	2300      	movs	r3, #0
 800cd72:	e7f5      	b.n	800cd60 <__ieee754_log+0x50>
 800cd74:	152c      	asrs	r4, r5, #20
 800cd76:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800cd7a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cd7e:	441c      	add	r4, r3
 800cd80:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800cd84:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800cd88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cd8c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800cd90:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800cd94:	ea42 0105 	orr.w	r1, r2, r5
 800cd98:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	4bb5      	ldr	r3, [pc, #724]	@ (800d074 <__ieee754_log+0x364>)
 800cda0:	f7f3 fa72 	bl	8000288 <__aeabi_dsub>
 800cda4:	1cab      	adds	r3, r5, #2
 800cda6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	4682      	mov	sl, r0
 800cdae:	468b      	mov	fp, r1
 800cdb0:	f04f 0200 	mov.w	r2, #0
 800cdb4:	dc53      	bgt.n	800ce5e <__ieee754_log+0x14e>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f7f3 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdbc:	b1d0      	cbz	r0, 800cdf4 <__ieee754_log+0xe4>
 800cdbe:	2c00      	cmp	r4, #0
 800cdc0:	f000 8120 	beq.w	800d004 <__ieee754_log+0x2f4>
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f7f3 fbad 	bl	8000524 <__aeabi_i2d>
 800cdca:	a391      	add	r3, pc, #580	@ (adr r3, 800d010 <__ieee754_log+0x300>)
 800cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	460f      	mov	r7, r1
 800cdd4:	f7f3 fc10 	bl	80005f8 <__aeabi_dmul>
 800cdd8:	a38f      	add	r3, pc, #572	@ (adr r3, 800d018 <__ieee754_log+0x308>)
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	4604      	mov	r4, r0
 800cde0:	460d      	mov	r5, r1
 800cde2:	4630      	mov	r0, r6
 800cde4:	4639      	mov	r1, r7
 800cde6:	f7f3 fc07 	bl	80005f8 <__aeabi_dmul>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	4620      	mov	r0, r4
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	e7ba      	b.n	800cd6a <__ieee754_log+0x5a>
 800cdf4:	a38a      	add	r3, pc, #552	@ (adr r3, 800d020 <__ieee754_log+0x310>)
 800cdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfa:	4650      	mov	r0, sl
 800cdfc:	4659      	mov	r1, fp
 800cdfe:	f7f3 fbfb 	bl	80005f8 <__aeabi_dmul>
 800ce02:	4602      	mov	r2, r0
 800ce04:	460b      	mov	r3, r1
 800ce06:	2000      	movs	r0, #0
 800ce08:	499b      	ldr	r1, [pc, #620]	@ (800d078 <__ieee754_log+0x368>)
 800ce0a:	f7f3 fa3d 	bl	8000288 <__aeabi_dsub>
 800ce0e:	4652      	mov	r2, sl
 800ce10:	4606      	mov	r6, r0
 800ce12:	460f      	mov	r7, r1
 800ce14:	465b      	mov	r3, fp
 800ce16:	4650      	mov	r0, sl
 800ce18:	4659      	mov	r1, fp
 800ce1a:	f7f3 fbed 	bl	80005f8 <__aeabi_dmul>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	4630      	mov	r0, r6
 800ce24:	4639      	mov	r1, r7
 800ce26:	f7f3 fbe7 	bl	80005f8 <__aeabi_dmul>
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	460f      	mov	r7, r1
 800ce2e:	b914      	cbnz	r4, 800ce36 <__ieee754_log+0x126>
 800ce30:	4632      	mov	r2, r6
 800ce32:	463b      	mov	r3, r7
 800ce34:	e0a0      	b.n	800cf78 <__ieee754_log+0x268>
 800ce36:	4620      	mov	r0, r4
 800ce38:	f7f3 fb74 	bl	8000524 <__aeabi_i2d>
 800ce3c:	a374      	add	r3, pc, #464	@ (adr r3, 800d010 <__ieee754_log+0x300>)
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	4680      	mov	r8, r0
 800ce44:	4689      	mov	r9, r1
 800ce46:	f7f3 fbd7 	bl	80005f8 <__aeabi_dmul>
 800ce4a:	a373      	add	r3, pc, #460	@ (adr r3, 800d018 <__ieee754_log+0x308>)
 800ce4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce50:	4604      	mov	r4, r0
 800ce52:	460d      	mov	r5, r1
 800ce54:	4640      	mov	r0, r8
 800ce56:	4649      	mov	r1, r9
 800ce58:	f7f3 fbce 	bl	80005f8 <__aeabi_dmul>
 800ce5c:	e0a5      	b.n	800cfaa <__ieee754_log+0x29a>
 800ce5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ce62:	f7f3 fa13 	bl	800028c <__adddf3>
 800ce66:	4602      	mov	r2, r0
 800ce68:	460b      	mov	r3, r1
 800ce6a:	4650      	mov	r0, sl
 800ce6c:	4659      	mov	r1, fp
 800ce6e:	f7f3 fced 	bl	800084c <__aeabi_ddiv>
 800ce72:	e9cd 0100 	strd	r0, r1, [sp]
 800ce76:	4620      	mov	r0, r4
 800ce78:	f7f3 fb54 	bl	8000524 <__aeabi_i2d>
 800ce7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce84:	4610      	mov	r0, r2
 800ce86:	4619      	mov	r1, r3
 800ce88:	f7f3 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce94:	f7f3 fbb0 	bl	80005f8 <__aeabi_dmul>
 800ce98:	a363      	add	r3, pc, #396	@ (adr r3, 800d028 <__ieee754_log+0x318>)
 800ce9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9e:	4680      	mov	r8, r0
 800cea0:	4689      	mov	r9, r1
 800cea2:	f7f3 fba9 	bl	80005f8 <__aeabi_dmul>
 800cea6:	a362      	add	r3, pc, #392	@ (adr r3, 800d030 <__ieee754_log+0x320>)
 800cea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceac:	f7f3 f9ee 	bl	800028c <__adddf3>
 800ceb0:	4642      	mov	r2, r8
 800ceb2:	464b      	mov	r3, r9
 800ceb4:	f7f3 fba0 	bl	80005f8 <__aeabi_dmul>
 800ceb8:	a35f      	add	r3, pc, #380	@ (adr r3, 800d038 <__ieee754_log+0x328>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7f3 f9e5 	bl	800028c <__adddf3>
 800cec2:	4642      	mov	r2, r8
 800cec4:	464b      	mov	r3, r9
 800cec6:	f7f3 fb97 	bl	80005f8 <__aeabi_dmul>
 800ceca:	a35d      	add	r3, pc, #372	@ (adr r3, 800d040 <__ieee754_log+0x330>)
 800cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced0:	f7f3 f9dc 	bl	800028c <__adddf3>
 800ced4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ced8:	f7f3 fb8e 	bl	80005f8 <__aeabi_dmul>
 800cedc:	a35a      	add	r3, pc, #360	@ (adr r3, 800d048 <__ieee754_log+0x338>)
 800cede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cee6:	4640      	mov	r0, r8
 800cee8:	4649      	mov	r1, r9
 800ceea:	f7f3 fb85 	bl	80005f8 <__aeabi_dmul>
 800ceee:	a358      	add	r3, pc, #352	@ (adr r3, 800d050 <__ieee754_log+0x340>)
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	f7f3 f9ca 	bl	800028c <__adddf3>
 800cef8:	4642      	mov	r2, r8
 800cefa:	464b      	mov	r3, r9
 800cefc:	f7f3 fb7c 	bl	80005f8 <__aeabi_dmul>
 800cf00:	a355      	add	r3, pc, #340	@ (adr r3, 800d058 <__ieee754_log+0x348>)
 800cf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf06:	f7f3 f9c1 	bl	800028c <__adddf3>
 800cf0a:	4642      	mov	r2, r8
 800cf0c:	464b      	mov	r3, r9
 800cf0e:	f7f3 fb73 	bl	80005f8 <__aeabi_dmul>
 800cf12:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800cf16:	4602      	mov	r2, r0
 800cf18:	460b      	mov	r3, r1
 800cf1a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800cf1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf22:	f7f3 f9b3 	bl	800028c <__adddf3>
 800cf26:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800cf2a:	3551      	adds	r5, #81	@ 0x51
 800cf2c:	4335      	orrs	r5, r6
 800cf2e:	2d00      	cmp	r5, #0
 800cf30:	4680      	mov	r8, r0
 800cf32:	4689      	mov	r9, r1
 800cf34:	dd48      	ble.n	800cfc8 <__ieee754_log+0x2b8>
 800cf36:	4b50      	ldr	r3, [pc, #320]	@ (800d078 <__ieee754_log+0x368>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	4650      	mov	r0, sl
 800cf3c:	4659      	mov	r1, fp
 800cf3e:	f7f3 fb5b 	bl	80005f8 <__aeabi_dmul>
 800cf42:	4652      	mov	r2, sl
 800cf44:	465b      	mov	r3, fp
 800cf46:	f7f3 fb57 	bl	80005f8 <__aeabi_dmul>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	4606      	mov	r6, r0
 800cf50:	460f      	mov	r7, r1
 800cf52:	4640      	mov	r0, r8
 800cf54:	4649      	mov	r1, r9
 800cf56:	f7f3 f999 	bl	800028c <__adddf3>
 800cf5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf5e:	f7f3 fb4b 	bl	80005f8 <__aeabi_dmul>
 800cf62:	4680      	mov	r8, r0
 800cf64:	4689      	mov	r9, r1
 800cf66:	b964      	cbnz	r4, 800cf82 <__ieee754_log+0x272>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	4639      	mov	r1, r7
 800cf70:	f7f3 f98a 	bl	8000288 <__aeabi_dsub>
 800cf74:	4602      	mov	r2, r0
 800cf76:	460b      	mov	r3, r1
 800cf78:	4650      	mov	r0, sl
 800cf7a:	4659      	mov	r1, fp
 800cf7c:	f7f3 f984 	bl	8000288 <__aeabi_dsub>
 800cf80:	e6da      	b.n	800cd38 <__ieee754_log+0x28>
 800cf82:	a323      	add	r3, pc, #140	@ (adr r3, 800d010 <__ieee754_log+0x300>)
 800cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf8c:	f7f3 fb34 	bl	80005f8 <__aeabi_dmul>
 800cf90:	a321      	add	r3, pc, #132	@ (adr r3, 800d018 <__ieee754_log+0x308>)
 800cf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf96:	4604      	mov	r4, r0
 800cf98:	460d      	mov	r5, r1
 800cf9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf9e:	f7f3 fb2b 	bl	80005f8 <__aeabi_dmul>
 800cfa2:	4642      	mov	r2, r8
 800cfa4:	464b      	mov	r3, r9
 800cfa6:	f7f3 f971 	bl	800028c <__adddf3>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	460b      	mov	r3, r1
 800cfae:	4630      	mov	r0, r6
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	f7f3 f969 	bl	8000288 <__aeabi_dsub>
 800cfb6:	4652      	mov	r2, sl
 800cfb8:	465b      	mov	r3, fp
 800cfba:	f7f3 f965 	bl	8000288 <__aeabi_dsub>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	e7d9      	b.n	800cf7c <__ieee754_log+0x26c>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4650      	mov	r0, sl
 800cfce:	4659      	mov	r1, fp
 800cfd0:	f7f3 f95a 	bl	8000288 <__aeabi_dsub>
 800cfd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfd8:	f7f3 fb0e 	bl	80005f8 <__aeabi_dmul>
 800cfdc:	4606      	mov	r6, r0
 800cfde:	460f      	mov	r7, r1
 800cfe0:	2c00      	cmp	r4, #0
 800cfe2:	f43f af25 	beq.w	800ce30 <__ieee754_log+0x120>
 800cfe6:	a30a      	add	r3, pc, #40	@ (adr r3, 800d010 <__ieee754_log+0x300>)
 800cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cff0:	f7f3 fb02 	bl	80005f8 <__aeabi_dmul>
 800cff4:	a308      	add	r3, pc, #32	@ (adr r3, 800d018 <__ieee754_log+0x308>)
 800cff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffa:	4604      	mov	r4, r0
 800cffc:	460d      	mov	r5, r1
 800cffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d002:	e729      	b.n	800ce58 <__ieee754_log+0x148>
 800d004:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800d060 <__ieee754_log+0x350>
 800d008:	e698      	b.n	800cd3c <__ieee754_log+0x2c>
 800d00a:	bf00      	nop
 800d00c:	f3af 8000 	nop.w
 800d010:	fee00000 	.word	0xfee00000
 800d014:	3fe62e42 	.word	0x3fe62e42
 800d018:	35793c76 	.word	0x35793c76
 800d01c:	3dea39ef 	.word	0x3dea39ef
 800d020:	55555555 	.word	0x55555555
 800d024:	3fd55555 	.word	0x3fd55555
 800d028:	df3e5244 	.word	0xdf3e5244
 800d02c:	3fc2f112 	.word	0x3fc2f112
 800d030:	96cb03de 	.word	0x96cb03de
 800d034:	3fc74664 	.word	0x3fc74664
 800d038:	94229359 	.word	0x94229359
 800d03c:	3fd24924 	.word	0x3fd24924
 800d040:	55555593 	.word	0x55555593
 800d044:	3fe55555 	.word	0x3fe55555
 800d048:	d078c69f 	.word	0xd078c69f
 800d04c:	3fc39a09 	.word	0x3fc39a09
 800d050:	1d8e78af 	.word	0x1d8e78af
 800d054:	3fcc71c5 	.word	0x3fcc71c5
 800d058:	9997fa04 	.word	0x9997fa04
 800d05c:	3fd99999 	.word	0x3fd99999
	...
 800d068:	c3500000 	.word	0xc3500000
 800d06c:	43500000 	.word	0x43500000
 800d070:	7fefffff 	.word	0x7fefffff
 800d074:	3ff00000 	.word	0x3ff00000
 800d078:	3fe00000 	.word	0x3fe00000

0800d07c <_init>:
 800d07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07e:	bf00      	nop
 800d080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d082:	bc08      	pop	{r3}
 800d084:	469e      	mov	lr, r3
 800d086:	4770      	bx	lr

0800d088 <_fini>:
 800d088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d08a:	bf00      	nop
 800d08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d08e:	bc08      	pop	{r3}
 800d090:	469e      	mov	lr, r3
 800d092:	4770      	bx	lr
